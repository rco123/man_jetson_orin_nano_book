{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JETSON ORIN NANO Jetson Orin Nano \ubcf4\ub4dc \uac1c\uc694 Jetson Orin Nano\ub294 NVIDIA\uc758 \ucd5c\uc2e0 AI \ubc0f \uc5e3\uc9c0 \ucef4\ud4e8\ud305 \ud50c\ub7ab\ud3fc\uc73c\ub85c, Jetson Nano\uc758 \uc5c5\uadf8\ub808\uc774\ub4dc \ubc84\uc804\uc785\ub2c8\ub2e4. \uc774 \ubcf4\ub4dc\ub294 NVIDIA\uc758 Orin SoC(System on Chip)\ub97c \uae30\ubc18\uc73c\ub85c \ud558\uba70, \ub354 \uac15\ub825\ud55c \ucef4\ud4e8\ud305 \uc131\ub2a5\uacfc \uc804\ub825 \ud6a8\uc728\uc131\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Jetson Orin Nano\ub294 \ub85c\ubd07\uacf5\ud559, AIoT, \uc5e3\uc9c0 \ucef4\ud4e8\ud305, \ube44\uc804 \uc2dc\uc2a4\ud15c \ub4f1 \ub2e4\uc591\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uc8fc\uc694 \uc0ac\uc591 \ud56d\ubaa9 \uc0ac\uc591 GPU NVIDIA Ampere \uc544\ud0a4\ud14d\ucc98, 1024 CUDA \ucf54\uc5b4, 32 Tensor \ucf54\uc5b4 CPU 6\ucf54\uc5b4 ARM Cortex-A78AE v8.2 64\ube44\ud2b8 \uba54\ubaa8\ub9ac 4GB \ub610\ub294 8GB LPDDR5 (\ubc84\uc804\uc5d0 \ub530\ub77c \ub2e4\ub984) \uc800\uc7a5\uc18c microSD \uce74\ub4dc \uc2ac\ub86f (\ucd5c\ub300 128GB \uc774\uc0c1 \uc9c0\uc6d0) AI \uc131\ub2a5 \ucd5c\ub300 40 TOPS (8GB \ubaa8\ub378 \uae30\uc900) \ub124\ud2b8\uc6cc\ud06c \uae30\uac00\ube44\ud2b8 \uc774\ub354\ub137 I/O \uc778\ud130\ud398\uc774\uc2a4 GPIO, I2C, I2S, SPI, UART, CAN, PWM \ub4f1 \uce74\uba54\ub77c \uc778\ud130\ud398\uc774\uc2a4 2 x MIPI CSI-2 (4 \ub808\uc778) \ud655\uc7a5\uc131 40\ud540 GPIO \ud5e4\ub354 (Raspberry Pi \ud638\ud658) \uc804\ub825 \uc18c\ube44 7~15W (\uad6c\uc131 \uac00\ub2a5) \ud06c\uae30 100mm x 80mm (Jetson Nano\uc640 \ub3d9\uc77c) \uc6b4\uc601\uccb4\uc81c NVIDIA JetPack SDK (Ubuntu 20.04 \uae30\ubc18) \uc8fc\uc694 \ud2b9\uc9d5 1. \uac15\ud654\ub41c AI \uc131\ub2a5 Jetson Orin Nano\ub294 \uc774\uc804 Jetson Nano \ubaa8\ub378 \ub300\ube44 **20\ubc30 \uc774\uc0c1\uc758 AI \uc131\ub2a5**\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. 32\uac1c\uc758 Tensor \ucf54\uc5b4\ub97c \ud1b5\ud574 \uace0\uc131\ub2a5 AI \ucd94\ub860 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 2. Ampere GPU \uc544\ud0a4\ud14d\ucc98 NVIDIA Ampere \uc544\ud0a4\ud14d\ucc98 \uae30\ubc18 GPU\ub97c \ud0d1\uc7ac\ud558\uc5ec \ub354 \ub192\uc740 \ucc98\ub9ac \uc131\ub2a5\uacfc \uc5d0\ub108\uc9c0 \ud6a8\uc728\uc131\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. CUDA, TensorRT, NVIDIA DeepStream\uc744 \ud1b5\ud574 AI \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud558\uace0 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 3. \ud655\uc7a5 \uac00\ub2a5\ud55c \uba54\ubaa8\ub9ac 4GB \ubc0f 8GB LPDDR5 \uba54\ubaa8\ub9ac \uc635\uc158\uc73c\ub85c \ub2e4\uc591\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc694\uad6c\ub97c \ucda9\uc871\ud569\ub2c8\ub2e4. \ub192\uc740 \uba54\ubaa8\ub9ac \ub300\uc5ed\ud3ed\uc73c\ub85c AI \ubc0f \ube44\uc804 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. 4. \ub2e4\uc591\ud55c I/O \uc778\ud130\ud398\uc774\uc2a4 **40\ud540 GPIO \ud5e4\ub354**\ub294 Raspberry Pi\uc640 \ud540 \ubc30\uce58\uac00 \ud638\ud658\ub418\uba70, \ub2e4\uc591\ud55c \uc13c\uc11c\uc640 \uc561\ucd94\uc5d0\uc774\ud130\ub97c \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **MIPI CSI-2 \uc778\ud130\ud398\uc774\uc2a4**\ub97c \ud1b5\ud574 \ucd5c\ub300 2\uac1c\uc758 \uce74\uba54\ub77c\ub97c \uc5f0\uacb0\ud558\uc5ec AI \uae30\ubc18 \ube44\uc804 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 5. JetPack SDK \uc9c0\uc6d0 NVIDIA JetPack SDK\ub97c \ud1b5\ud574 CUDA, TensorRT, cuDNN, DeepStream, ROS\uc640 \uac19\uc740 \uace0\uae09 AI \ubc0f \ub85c\ubd07 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. Docker \ucee8\ud14c\uc774\ub108\uc640 NVIDIA\uc758 NGC \uce74\ud0c8\ub85c\uadf8\ub97c \ud1b5\ud574 \uc0ac\uc804 \ud2b8\ub808\uc774\ub2dd\ub41c AI \ubaa8\ub378\uacfc \ud234\uc744 \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud65c\uc6a9 \ubd84\uc57c \ub85c\ubd07\uacf5\ud559 \uc790\uc728 \uc8fc\ud589 \ub85c\ubd07 \uacf5\uc7a5 \uc790\ub3d9\ud654 \uc2e4\uc2dc\uac04 \ube44\uc804 \ubd84\uc11d \ubc0f \uacbd\ub85c \ud0d0\uc0c9 AIoT \ubc0f \uc5e3\uc9c0 \ucef4\ud4e8\ud305 \uc2a4\ub9c8\ud2b8 \ub3c4\uc2dc \uc778\ud504\ub77c \uc5e3\uc9c0 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c AI \ucd94\ub860 AIoT \uac8c\uc774\ud2b8\uc6e8\uc774 \ucef4\ud4e8\ud130 \ube44\uc804 \ubb3c\uccb4 \ud0d0\uc9c0 \ubc0f \uc778\uc2dd \ub3d9\uc791 \ucd94\uc801 \ube44\ub514\uc624 \uc2a4\ud2b8\ub9ac\ubc0d \ubc0f \ubd84\uc11d \uc74c\uc131 \ubc0f \uc790\uc5f0\uc5b4 \ucc98\ub9ac \uc2e4\uc2dc\uac04 \uc74c\uc131 \uc778\uc2dd \uc2a4\ub9c8\ud2b8 \uc2a4\ud53c\ucee4 \ubc0f \ub300\ud654\ud615 AI \ud5ec\uc2a4\ucf00\uc5b4 \ubc0f \ubc14\uc774\uc624 \uc758\ub8cc \uc774\ubbf8\uc9c0 \ubd84\uc11d \ud658\uc790 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c Jetson Orin Nano\uc640 Jetson Nano \ube44\uad50 \ud56d\ubaa9 Jetson Nano Jetson Orin Nano GPU Maxwell, 128 CUDA \ucf54\uc5b4 Ampere, 1024 CUDA \ucf54\uc5b4 CPU Quad-core ARM Cortex-A57 Hexa-core ARM Cortex-A78AE \uba54\ubaa8\ub9ac 4GB LPDDR4 4GB/8GB LPDDR5 AI \uc131\ub2a5 0.5 TOPS \ucd5c\ub300 40 TOPS \uce74\uba54\ub77c \uc778\ud130\ud398\uc774\uc2a4 1 x MIPI CSI-2 2 x MIPI CSI-2 \uc804\ub825 \uc18c\ube44 5~10W 7~15W \ud06c\uae30 100mm x 80mm 100mm x 80mm \uc2dc\uc791\ud558\uae30 JetPack SDK \uc124\uce58 : Jetson Orin Nano\ub294 NVIDIA JetPack SDK\ub97c \ud1b5\ud574 \uc124\uc815\ub429\ub2c8\ub2e4. NVIDIA \ub2e4\uc6b4\ub85c\ub4dc \uc13c\ud130 \uc5d0\uc11c \ucd5c\uc2e0 \ubc84\uc804\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc138\uc694. microSD \uce74\ub4dc \uc900\ube44 : Jetson Nano \uc774\ubbf8\uc9c0 \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 **Balena Etcher**\ub85c microSD \uce74\ub4dc\uc5d0 \ud50c\ub798\uc2dc\ud569\ub2c8\ub2e4. \ubd80\ud305 \ubc0f \uc124\uc815 : microSD \uce74\ub4dc\ub97c \uc0bd\uc785\ud558\uace0 Jetson Orin Nano\ub97c \ubd80\ud305\ud55c \ub4a4 \ucd08\uae30 \uc124\uc815\uc744 \uc644\ub8cc\ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \uc124\uc815 : Wi-Fi \ub610\ub294 \uc774\ub354\ub137\uc744 \ud1b5\ud574 \uc778\ud130\ub137\uc5d0 \uc5f0\uacb0\ud569\ub2c8\ub2e4. Jetson Orin Nano\ub294 \uac15\ub825\ud55c AI \uc131\ub2a5\uacfc \uc720\uc5f0\uc131\uc744 \uc81c\uacf5\ud558\uc5ec \ub2e4\uc591\ud55c \uc5e3\uc9c0 \ubc0f AIoT \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \ub192\uc740 \uc131\ub2a5\uacfc \ud6a8\uc728\uc131\uc744 \ud65c\uc6a9\ud558\uc5ec \ubcf5\uc7a1\ud55c AI \uc791\uc5c5\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Home"},{"location":"#jetson-orin-nano","text":"Jetson Orin Nano\ub294 NVIDIA\uc758 \ucd5c\uc2e0 AI \ubc0f \uc5e3\uc9c0 \ucef4\ud4e8\ud305 \ud50c\ub7ab\ud3fc\uc73c\ub85c, Jetson Nano\uc758 \uc5c5\uadf8\ub808\uc774\ub4dc \ubc84\uc804\uc785\ub2c8\ub2e4. \uc774 \ubcf4\ub4dc\ub294 NVIDIA\uc758 Orin SoC(System on Chip)\ub97c \uae30\ubc18\uc73c\ub85c \ud558\uba70, \ub354 \uac15\ub825\ud55c \ucef4\ud4e8\ud305 \uc131\ub2a5\uacfc \uc804\ub825 \ud6a8\uc728\uc131\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Jetson Orin Nano\ub294 \ub85c\ubd07\uacf5\ud559, AIoT, \uc5e3\uc9c0 \ucef4\ud4e8\ud305, \ube44\uc804 \uc2dc\uc2a4\ud15c \ub4f1 \ub2e4\uc591\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4.","title":"Jetson Orin Nano \ubcf4\ub4dc \uac1c\uc694"},{"location":"#_1","text":"\ud56d\ubaa9 \uc0ac\uc591 GPU NVIDIA Ampere \uc544\ud0a4\ud14d\ucc98, 1024 CUDA \ucf54\uc5b4, 32 Tensor \ucf54\uc5b4 CPU 6\ucf54\uc5b4 ARM Cortex-A78AE v8.2 64\ube44\ud2b8 \uba54\ubaa8\ub9ac 4GB \ub610\ub294 8GB LPDDR5 (\ubc84\uc804\uc5d0 \ub530\ub77c \ub2e4\ub984) \uc800\uc7a5\uc18c microSD \uce74\ub4dc \uc2ac\ub86f (\ucd5c\ub300 128GB \uc774\uc0c1 \uc9c0\uc6d0) AI \uc131\ub2a5 \ucd5c\ub300 40 TOPS (8GB \ubaa8\ub378 \uae30\uc900) \ub124\ud2b8\uc6cc\ud06c \uae30\uac00\ube44\ud2b8 \uc774\ub354\ub137 I/O \uc778\ud130\ud398\uc774\uc2a4 GPIO, I2C, I2S, SPI, UART, CAN, PWM \ub4f1 \uce74\uba54\ub77c \uc778\ud130\ud398\uc774\uc2a4 2 x MIPI CSI-2 (4 \ub808\uc778) \ud655\uc7a5\uc131 40\ud540 GPIO \ud5e4\ub354 (Raspberry Pi \ud638\ud658) \uc804\ub825 \uc18c\ube44 7~15W (\uad6c\uc131 \uac00\ub2a5) \ud06c\uae30 100mm x 80mm (Jetson Nano\uc640 \ub3d9\uc77c) \uc6b4\uc601\uccb4\uc81c NVIDIA JetPack SDK (Ubuntu 20.04 \uae30\ubc18)","title":"\uc8fc\uc694 \uc0ac\uc591"},{"location":"#_2","text":"","title":"\uc8fc\uc694 \ud2b9\uc9d5"},{"location":"#1-ai","text":"Jetson Orin Nano\ub294 \uc774\uc804 Jetson Nano \ubaa8\ub378 \ub300\ube44 **20\ubc30 \uc774\uc0c1\uc758 AI \uc131\ub2a5**\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. 32\uac1c\uc758 Tensor \ucf54\uc5b4\ub97c \ud1b5\ud574 \uace0\uc131\ub2a5 AI \ucd94\ub860 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1. \uac15\ud654\ub41c AI \uc131\ub2a5"},{"location":"#2-ampere-gpu","text":"NVIDIA Ampere \uc544\ud0a4\ud14d\ucc98 \uae30\ubc18 GPU\ub97c \ud0d1\uc7ac\ud558\uc5ec \ub354 \ub192\uc740 \ucc98\ub9ac \uc131\ub2a5\uacfc \uc5d0\ub108\uc9c0 \ud6a8\uc728\uc131\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. CUDA, TensorRT, NVIDIA DeepStream\uc744 \ud1b5\ud574 AI \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud558\uace0 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"2. Ampere GPU \uc544\ud0a4\ud14d\ucc98"},{"location":"#3","text":"4GB \ubc0f 8GB LPDDR5 \uba54\ubaa8\ub9ac \uc635\uc158\uc73c\ub85c \ub2e4\uc591\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc694\uad6c\ub97c \ucda9\uc871\ud569\ub2c8\ub2e4. \ub192\uc740 \uba54\ubaa8\ub9ac \ub300\uc5ed\ud3ed\uc73c\ub85c AI \ubc0f \ube44\uc804 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"3. \ud655\uc7a5 \uac00\ub2a5\ud55c \uba54\ubaa8\ub9ac"},{"location":"#4-io","text":"**40\ud540 GPIO \ud5e4\ub354**\ub294 Raspberry Pi\uc640 \ud540 \ubc30\uce58\uac00 \ud638\ud658\ub418\uba70, \ub2e4\uc591\ud55c \uc13c\uc11c\uc640 \uc561\ucd94\uc5d0\uc774\ud130\ub97c \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **MIPI CSI-2 \uc778\ud130\ud398\uc774\uc2a4**\ub97c \ud1b5\ud574 \ucd5c\ub300 2\uac1c\uc758 \uce74\uba54\ub77c\ub97c \uc5f0\uacb0\ud558\uc5ec AI \uae30\ubc18 \ube44\uc804 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4. \ub2e4\uc591\ud55c I/O \uc778\ud130\ud398\uc774\uc2a4"},{"location":"#5-jetpack-sdk","text":"NVIDIA JetPack SDK\ub97c \ud1b5\ud574 CUDA, TensorRT, cuDNN, DeepStream, ROS\uc640 \uac19\uc740 \uace0\uae09 AI \ubc0f \ub85c\ubd07 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. Docker \ucee8\ud14c\uc774\ub108\uc640 NVIDIA\uc758 NGC \uce74\ud0c8\ub85c\uadf8\ub97c \ud1b5\ud574 \uc0ac\uc804 \ud2b8\ub808\uc774\ub2dd\ub41c AI \ubaa8\ub378\uacfc \ud234\uc744 \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"5. JetPack SDK \uc9c0\uc6d0"},{"location":"#_3","text":"\ub85c\ubd07\uacf5\ud559 \uc790\uc728 \uc8fc\ud589 \ub85c\ubd07 \uacf5\uc7a5 \uc790\ub3d9\ud654 \uc2e4\uc2dc\uac04 \ube44\uc804 \ubd84\uc11d \ubc0f \uacbd\ub85c \ud0d0\uc0c9 AIoT \ubc0f \uc5e3\uc9c0 \ucef4\ud4e8\ud305 \uc2a4\ub9c8\ud2b8 \ub3c4\uc2dc \uc778\ud504\ub77c \uc5e3\uc9c0 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c AI \ucd94\ub860 AIoT \uac8c\uc774\ud2b8\uc6e8\uc774 \ucef4\ud4e8\ud130 \ube44\uc804 \ubb3c\uccb4 \ud0d0\uc9c0 \ubc0f \uc778\uc2dd \ub3d9\uc791 \ucd94\uc801 \ube44\ub514\uc624 \uc2a4\ud2b8\ub9ac\ubc0d \ubc0f \ubd84\uc11d \uc74c\uc131 \ubc0f \uc790\uc5f0\uc5b4 \ucc98\ub9ac \uc2e4\uc2dc\uac04 \uc74c\uc131 \uc778\uc2dd \uc2a4\ub9c8\ud2b8 \uc2a4\ud53c\ucee4 \ubc0f \ub300\ud654\ud615 AI \ud5ec\uc2a4\ucf00\uc5b4 \ubc0f \ubc14\uc774\uc624 \uc758\ub8cc \uc774\ubbf8\uc9c0 \ubd84\uc11d \ud658\uc790 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c","title":"\ud65c\uc6a9 \ubd84\uc57c"},{"location":"#jetson-orin-nano-jetson-nano","text":"\ud56d\ubaa9 Jetson Nano Jetson Orin Nano GPU Maxwell, 128 CUDA \ucf54\uc5b4 Ampere, 1024 CUDA \ucf54\uc5b4 CPU Quad-core ARM Cortex-A57 Hexa-core ARM Cortex-A78AE \uba54\ubaa8\ub9ac 4GB LPDDR4 4GB/8GB LPDDR5 AI \uc131\ub2a5 0.5 TOPS \ucd5c\ub300 40 TOPS \uce74\uba54\ub77c \uc778\ud130\ud398\uc774\uc2a4 1 x MIPI CSI-2 2 x MIPI CSI-2 \uc804\ub825 \uc18c\ube44 5~10W 7~15W \ud06c\uae30 100mm x 80mm 100mm x 80mm","title":"Jetson Orin Nano\uc640 Jetson Nano \ube44\uad50"},{"location":"#_4","text":"JetPack SDK \uc124\uce58 : Jetson Orin Nano\ub294 NVIDIA JetPack SDK\ub97c \ud1b5\ud574 \uc124\uc815\ub429\ub2c8\ub2e4. NVIDIA \ub2e4\uc6b4\ub85c\ub4dc \uc13c\ud130 \uc5d0\uc11c \ucd5c\uc2e0 \ubc84\uc804\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc138\uc694. microSD \uce74\ub4dc \uc900\ube44 : Jetson Nano \uc774\ubbf8\uc9c0 \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 **Balena Etcher**\ub85c microSD \uce74\ub4dc\uc5d0 \ud50c\ub798\uc2dc\ud569\ub2c8\ub2e4. \ubd80\ud305 \ubc0f \uc124\uc815 : microSD \uce74\ub4dc\ub97c \uc0bd\uc785\ud558\uace0 Jetson Orin Nano\ub97c \ubd80\ud305\ud55c \ub4a4 \ucd08\uae30 \uc124\uc815\uc744 \uc644\ub8cc\ud569\ub2c8\ub2e4. \ub124\ud2b8\uc6cc\ud06c \uc124\uc815 : Wi-Fi \ub610\ub294 \uc774\ub354\ub137\uc744 \ud1b5\ud574 \uc778\ud130\ub137\uc5d0 \uc5f0\uacb0\ud569\ub2c8\ub2e4. Jetson Orin Nano\ub294 \uac15\ub825\ud55c AI \uc131\ub2a5\uacfc \uc720\uc5f0\uc131\uc744 \uc81c\uacf5\ud558\uc5ec \ub2e4\uc591\ud55c \uc5e3\uc9c0 \ubc0f AIoT \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \ub192\uc740 \uc131\ub2a5\uacfc \ud6a8\uc728\uc131\uc744 \ud65c\uc6a9\ud558\uc5ec \ubcf5\uc7a1\ud55c AI \uc791\uc5c5\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc2dc\uc791\ud558\uae30"},{"location":"YOLO/yolo5%EC%84%A4%EC%B9%98/","text":"YOLO5 \uc124\uce58 Jetson Orin Nano\uc5d0\uc11c YOLO\ub97c \uc0ac\uc6a9\ud558\ub824\uba74, NVIDIA\uc758 \ud558\ub4dc\uc6e8\uc5b4 \uac00\uc18d\uc744 \ud65c\uc6a9\ud558\uc5ec \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Jetson Orin Nano\ub294 CUDA\uc640 TensorRT\ub97c \uc9c0\uc6d0\ud558\ubbc0\ub85c YOLO \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud558\uc5ec \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\ub294 YOLO\ub97c Jetson Orin Nano\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uacfc\uc815\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc815\ub9ac\ud55c \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4. 1. Jetson Orin Nano \ud658\uacbd \uc900\ube44 Python \ubc0f \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58 Python \ubc0f \ud328\ud0a4\uc9c0 \uad00\ub9ac \ub3c4\uad6c pip \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. sudo apt update sudo apt install python3-pip pip3 install --upgrade pip YOLO \ud504\ub808\uc784\uc6cc\ud06c \uc120\ud0dd YOLOv5, YOLOv7, YOLOv8 \ub4f1 \ub2e4\uc591\ud55c \ubc84\uc804\uc774 \uc788\uc73c\uba70, PyTorch \ub610\ub294 TensorFlow \uae30\ubc18\uc73c\ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4. YOLOv5\uac00 \uc77c\ubc18\uc801\uc73c\ub85c Jetson\uc5d0\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. 2. YOLO \ubaa8\ub378 \uc124\uce58 \ubc0f \uc2e4\ud589 YOLOv5 \uc124\uce58 YOLOv5\ub294 PyTorch\ub97c \uae30\ubc18\uc73c\ub85c \ud558\ubbc0\ub85c PyTorch\ub97c \uba3c\uc800 \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. NVIDIA\uc5d0\uc11c Jetson\uc6a9 PyTorch\ub97c \uc81c\uacf5\ud558\ubbc0\ub85c \uc801\ud569\ud55c \ubc84\uc804\uc744 \uc124\uce58\ud558\uc138\uc694. PyTorch \uc124\uce58: wget https://developer.download.nvidia.com/compute/redist/jp/vXX/pytorch/torch-<version>-cp<python_version>-linux_aarch64.whl pip3 install torch-<version>-cp<python_version>-linux_aarch64.whl pip3 install torchvision YOLOv5 \ud074\ub860: git clone https://github.com/ultralytics/yolov5.git cd yolov5 pip3 install -r requirements.txt \ubaa8\ub378 \ub2e4\uc6b4\ub85c\ub4dc \ubc0f \ud14c\uc2a4\ud2b8 YOLOv5\uc758 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc5ec \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. python3 detect.py --source 0 --weights yolov5s.pt --source \ub97c \ubcc0\uacbd\ud558\uc5ec \uc6f9\ucea0(0) \ub610\ub294 \uc774\ubbf8\uc9c0 \ud30c\uc77c \uacbd\ub85c\ub97c \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 3. TensorRT \ucd5c\uc801\ud654 (\uc120\ud0dd \uc0ac\ud56d) Jetson Orin Nano\uc758 TensorRT\ub97c \uc0ac\uc6a9\ud558\uc5ec YOLO \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud558\uba74 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4. 1. ONNX \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658 YOLO \ubaa8\ub378\uc744 ONNX\ub85c \ub0b4\ubcf4\ub0c5\ub2c8\ub2e4. python3 export.py --weights yolov5s.pt --img 640 --batch 1 TensorRT \ubcc0\ud658 NVIDIA TensorRT\ub85c ONNX \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud569\ub2c8\ub2e4. trtexec --onnx = yolov5s.onnx --saveEngine = yolov5s.trt --fp16 TensorRT \ubaa8\ub378 \uc2e4\ud589 TensorRT \ubaa8\ub378 \uc2e4\ud589\uc744 \uc704\ud55c YOLO \uad6c\ud604\uccb4\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \uc9c1\uc811 \ucf54\ub4dc\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. 4. \uc0ac\uc6a9 \uc608\uc81c YOLO \ubaa8\ub378\uc744 Jetson Orin Nano\uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uce74\uba54\ub77c \uc2a4\ud2b8\ub9bc\uc744 \ucc98\ub9ac\ud558\uac70\ub098 \uac1d\uccb4 \uac10\uc9c0\ub97c \uc218\ud589\ud569\ub2c8\ub2e4. OpenCV\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import cv2 import torch from yolov5 import YOLO model = YOLO ( 'yolov5s.pt' ) # \ubaa8\ub378 \ub85c\ub4dc cap = cv2 . VideoCapture ( 0 ) # \uc6f9\ucea0 \uc2a4\ud2b8\ub9bc \uc5f4\uae30 while True : ret , frame = cap . read () if not ret : break results = model ( frame ) # \uac1d\uccb4 \uac10\uc9c0 frame = results . render () # \uacb0\uacfc \ub80c\ub354\ub9c1 cv2 . imshow ( 'YOLO Detection' , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () 5. \uc131\ub2a5 \ucd5c\uc801\ud654 \ud301 TensorRT FP16 \uc0ac\uc6a9 : \ubaa8\ub378 \ucd94\ub860 \uc18d\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud574 FP16 \uc815\ubc00\ub3c4\ub97c \ud65c\uc6a9\ud558\uc138\uc694. CUDA Streams : GPU \uc0ac\uc6a9\ub960\uc744 \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud574 CUDA \uc2a4\ud2b8\ub9bc\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \ubc30\uce58 \ud06c\uae30 : \uac00\ub2a5\ud55c \ud55c \ud070 \ubc30\uce58 \ud06c\uae30\ub97c \uc124\uc815\ud558\uba74 \ucc98\ub9ac \uc18d\ub3c4\uac00 \ud5a5\uc0c1\ub429\ub2c8\ub2e4. GPU \ubaa8\ub2c8\ud130\ub9c1 : tegrastats \uba85\ub839\uc73c\ub85c GPU \ubc0f CPU \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uc138\uc694. Jetson Orin Nano\uc5d0\uc11c YOLO\ub97c \uc124\uc815\ud558\uace0 \uc2e4\ud589\ud558\uba74\uc11c \ucd94\uac00\uc801\uc778 \ubb38\uc81c\uac00 \uc788\uc73c\uba74 \uc54c\ub824\uc8fc\uc138\uc694!","title":"6.1 YOLO5 \uc124\uce58"},{"location":"YOLO/yolo5%EC%84%A4%EC%B9%98/#yolo5","text":"Jetson Orin Nano\uc5d0\uc11c YOLO\ub97c \uc0ac\uc6a9\ud558\ub824\uba74, NVIDIA\uc758 \ud558\ub4dc\uc6e8\uc5b4 \uac00\uc18d\uc744 \ud65c\uc6a9\ud558\uc5ec \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Jetson Orin Nano\ub294 CUDA\uc640 TensorRT\ub97c \uc9c0\uc6d0\ud558\ubbc0\ub85c YOLO \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud558\uc5ec \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\ub294 YOLO\ub97c Jetson Orin Nano\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uacfc\uc815\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc815\ub9ac\ud55c \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4.","title":"YOLO5 \uc124\uce58"},{"location":"YOLO/yolo5%EC%84%A4%EC%B9%98/#1-jetson-orin-nano","text":"Python \ubc0f \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58 Python \ubc0f \ud328\ud0a4\uc9c0 \uad00\ub9ac \ub3c4\uad6c pip \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. sudo apt update sudo apt install python3-pip pip3 install --upgrade pip YOLO \ud504\ub808\uc784\uc6cc\ud06c \uc120\ud0dd YOLOv5, YOLOv7, YOLOv8 \ub4f1 \ub2e4\uc591\ud55c \ubc84\uc804\uc774 \uc788\uc73c\uba70, PyTorch \ub610\ub294 TensorFlow \uae30\ubc18\uc73c\ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4. YOLOv5\uac00 \uc77c\ubc18\uc801\uc73c\ub85c Jetson\uc5d0\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"1. Jetson Orin Nano \ud658\uacbd \uc900\ube44"},{"location":"YOLO/yolo5%EC%84%A4%EC%B9%98/#2-yolo","text":"YOLOv5 \uc124\uce58 YOLOv5\ub294 PyTorch\ub97c \uae30\ubc18\uc73c\ub85c \ud558\ubbc0\ub85c PyTorch\ub97c \uba3c\uc800 \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. NVIDIA\uc5d0\uc11c Jetson\uc6a9 PyTorch\ub97c \uc81c\uacf5\ud558\ubbc0\ub85c \uc801\ud569\ud55c \ubc84\uc804\uc744 \uc124\uce58\ud558\uc138\uc694. PyTorch \uc124\uce58: wget https://developer.download.nvidia.com/compute/redist/jp/vXX/pytorch/torch-<version>-cp<python_version>-linux_aarch64.whl pip3 install torch-<version>-cp<python_version>-linux_aarch64.whl pip3 install torchvision YOLOv5 \ud074\ub860: git clone https://github.com/ultralytics/yolov5.git cd yolov5 pip3 install -r requirements.txt \ubaa8\ub378 \ub2e4\uc6b4\ub85c\ub4dc \ubc0f \ud14c\uc2a4\ud2b8 YOLOv5\uc758 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc5ec \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. python3 detect.py --source 0 --weights yolov5s.pt --source \ub97c \ubcc0\uacbd\ud558\uc5ec \uc6f9\ucea0(0) \ub610\ub294 \uc774\ubbf8\uc9c0 \ud30c\uc77c \uacbd\ub85c\ub97c \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"2. YOLO \ubaa8\ub378 \uc124\uce58 \ubc0f \uc2e4\ud589"},{"location":"YOLO/yolo5%EC%84%A4%EC%B9%98/#3-tensorrt","text":"Jetson Orin Nano\uc758 TensorRT\ub97c \uc0ac\uc6a9\ud558\uc5ec YOLO \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud558\uba74 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4. 1. ONNX \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658 YOLO \ubaa8\ub378\uc744 ONNX\ub85c \ub0b4\ubcf4\ub0c5\ub2c8\ub2e4. python3 export.py --weights yolov5s.pt --img 640 --batch 1 TensorRT \ubcc0\ud658 NVIDIA TensorRT\ub85c ONNX \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\ud569\ub2c8\ub2e4. trtexec --onnx = yolov5s.onnx --saveEngine = yolov5s.trt --fp16 TensorRT \ubaa8\ub378 \uc2e4\ud589 TensorRT \ubaa8\ub378 \uc2e4\ud589\uc744 \uc704\ud55c YOLO \uad6c\ud604\uccb4\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \uc9c1\uc811 \ucf54\ub4dc\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.","title":"3. TensorRT \ucd5c\uc801\ud654 (\uc120\ud0dd \uc0ac\ud56d)"},{"location":"YOLO/yolo5%EC%84%A4%EC%B9%98/#4","text":"YOLO \ubaa8\ub378\uc744 Jetson Orin Nano\uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uce74\uba54\ub77c \uc2a4\ud2b8\ub9bc\uc744 \ucc98\ub9ac\ud558\uac70\ub098 \uac1d\uccb4 \uac10\uc9c0\ub97c \uc218\ud589\ud569\ub2c8\ub2e4. OpenCV\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import cv2 import torch from yolov5 import YOLO model = YOLO ( 'yolov5s.pt' ) # \ubaa8\ub378 \ub85c\ub4dc cap = cv2 . VideoCapture ( 0 ) # \uc6f9\ucea0 \uc2a4\ud2b8\ub9bc \uc5f4\uae30 while True : ret , frame = cap . read () if not ret : break results = model ( frame ) # \uac1d\uccb4 \uac10\uc9c0 frame = results . render () # \uacb0\uacfc \ub80c\ub354\ub9c1 cv2 . imshow ( 'YOLO Detection' , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows ()","title":"4. \uc0ac\uc6a9 \uc608\uc81c"},{"location":"YOLO/yolo5%EC%84%A4%EC%B9%98/#5","text":"TensorRT FP16 \uc0ac\uc6a9 : \ubaa8\ub378 \ucd94\ub860 \uc18d\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud574 FP16 \uc815\ubc00\ub3c4\ub97c \ud65c\uc6a9\ud558\uc138\uc694. CUDA Streams : GPU \uc0ac\uc6a9\ub960\uc744 \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud574 CUDA \uc2a4\ud2b8\ub9bc\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \ubc30\uce58 \ud06c\uae30 : \uac00\ub2a5\ud55c \ud55c \ud070 \ubc30\uce58 \ud06c\uae30\ub97c \uc124\uc815\ud558\uba74 \ucc98\ub9ac \uc18d\ub3c4\uac00 \ud5a5\uc0c1\ub429\ub2c8\ub2e4. GPU \ubaa8\ub2c8\ud130\ub9c1 : tegrastats \uba85\ub839\uc73c\ub85c GPU \ubc0f CPU \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uc138\uc694. Jetson Orin Nano\uc5d0\uc11c YOLO\ub97c \uc124\uc815\ud558\uace0 \uc2e4\ud589\ud558\uba74\uc11c \ucd94\uac00\uc801\uc778 \ubb38\uc81c\uac00 \uc788\uc73c\uba74 \uc54c\ub824\uc8fc\uc138\uc694!","title":"5. \uc131\ub2a5 \ucd5c\uc801\ud654 \ud301"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/","text":"\uc0ac\uc6a9\uc790 \ud559\uc2b5 YOLOv5\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \ud559\uc2b5\uc2dc\ud0a4\uace0 \ud2b9\uc815 \ud45c\uc9c0\ud310( right , left , ahead )\uc744 \ud0d0\uc9c0\ud558\ub824\uba74 \ub2e4\uc74c \uacfc\uc815\uc744 \ub530\ub974\uba74 \ub429\ub2c8\ub2e4. 1. \ud544\uc218 \uc124\uce58 YOLOv5 \uc124\uce58 GitHub\uc5d0\uc11c YOLOv5\ub97c \ud074\ub860\ud558\uace0 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. git clone https://github.com/ultralytics/yolov5.git cd yolov5 pip3 install -r requirements.txt Python \ud658\uacbd \uad6c\uc131 Python 3.8 \uc774\uc0c1\uc774 \ud544\uc694\ud558\uba70, CUDA\uc640 PyTorch\uac00 Jetson Orin Nano\uc5d0 \ub9de\uac8c \uc124\uce58\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. 2. \ub370\uc774\ud130 \uc900\ube44 \ub370\uc774\ud130\uc14b \uc218\uc9d1 right , left , ahead \ud45c\uc9c0\ud310 \uc774\ubbf8\uc9c0\ub97c \uc218\uc9d1\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\ub294 \ub2e4\uc591\ud55c \uac01\ub3c4\uc640 \uc870\uba85 \uc870\uac74\uc744 \ud3ec\ud568\ud558\uc5ec \ucda9\ubd84\ud788 \uc900\ube44\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ud06c\uae30\ub294 YOLO \ubaa8\ub378\uc5d0 \uc801\ud569\ud558\ub3c4\ub85d \uc815\uaddc\ud654\ub418\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \ub77c\ubca8\ub9c1 \ub77c\ubca8\ub9c1 \ub3c4\uad6c\uc778 LabelImg \ub610\ub294 **Roboflow**\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \ub77c\ubca8\ub9c1\ud569\ub2c8\ub2e4. \uac01 \uc774\ubbf8\uc9c0\uc5d0 \ub300\ud574 \uac1d\uccb4\uc758 \uacbd\uacc4 \uc0c1\uc790\ub97c \uc124\uc815\ud558\uace0, right , left , ahead \ub85c \ud074\ub798\uc2a4 \uc774\ub984\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4. YOLO \ud615\uc2dd\uc758 \ub77c\ubca8 \ud30c\uc77c \uc0dd\uc131 (\uc774\ubbf8\uc9c0\uc640 \uac19\uc740 \uc774\ub984, .txt \ud655\uc7a5\uc790): class_id x_center y_center width height \uc608: 0 0.5 0.5 0.2 0.3 class_id \ub294 \ud074\ub798\uc2a4 \ubc88\ud638 (0 = right, 1 = left, 2 = ahead). x_center , y_center , width , height \ub294 \uc774\ubbf8\uc9c0 \ud06c\uae30 \ub300\ube44 \uc0c1\ub300 \uc88c\ud45c (0~1 \ubc94\uc704). \ub514\ub809\ud1a0\ub9ac \uad6c\uc870 \uc124\uc815 YOLO\ub294 \ub2e4\uc74c \uad6c\uc870\ub97c \uae30\ub300\ud569\ub2c8\ub2e4: dataset/ images/ train/ val/ labels/ train/ val/ images/train \uc5d0\ub294 \ud559\uc2b5 \uc774\ubbf8\uc9c0\uac00, images/val \uc5d0\ub294 \uac80\uc99d \uc774\ubbf8\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. labels/train \ubc0f labels/val \uc5d0\ub294 \uac01\uac01\uc758 \ub77c\ubca8 \ud30c\uc77c\uc774 \uc788\uc2b5\ub2c8\ub2e4. 3. \ub370\uc774\ud130 \uad6c\uc131 \ud30c\uc77c \uc791\uc131 data.yaml \uc0dd\uc131 \ud504\ub85c\uc81d\ud2b8 \ud3f4\ub354\uc5d0 data.yaml \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608: path : ./dataset # \ub370\uc774\ud130\uc14b \uacbd\ub85c train : images/train # \ud559\uc2b5 \uc774\ubbf8\uc9c0 \uacbd\ub85c val : images/val # \uac80\uc99d \uc774\ubbf8\uc9c0 \uacbd\ub85c nc : 3 # \ud074\ub798\uc2a4 \uc218 names : [ 'right' , 'left' , 'ahead' ] # \ud074\ub798\uc2a4 \uc774\ub984 4. YOLO \ubaa8\ub378 \ud559\uc2b5 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378 \ub2e4\uc6b4\ub85c\ub4dc \uc0ac\uc804 \ud559\uc2b5\ub41c YOLOv5 \ubaa8\ub378( yolov5s.pt )\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. YOLOv5s\ub294 \uc18c\ud615 \ubaa8\ub378\ub85c Jetson Nano\uc5d0\uc11c\ub3c4 \uc801\ud569\ud569\ub2c8\ub2e4. \ud559\uc2b5 \uc2dc\uc791 YOLO \ud559\uc2b5\uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4. python3 train.py --img 640 --batch 16 --epochs 50 --data data.yaml --weights yolov5s.pt --device 0 --img : \uc785\ub825 \uc774\ubbf8\uc9c0 \ud06c\uae30 (\uae30\ubcf8 640). --batch : \ubc30\uce58 \ud06c\uae30 (Jetson Orin Nano\uc758 \uba54\ubaa8\ub9ac \uc0c1\ud669\uc5d0 \ub9de\uac8c \uc870\uc815). --epochs : \ud559\uc2b5 \ubc18\ubcf5 \ud69f\uc218. --data : data.yaml \ud30c\uc77c \uacbd\ub85c. --weights : \uc0ac\uc804 \ud559\uc2b5\ub41c \uac00\uc911\uce58. --device : GPU \uc0ac\uc6a9 (0). \ud559\uc2b5 \ubaa8\ub2c8\ud130\ub9c1 \ud559\uc2b5 \uc9c4\ud589 \uc0c1\ud669\uc740 runs/train/exp/ \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \ud559\uc2b5 \ub85c\uadf8: results.png \ubc0f \ud14d\uc2a4\ud2b8 \ub85c\uadf8 \ud30c\uc77c. \ucd5c\uc885 \ubaa8\ub378 \uac00\uc911\uce58: runs/train/exp/weights/best.pt . 5. \ud559\uc2b5\ub41c \ubaa8\ub378 \ud14c\uc2a4\ud2b8 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc900\ube44 \ud14c\uc2a4\ud2b8\ud560 \uc774\ubbf8\uc9c0\ub098 \ub3d9\uc601\uc0c1\uc744 \uc900\ube44\ud569\ub2c8\ub2e4. \ubaa8\ub378 \ucd94\ub860 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd94\ub860\ud569\ub2c8\ub2e4. python3 detect.py --weights runs/train/exp/weights/best.pt --img 640 --source data/images/test.jpg --source : \ud14c\uc2a4\ud2b8 \uc774\ubbf8\uc9c0 \ub610\ub294 \ub3d9\uc601\uc0c1 \uacbd\ub85c. \uacb0\uacfc\ub294 runs/detect/exp/ \uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. 6. Jetson Orin Nano\uc5d0\uc11c \ucd5c\uc801\ud654 TensorRT \ubcc0\ud658 \ud559\uc2b5\ub41c \ubaa8\ub378( best.pt )\uc744 ONNX\ub85c \ubcc0\ud658\ud55c \ud6c4 TensorRT\ub85c \ucd5c\uc801\ud654\ud569\ub2c8\ub2e4. python3 export.py --weights runs/train/exp/weights/best.pt --img 640 --batch 1 trtexec --onnx = best.onnx --saveEngine = best.trt --fp16 \ucd5c\uc801\ud654\ub41c \ubaa8\ub378 \uc2e4\ud589 TensorRT\ub85c \ubcc0\ud658\ub41c \ubaa8\ub378( best.trt )\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc740 Jetson\uc758 GPU \uac00\uc18d\uc744 \uadf9\ub300\ud654\ud569\ub2c8\ub2e4. 7. \uacb0\uacfc \ubd84\uc11d \ud559\uc2b5 \uc131\ub2a5 \ubc0f \uac80\uc99d \uc131\ub2a5\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4. - results.png \ubd84\uc11d : \ud559\uc2b5 \ubc0f \uac80\uc99d \uc815\ud655\ub3c4, \uc190\uc2e4 \uadf8\ub798\ud504. - \ud63c\ub3d9 \ud589\ub82c : \ud074\ub798\uc2a4\ubcc4 \uc815\ud655\ub3c4 \ud655\uc778. - \uc2e4\uc2dc\uac04 \ud14c\uc2a4\ud2b8 : \ubaa8\ub378\uc758 \uc2e4\uc81c \uc131\ub2a5 \ud655\uc778. 8. \uc2e4\uc2dc\uac04 \uac10\uc9c0 (Jetson Orin Nano) Jetson Orin Nano\uc5d0\uc11c \uc2e4\uc2dc\uac04 \uac1d\uccb4 \uac10\uc9c0\ub97c \uc218\ud589\ud558\ub824\uba74 OpenCV\uc640 YOLO \ubaa8\ub378\uc744 \uacb0\ud569\ud558\uc5ec \uce74\uba54\ub77c \uc2a4\ud2b8\ub9bc\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4. import cv2 from yolov5 import YOLO model = YOLO ( 'runs/train/exp/weights/best.pt' ) cap = cv2 . VideoCapture ( 0 ) while True : ret , frame = cap . read () if not ret : break results = model ( frame ) frame = results . render () cv2 . imshow ( 'YOLO Detection' , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () \ud544\uc694\ud55c \ucd94\uac00 \uc0ac\ud56d\uc774\ub098 \uad6c\ud604 \uc911 \ubb38\uc81c\uac00 \uc788\ub2e4\uba74 \uc5b8\uc81c\ub4e0\uc9c0 \ubb38\uc758\ud558\uc138\uc694!","title":"6.2 YOLO5 \uc0ac\uc6a9\uc790\ud559\uc2b5"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#_1","text":"YOLOv5\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \ud559\uc2b5\uc2dc\ud0a4\uace0 \ud2b9\uc815 \ud45c\uc9c0\ud310( right , left , ahead )\uc744 \ud0d0\uc9c0\ud558\ub824\uba74 \ub2e4\uc74c \uacfc\uc815\uc744 \ub530\ub974\uba74 \ub429\ub2c8\ub2e4.","title":"\uc0ac\uc6a9\uc790 \ud559\uc2b5"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#1","text":"YOLOv5 \uc124\uce58 GitHub\uc5d0\uc11c YOLOv5\ub97c \ud074\ub860\ud558\uace0 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. git clone https://github.com/ultralytics/yolov5.git cd yolov5 pip3 install -r requirements.txt Python \ud658\uacbd \uad6c\uc131 Python 3.8 \uc774\uc0c1\uc774 \ud544\uc694\ud558\uba70, CUDA\uc640 PyTorch\uac00 Jetson Orin Nano\uc5d0 \ub9de\uac8c \uc124\uce58\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.","title":"1. \ud544\uc218 \uc124\uce58"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#2","text":"\ub370\uc774\ud130\uc14b \uc218\uc9d1 right , left , ahead \ud45c\uc9c0\ud310 \uc774\ubbf8\uc9c0\ub97c \uc218\uc9d1\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\ub294 \ub2e4\uc591\ud55c \uac01\ub3c4\uc640 \uc870\uba85 \uc870\uac74\uc744 \ud3ec\ud568\ud558\uc5ec \ucda9\ubd84\ud788 \uc900\ube44\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ud06c\uae30\ub294 YOLO \ubaa8\ub378\uc5d0 \uc801\ud569\ud558\ub3c4\ub85d \uc815\uaddc\ud654\ub418\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \ub77c\ubca8\ub9c1 \ub77c\ubca8\ub9c1 \ub3c4\uad6c\uc778 LabelImg \ub610\ub294 **Roboflow**\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \ub77c\ubca8\ub9c1\ud569\ub2c8\ub2e4. \uac01 \uc774\ubbf8\uc9c0\uc5d0 \ub300\ud574 \uac1d\uccb4\uc758 \uacbd\uacc4 \uc0c1\uc790\ub97c \uc124\uc815\ud558\uace0, right , left , ahead \ub85c \ud074\ub798\uc2a4 \uc774\ub984\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4. YOLO \ud615\uc2dd\uc758 \ub77c\ubca8 \ud30c\uc77c \uc0dd\uc131 (\uc774\ubbf8\uc9c0\uc640 \uac19\uc740 \uc774\ub984, .txt \ud655\uc7a5\uc790): class_id x_center y_center width height \uc608: 0 0.5 0.5 0.2 0.3 class_id \ub294 \ud074\ub798\uc2a4 \ubc88\ud638 (0 = right, 1 = left, 2 = ahead). x_center , y_center , width , height \ub294 \uc774\ubbf8\uc9c0 \ud06c\uae30 \ub300\ube44 \uc0c1\ub300 \uc88c\ud45c (0~1 \ubc94\uc704). \ub514\ub809\ud1a0\ub9ac \uad6c\uc870 \uc124\uc815 YOLO\ub294 \ub2e4\uc74c \uad6c\uc870\ub97c \uae30\ub300\ud569\ub2c8\ub2e4: dataset/ images/ train/ val/ labels/ train/ val/ images/train \uc5d0\ub294 \ud559\uc2b5 \uc774\ubbf8\uc9c0\uac00, images/val \uc5d0\ub294 \uac80\uc99d \uc774\ubbf8\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. labels/train \ubc0f labels/val \uc5d0\ub294 \uac01\uac01\uc758 \ub77c\ubca8 \ud30c\uc77c\uc774 \uc788\uc2b5\ub2c8\ub2e4.","title":"2. \ub370\uc774\ud130 \uc900\ube44"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#3","text":"data.yaml \uc0dd\uc131 \ud504\ub85c\uc81d\ud2b8 \ud3f4\ub354\uc5d0 data.yaml \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608: path : ./dataset # \ub370\uc774\ud130\uc14b \uacbd\ub85c train : images/train # \ud559\uc2b5 \uc774\ubbf8\uc9c0 \uacbd\ub85c val : images/val # \uac80\uc99d \uc774\ubbf8\uc9c0 \uacbd\ub85c nc : 3 # \ud074\ub798\uc2a4 \uc218 names : [ 'right' , 'left' , 'ahead' ] # \ud074\ub798\uc2a4 \uc774\ub984","title":"3. \ub370\uc774\ud130 \uad6c\uc131 \ud30c\uc77c \uc791\uc131"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#4-yolo","text":"\uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378 \ub2e4\uc6b4\ub85c\ub4dc \uc0ac\uc804 \ud559\uc2b5\ub41c YOLOv5 \ubaa8\ub378( yolov5s.pt )\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. YOLOv5s\ub294 \uc18c\ud615 \ubaa8\ub378\ub85c Jetson Nano\uc5d0\uc11c\ub3c4 \uc801\ud569\ud569\ub2c8\ub2e4. \ud559\uc2b5 \uc2dc\uc791 YOLO \ud559\uc2b5\uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4. python3 train.py --img 640 --batch 16 --epochs 50 --data data.yaml --weights yolov5s.pt --device 0 --img : \uc785\ub825 \uc774\ubbf8\uc9c0 \ud06c\uae30 (\uae30\ubcf8 640). --batch : \ubc30\uce58 \ud06c\uae30 (Jetson Orin Nano\uc758 \uba54\ubaa8\ub9ac \uc0c1\ud669\uc5d0 \ub9de\uac8c \uc870\uc815). --epochs : \ud559\uc2b5 \ubc18\ubcf5 \ud69f\uc218. --data : data.yaml \ud30c\uc77c \uacbd\ub85c. --weights : \uc0ac\uc804 \ud559\uc2b5\ub41c \uac00\uc911\uce58. --device : GPU \uc0ac\uc6a9 (0). \ud559\uc2b5 \ubaa8\ub2c8\ud130\ub9c1 \ud559\uc2b5 \uc9c4\ud589 \uc0c1\ud669\uc740 runs/train/exp/ \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \ud559\uc2b5 \ub85c\uadf8: results.png \ubc0f \ud14d\uc2a4\ud2b8 \ub85c\uadf8 \ud30c\uc77c. \ucd5c\uc885 \ubaa8\ub378 \uac00\uc911\uce58: runs/train/exp/weights/best.pt .","title":"4. YOLO \ubaa8\ub378 \ud559\uc2b5"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#5","text":"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc900\ube44 \ud14c\uc2a4\ud2b8\ud560 \uc774\ubbf8\uc9c0\ub098 \ub3d9\uc601\uc0c1\uc744 \uc900\ube44\ud569\ub2c8\ub2e4. \ubaa8\ub378 \ucd94\ub860 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd94\ub860\ud569\ub2c8\ub2e4. python3 detect.py --weights runs/train/exp/weights/best.pt --img 640 --source data/images/test.jpg --source : \ud14c\uc2a4\ud2b8 \uc774\ubbf8\uc9c0 \ub610\ub294 \ub3d9\uc601\uc0c1 \uacbd\ub85c. \uacb0\uacfc\ub294 runs/detect/exp/ \uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4.","title":"5. \ud559\uc2b5\ub41c \ubaa8\ub378 \ud14c\uc2a4\ud2b8"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#6-jetson-orin-nano","text":"TensorRT \ubcc0\ud658 \ud559\uc2b5\ub41c \ubaa8\ub378( best.pt )\uc744 ONNX\ub85c \ubcc0\ud658\ud55c \ud6c4 TensorRT\ub85c \ucd5c\uc801\ud654\ud569\ub2c8\ub2e4. python3 export.py --weights runs/train/exp/weights/best.pt --img 640 --batch 1 trtexec --onnx = best.onnx --saveEngine = best.trt --fp16 \ucd5c\uc801\ud654\ub41c \ubaa8\ub378 \uc2e4\ud589 TensorRT\ub85c \ubcc0\ud658\ub41c \ubaa8\ub378( best.trt )\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc740 Jetson\uc758 GPU \uac00\uc18d\uc744 \uadf9\ub300\ud654\ud569\ub2c8\ub2e4.","title":"6. Jetson Orin Nano\uc5d0\uc11c \ucd5c\uc801\ud654"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#7","text":"\ud559\uc2b5 \uc131\ub2a5 \ubc0f \uac80\uc99d \uc131\ub2a5\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4. - results.png \ubd84\uc11d : \ud559\uc2b5 \ubc0f \uac80\uc99d \uc815\ud655\ub3c4, \uc190\uc2e4 \uadf8\ub798\ud504. - \ud63c\ub3d9 \ud589\ub82c : \ud074\ub798\uc2a4\ubcc4 \uc815\ud655\ub3c4 \ud655\uc778. - \uc2e4\uc2dc\uac04 \ud14c\uc2a4\ud2b8 : \ubaa8\ub378\uc758 \uc2e4\uc81c \uc131\ub2a5 \ud655\uc778.","title":"7. \uacb0\uacfc \ubd84\uc11d"},{"location":"YOLO/%EC%82%AC%EC%9A%A9%EC%9E%90%ED%95%99%EC%8A%B5/#8-jetson-orin-nano","text":"Jetson Orin Nano\uc5d0\uc11c \uc2e4\uc2dc\uac04 \uac1d\uccb4 \uac10\uc9c0\ub97c \uc218\ud589\ud558\ub824\uba74 OpenCV\uc640 YOLO \ubaa8\ub378\uc744 \uacb0\ud569\ud558\uc5ec \uce74\uba54\ub77c \uc2a4\ud2b8\ub9bc\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4. import cv2 from yolov5 import YOLO model = YOLO ( 'runs/train/exp/weights/best.pt' ) cap = cv2 . VideoCapture ( 0 ) while True : ret , frame = cap . read () if not ret : break results = model ( frame ) frame = results . render () cv2 . imshow ( 'YOLO Detection' , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () \ud544\uc694\ud55c \ucd94\uac00 \uc0ac\ud56d\uc774\ub098 \uad6c\ud604 \uc911 \ubb38\uc81c\uac00 \uc788\ub2e4\uba74 \uc5b8\uc81c\ub4e0\uc9c0 \ubb38\uc758\ud558\uc138\uc694!","title":"8. \uc2e4\uc2dc\uac04 \uac10\uc9c0 (Jetson Orin Nano)"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/","text":"USB\ub97c \uc774\uc6a9\ud55c IP \uc124\uc815 Jetson Nano \ubcf4\ub4dc\uc5d0 USB\ub97c \uc5f0\uacb0\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\ub97c \uc124\uc815\ud558\ub294 \ubc29\ubc95\uc740 USB \uc774\ub354\ub137 \uc5f0\uacb0\uc744 \ud1b5\ud574 Jetson Nano\uc640 \ud638\uc2a4\ud2b8 PC \uac04\uc758 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \uc124\uc815\uc744 \ud1b5\ud574 Jetson Nano\uc640 \uc9c1\uc811\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc8fc\uace0\ubc1b\uac70\ub098 Jetson Nano\uc758 \uc778\ud130\ub137 \uc5f0\uacb0\uc744 \uacf5\uc720\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc.1 USB \ud3ec\ud2b8 \ub514\ud3f4\ud2b8 IP \uc124\uc815\ub0b4\uc6a9 \ud56d\ubaa9 \ub0b4\uc6a9 login ID jetson default passwd 1111 ip address 192.168.55.1 1. USB \uc774\ub354\ub137 \uc5f0\uacb0 \uac1c\uc694 Jetson Nano\ub97c \ud638\uc2a4\ud2b8 PC\uc640 USB \ucf00\uc774\ube14\ub85c \uc5f0\uacb0\ud558\uba74 Jetson Nano\ub294 USB \uae30\ubc18\uc758 \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574: \ud638\uc2a4\ud2b8 PC\uc640 Jetson Nano \uac04\uc758 \ud30c\uc77c \uc804\uc1a1 Jetson Nano\uc758 \uc778\ud130\ub137 \uc5f0\uacb0 \uc124\uc815 (\ud638\uc2a4\ud2b8 PC\uc758 \uc778\ud130\ub137 \uacf5\uc720) SSH\ub97c \ud1b5\ud574 Jetson Nano\uc5d0 \uc6d0\uaca9 \uc811\uc18d 2. \ud544\uc218 \uc900\ube44\ubb3c Jetson Nano \uac1c\ubc1c \ubcf4\ub4dc USB Micro-B \ucf00\uc774\ube14 (Jetson Nano\uc640 \ud638\uc2a4\ud2b8 PC \uc5f0\uacb0\uc6a9) \ud638\uc2a4\ud2b8 PC (Ubuntu \ub610\ub294 Windows) 3. \uc124\uc815 \ub2e8\uacc4 1\ub2e8\uacc4: Jetson Nano\uc640 PC \uc5f0\uacb0 Jetson Nano\ub97c \ubd80\ud305\ud569\ub2c8\ub2e4. USB Micro-B \ucf00\uc774\ube14\ub85c Jetson Nano\uc758 **Micro-USB \ud3ec\ud2b8**\uc640 \ud638\uc2a4\ud2b8 PC\ub97c \uc5f0\uacb0\ud569\ub2c8\ub2e4. 2\ub2e8\uacc4: \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4 \ud655\uc778 \ud638\uc2a4\ud2b8 PC\uc5d0\uc11c Jetson Nano\uac00 \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc5f0\uacb0\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. Linux (Ubuntu) : ip a USB \uc5f0\uacb0 \uc2dc usb0 \ub610\ub294 \uc720\uc0ac\ud55c \uc774\ub984\uc758 \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. Windows : \uc81c\uc5b4\ud310 > \ub124\ud2b8\uc6cc\ud06c \ubc0f \uc778\ud130\ub137 > \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc5d0\uc11c \uc0c8 \"\ub124\ud2b8\uc6cc\ud06c \uc5b4\ub311\ud130\"\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. 4. SSH\ub85c Jetson Nano\uc5d0 \uc811\uc18d USB \ub124\ud2b8\uc6cc\ud06c\uac00 \uc124\uc815\ub418\uba74 SSH\ub97c \ud1b5\ud574 Jetson Nano\uc5d0 \uc6d0\uaca9 \uc811\uc18d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub514\ud3f4\ud2b8 IP \uc124\uc815\ub0b4\uc6a9 \ud56d\ubaa9 \ub0b4\uc6a9 login ID jetson default passwd 1111 ip address 192.168.55.1 SSH \ud074\ub77c\uc774\uc5b8\ud2b8 \uc124\uce58 : Linux: \uae30\ubcf8\uc801\uc73c\ub85c ssh \uba85\ub839 \uc0ac\uc6a9 \uac00\ub2a5. Windows: PuTTY \ub610\ub294 Windows Terminal \uc0ac\uc6a9. SSH \uc811\uc18d \uba85\ub839 : ssh <username>@192.168.55.1 \uae30\ubcf8 \uc0ac\uc6a9\uc790 \uc774\ub984\uc740 jetson \uc774\uba70, \ube44\ubc00\ubc88\ud638\ub294 1111 \uc785\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc744 \uc644\ub8cc\ud558\uba74 USB\ub97c \ud1b5\ud574 Jetson Nano\uc640 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc124\uc815\ud558\uace0 SSH \ub610\ub294 \uc778\ud130\ub137 \uacf5\uc720\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1.1 USB \uc5f0\uacb0"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#usb-ip","text":"Jetson Nano \ubcf4\ub4dc\uc5d0 USB\ub97c \uc5f0\uacb0\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\ub97c \uc124\uc815\ud558\ub294 \ubc29\ubc95\uc740 USB \uc774\ub354\ub137 \uc5f0\uacb0\uc744 \ud1b5\ud574 Jetson Nano\uc640 \ud638\uc2a4\ud2b8 PC \uac04\uc758 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \uc124\uc815\uc744 \ud1b5\ud574 Jetson Nano\uc640 \uc9c1\uc811\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc8fc\uace0\ubc1b\uac70\ub098 Jetson Nano\uc758 \uc778\ud130\ub137 \uc5f0\uacb0\uc744 \uacf5\uc720\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc.1 USB \ud3ec\ud2b8","title":"USB\ub97c \uc774\uc6a9\ud55c IP \uc124\uc815"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#ip","text":"\ud56d\ubaa9 \ub0b4\uc6a9 login ID jetson default passwd 1111 ip address 192.168.55.1","title":"\ub514\ud3f4\ud2b8 IP \uc124\uc815\ub0b4\uc6a9"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#1-usb","text":"Jetson Nano\ub97c \ud638\uc2a4\ud2b8 PC\uc640 USB \ucf00\uc774\ube14\ub85c \uc5f0\uacb0\ud558\uba74 Jetson Nano\ub294 USB \uae30\ubc18\uc758 \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574: \ud638\uc2a4\ud2b8 PC\uc640 Jetson Nano \uac04\uc758 \ud30c\uc77c \uc804\uc1a1 Jetson Nano\uc758 \uc778\ud130\ub137 \uc5f0\uacb0 \uc124\uc815 (\ud638\uc2a4\ud2b8 PC\uc758 \uc778\ud130\ub137 \uacf5\uc720) SSH\ub97c \ud1b5\ud574 Jetson Nano\uc5d0 \uc6d0\uaca9 \uc811\uc18d","title":"1. USB \uc774\ub354\ub137 \uc5f0\uacb0 \uac1c\uc694"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#2","text":"Jetson Nano \uac1c\ubc1c \ubcf4\ub4dc USB Micro-B \ucf00\uc774\ube14 (Jetson Nano\uc640 \ud638\uc2a4\ud2b8 PC \uc5f0\uacb0\uc6a9) \ud638\uc2a4\ud2b8 PC (Ubuntu \ub610\ub294 Windows)","title":"2. \ud544\uc218 \uc900\ube44\ubb3c"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#3","text":"","title":"3. \uc124\uc815 \ub2e8\uacc4"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#1-jetson-nano-pc","text":"Jetson Nano\ub97c \ubd80\ud305\ud569\ub2c8\ub2e4. USB Micro-B \ucf00\uc774\ube14\ub85c Jetson Nano\uc758 **Micro-USB \ud3ec\ud2b8**\uc640 \ud638\uc2a4\ud2b8 PC\ub97c \uc5f0\uacb0\ud569\ub2c8\ub2e4.","title":"1\ub2e8\uacc4: Jetson Nano\uc640 PC \uc5f0\uacb0"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#2_1","text":"\ud638\uc2a4\ud2b8 PC\uc5d0\uc11c Jetson Nano\uac00 \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc5f0\uacb0\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. Linux (Ubuntu) : ip a USB \uc5f0\uacb0 \uc2dc usb0 \ub610\ub294 \uc720\uc0ac\ud55c \uc774\ub984\uc758 \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. Windows : \uc81c\uc5b4\ud310 > \ub124\ud2b8\uc6cc\ud06c \ubc0f \uc778\ud130\ub137 > \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc5d0\uc11c \uc0c8 \"\ub124\ud2b8\uc6cc\ud06c \uc5b4\ub311\ud130\"\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","title":"2\ub2e8\uacc4: \ub124\ud2b8\uc6cc\ud06c \uc778\ud130\ud398\uc774\uc2a4 \ud655\uc778"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/ip_usb/#4-ssh-jetson-nano","text":"USB \ub124\ud2b8\uc6cc\ud06c\uac00 \uc124\uc815\ub418\uba74 SSH\ub97c \ud1b5\ud574 Jetson Nano\uc5d0 \uc6d0\uaca9 \uc811\uc18d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub514\ud3f4\ud2b8 IP \uc124\uc815\ub0b4\uc6a9 \ud56d\ubaa9 \ub0b4\uc6a9 login ID jetson default passwd 1111 ip address 192.168.55.1 SSH \ud074\ub77c\uc774\uc5b8\ud2b8 \uc124\uce58 : Linux: \uae30\ubcf8\uc801\uc73c\ub85c ssh \uba85\ub839 \uc0ac\uc6a9 \uac00\ub2a5. Windows: PuTTY \ub610\ub294 Windows Terminal \uc0ac\uc6a9. SSH \uc811\uc18d \uba85\ub839 : ssh <username>@192.168.55.1 \uae30\ubcf8 \uc0ac\uc6a9\uc790 \uc774\ub984\uc740 jetson \uc774\uba70, \ube44\ubc00\ubc88\ud638\ub294 1111 \uc785\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc744 \uc644\ub8cc\ud558\uba74 USB\ub97c \ud1b5\ud574 Jetson Nano\uc640 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc124\uc815\ud558\uace0 SSH \ub610\ub294 \uc778\ud130\ub137 \uacf5\uc720\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4. SSH\ub85c Jetson Nano\uc5d0 \uc811\uc18d"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/","text":"\ubb34\uc120 AP \uc5f0\uacb0 Jetson Nano\uc5d0\uc11c nmcli \ub97c \uc774\uc6a9\ud558\uc5ec Wi-Fi AP(Access Point)\uc5d0 \uc811\uc18d\ud558\ub294 \ubc29\ubc95\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc124\uba85\ud569\ub2c8\ub2e4. nmcli \ub294 \ub124\ud2b8\uc6cc\ud06c \uad00\ub9ac \uba85\ub839\uc904 \ub3c4\uad6c\ub85c, NetworkManager\ub97c \ud1b5\ud574 \ub124\ud2b8\uc6cc\ud06c \uc124\uc815\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. 1. Wi-Fi AP\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc900\ube44 \ud544\uc218 \ud655\uc778 : Jetson Nano\uc5d0 Wi-Fi \ub3d9\uae00\uc774 \uc7a5\ucc29\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. nmcli \uac00 \uc124\uce58\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4 (\uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc74c). Wi-Fi AP \uc815\ubcf4 \ud655\uc778 : \uc5f0\uacb0\ud558\ub824\ub294 AP\uc758 SSID (Wi-Fi \uc774\ub984)\uc640 **\ube44\ubc00\ubc88\ud638**\ub97c \uc900\ube44\ud569\ub2c8\ub2e4. 2. Wi-Fi \ub124\ud2b8\uc6cc\ud06c \uac80\uc0c9 Wi-Fi \ub514\ubc14\uc774\uc2a4 \ud65c\uc131\ud654 : nmcli radio wifi on \uc8fc\ubcc0 Wi-Fi \ub124\ud2b8\uc6cc\ud06c \uac80\uc0c9 : nmcli device wifi list \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \ube44\uc2b7\ud558\uac8c \ub098\ud0c0\ub0a9\ub2c8\ub2e4: SSID MODE CHAN RATE SIGNAL BARS SECURITY MyWiFiNetwork Infra 11 54 Mbit/s 70 \u2582\u2584\u2586_ WPA2 OtherNetwork Infra 6 54 Mbit/s 60 \u2582\u2584\u2586_ WPA2 ai123 Infra 6 54 Mbit/s 60 \u2582\u2584\u2586_ WPA2 \uc5ec\uae30\uc11c \uc811\uc18d\ud558\ub824\ub294 **SSID**\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. 3. Wi-Fi AP\uc5d0 \uc811\uc18d Wi-Fi \ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc5f0\uacb0\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4: nmcli device wifi connect \"<SSID>\" password \"<\ube44\ubc00\ubc88\ud638>\" \uc608: nmcli device wifi connect \"ai123\" password \"1111\" \uc608(\ube44\ubc00\ubc88\ud638\uac00\uc5c6\ub294\uacbd\uc6b0): nmcli device wifi connect \"ai123\" password \"\" 4. \uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778 Wi-Fi \uc5f0\uacb0 \uc0c1\ud0dc\ub97c \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: nmcli connection show \ucd9c\ub825 \uc608: NAME UUID TYPE DEVICE ai123 12345678-abcd-1234-abcd-1234567890ab wifi wlan0 5. \uc790\ub3d9 \uc5f0\uacb0 \uc124\uc815 Wi-Fi \ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc5f0\uacb0\ub418\ub3c4\ub85d \uc124\uc815\ud558\ub824\uba74 \ub2e4\uc74c\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: nmcli connection modify \"<SSID>\" connection.autoconnect yes 6. \ub124\ud2b8\uc6cc\ud06c \uc0c1\ud0dc \ud655\uc778 \ud604\uc7ac \ub124\ud2b8\uc6cc\ud06c \uc0c1\ud0dc\uc640 IP \uc8fc\uc18c\ub97c \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: nmcli device show wlan0 \ucd9c\ub825 \uc608: GENERAL.DEVICE: wlan0 GENERAL.TYPE: wifi GENERAL.STATE: 100 (connected) IP4.ADDRESS[1]: 192.168.1.100/24 IP4.GATEWAY: 192.168.1.1 7. \ubb38\uc81c \ud574\uacb0 7.1 \uc5f0\uacb0 \uc2e4\ud328 \uc2dc \ub85c\uadf8 \ud655\uc778 journalctl -u NetworkManager 7.2 Wi-Fi \uc7ac\uc124\uc815 Wi-Fi \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc7ac\uc124\uc815\ud569\ub2c8\ub2e4: nmcli device disconnect wlan0 nmcli device connect wlan0 8. \uc804\uccb4 \uba85\ub839 \uc694\uc57d Wi-Fi \uc2a4\uce94: nmcli device wifi list Wi-Fi \uc5f0\uacb0: nmcli device wifi connect \"<SSID>\" password \"<\ube44\ubc00\ubc88\ud638>\" \uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778: nmcli connection show \uc790\ub3d9 \uc5f0\uacb0 \uc124\uc815: nmcli connection modify \"<SSID>\" connection.autoconnect yes \ub124\ud2b8\uc6cc\ud06c \uc0c1\ud0dc \ud655\uc778: nmcli device show wlan0 \uc704 \uacfc\uc815\uc744 \ub530\ub77c \ud558\uba74 nmcli \ub97c \uc0ac\uc6a9\ud558\uc5ec Jetson Nano\ub97c Wi-Fi AP\uc5d0 \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Wi-Fi\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uba74 \uc778\ud130\ub137 \ubc0f \ub85c\uceec \ub124\ud2b8\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1.2 nmcli"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#ap","text":"Jetson Nano\uc5d0\uc11c nmcli \ub97c \uc774\uc6a9\ud558\uc5ec Wi-Fi AP(Access Point)\uc5d0 \uc811\uc18d\ud558\ub294 \ubc29\ubc95\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc124\uba85\ud569\ub2c8\ub2e4. nmcli \ub294 \ub124\ud2b8\uc6cc\ud06c \uad00\ub9ac \uba85\ub839\uc904 \ub3c4\uad6c\ub85c, NetworkManager\ub97c \ud1b5\ud574 \ub124\ud2b8\uc6cc\ud06c \uc124\uc815\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","title":"\ubb34\uc120 AP \uc5f0\uacb0"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#1-wi-fi-ap","text":"\ud544\uc218 \ud655\uc778 : Jetson Nano\uc5d0 Wi-Fi \ub3d9\uae00\uc774 \uc7a5\ucc29\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. nmcli \uac00 \uc124\uce58\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4 (\uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc74c). Wi-Fi AP \uc815\ubcf4 \ud655\uc778 : \uc5f0\uacb0\ud558\ub824\ub294 AP\uc758 SSID (Wi-Fi \uc774\ub984)\uc640 **\ube44\ubc00\ubc88\ud638**\ub97c \uc900\ube44\ud569\ub2c8\ub2e4.","title":"1. Wi-Fi AP\uc5d0 \uc811\uc18d\ud558\uae30 \uc704\ud55c \uc900\ube44"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#2-wi-fi","text":"Wi-Fi \ub514\ubc14\uc774\uc2a4 \ud65c\uc131\ud654 : nmcli radio wifi on \uc8fc\ubcc0 Wi-Fi \ub124\ud2b8\uc6cc\ud06c \uac80\uc0c9 : nmcli device wifi list \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \ube44\uc2b7\ud558\uac8c \ub098\ud0c0\ub0a9\ub2c8\ub2e4: SSID MODE CHAN RATE SIGNAL BARS SECURITY MyWiFiNetwork Infra 11 54 Mbit/s 70 \u2582\u2584\u2586_ WPA2 OtherNetwork Infra 6 54 Mbit/s 60 \u2582\u2584\u2586_ WPA2 ai123 Infra 6 54 Mbit/s 60 \u2582\u2584\u2586_ WPA2 \uc5ec\uae30\uc11c \uc811\uc18d\ud558\ub824\ub294 **SSID**\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","title":"2. Wi-Fi \ub124\ud2b8\uc6cc\ud06c \uac80\uc0c9"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#3-wi-fi-ap","text":"Wi-Fi \ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc5f0\uacb0\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4: nmcli device wifi connect \"<SSID>\" password \"<\ube44\ubc00\ubc88\ud638>\" \uc608: nmcli device wifi connect \"ai123\" password \"1111\" \uc608(\ube44\ubc00\ubc88\ud638\uac00\uc5c6\ub294\uacbd\uc6b0): nmcli device wifi connect \"ai123\" password \"\"","title":"3. Wi-Fi AP\uc5d0 \uc811\uc18d"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#4","text":"Wi-Fi \uc5f0\uacb0 \uc0c1\ud0dc\ub97c \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: nmcli connection show \ucd9c\ub825 \uc608: NAME UUID TYPE DEVICE ai123 12345678-abcd-1234-abcd-1234567890ab wifi wlan0","title":"4. \uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#5","text":"Wi-Fi \ub124\ud2b8\uc6cc\ud06c\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc5f0\uacb0\ub418\ub3c4\ub85d \uc124\uc815\ud558\ub824\uba74 \ub2e4\uc74c\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: nmcli connection modify \"<SSID>\" connection.autoconnect yes","title":"5. \uc790\ub3d9 \uc5f0\uacb0 \uc124\uc815"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#6","text":"\ud604\uc7ac \ub124\ud2b8\uc6cc\ud06c \uc0c1\ud0dc\uc640 IP \uc8fc\uc18c\ub97c \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: nmcli device show wlan0 \ucd9c\ub825 \uc608: GENERAL.DEVICE: wlan0 GENERAL.TYPE: wifi GENERAL.STATE: 100 (connected) IP4.ADDRESS[1]: 192.168.1.100/24 IP4.GATEWAY: 192.168.1.1","title":"6. \ub124\ud2b8\uc6cc\ud06c \uc0c1\ud0dc \ud655\uc778"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#7","text":"","title":"7. \ubb38\uc81c \ud574\uacb0"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#71","text":"journalctl -u NetworkManager","title":"7.1 \uc5f0\uacb0 \uc2e4\ud328 \uc2dc \ub85c\uadf8 \ud655\uc778"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#72-wi-fi","text":"Wi-Fi \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc7ac\uc124\uc815\ud569\ub2c8\ub2e4: nmcli device disconnect wlan0 nmcli device connect wlan0","title":"7.2 Wi-Fi \uc7ac\uc124\uc815"},{"location":"%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/nmcli/#8","text":"Wi-Fi \uc2a4\uce94: nmcli device wifi list Wi-Fi \uc5f0\uacb0: nmcli device wifi connect \"<SSID>\" password \"<\ube44\ubc00\ubc88\ud638>\" \uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778: nmcli connection show \uc790\ub3d9 \uc5f0\uacb0 \uc124\uc815: nmcli connection modify \"<SSID>\" connection.autoconnect yes \ub124\ud2b8\uc6cc\ud06c \uc0c1\ud0dc \ud655\uc778: nmcli device show wlan0 \uc704 \uacfc\uc815\uc744 \ub530\ub77c \ud558\uba74 nmcli \ub97c \uc0ac\uc6a9\ud558\uc5ec Jetson Nano\ub97c Wi-Fi AP\uc5d0 \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Wi-Fi\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc5f0\uacb0\ub418\uba74 \uc778\ud130\ub137 \ubc0f \ub85c\uceec \ub124\ud2b8\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"8. \uc804\uccb4 \uba85\ub839 \uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/","text":"\ud30c\uc774\uc36c \ubcc0\uc218 \uac1c\ub150 \ubc0f \uc0ac\uc6a9\ubc95 **\ubcc0\uc218**\ub294 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \uba54\ubaa8\ub9ac \uacf5\uac04\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \ubcc0\uc218\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \ud574\ub2f9 \uac12\uc744 \uc800\uc7a5\ud558\uace0, \ub370\uc774\ud130\uc758 \ud0c0\uc785\uc744 \ucd94\ub860\ud558\uc5ec \uad00\ub9ac\ud569\ub2c8\ub2e4. \ubcc0\uc218\uc758 \ud2b9\uc9d5 \ub3d9\uc801 \ud0c0\uc774\ud551(Dynamic Typing) \ubcc0\uc218\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. x = 10 # \uc815\uc218\ud615(int) y = 3.14 # \uc2e4\uc218\ud615(float) name = \"Alice\" # \ubb38\uc790\uc5f4(str) \ud0c0\uc785 \ubcc0\uacbd \uac00\ub2a5 \ubcc0\uc218\uc5d0 \ub2e4\ub978 \ud0c0\uc785\uc758 \uac12\uc744 \uc790\uc720\ub86d\uac8c \uc7ac\ud560\ub2f9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. x = 10 # \uc815\uc218\ud615 x = \"Hello\" # \ubb38\uc790\uc5f4 \uac15\ub825\ud55c \ud0c0\uc785(Type Checking) \ud0c0\uc785 \uac04\uc758 \ubd88\uc77c\uce58\ub294 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4. x = 10 y = \"20\" print ( x + y ) # TypeError: \uc815\uc218\uc640 \ubb38\uc790\uc5f4\uc740 \ub354\ud560 \uc218 \uc5c6\uc74c \ud30c\uc774\uc36c \ubcc0\uc218\ub294 \ucc38\uc870\uac12\uc744 \uc800\uc7a5 \ubcc0\uc218\ub294 \ub370\uc774\ud130 \uac12\uc744 \uc9c1\uc811 \uc800\uc7a5\ud558\uc9c0 \uc54a\uace0, \uba54\ubaa8\ub9ac\uc758 \uc8fc\uc18c\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4. \ubcc0\uc218 \uc774\ub984 \uaddc\uce59 \ubb38\uc790, \uc22b\uc790, \ubc11\uc904(_)\ub9cc \uc0ac\uc6a9 \uac00\ub2a5 \ubcc0\uc218 \uc774\ub984\uc740 \ubc18\ub4dc\uc2dc \ubb38\uc790 \ub610\ub294 \ubc11\uc904\ub85c \uc2dc\uc791\ud574\uc57c \ud568. valid_variable = 10 _another_variable = 20 \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 variable \uacfc Variable \uc740 \uc11c\ub85c \ub2e4\ub978 \ubcc0\uc218. name = \"Alice\" Name = \"Bob\" print ( name ) # Alice print ( Name ) # Bob \uc608\uc57d\uc5b4 \uc0ac\uc6a9 \uae08\uc9c0 \ud30c\uc774\uc36c\uc758 \uc608\uc57d\uc5b4\ub294 \ubcc0\uc218 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc74c. (\uc608: if , else , while , for , True , False , None \ub4f1) if = 10 # SyntaxError \uc758\ubbf8 \uc788\ub294 \uc774\ub984 \uc0ac\uc6a9 \uad8c\uc7a5 \ubcc0\uc218 \uc774\ub984\uc740 \ubcc0\uc218\uc758 \ubaa9\uc801\uc744 \ub098\ud0c0\ub0b4\ub294 \uc758\ubbf8 \uc788\ub294 \uc774\ub984\uc73c\ub85c \uc791\uc131. total_price = 1000 \ubcc0\uc218\uc758 \ud560\ub2f9 \ubc0f \ub3d9\uc791 \uac12 \ud560\ub2f9 = \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac12\uc744 \ubcc0\uc218\uc5d0 \ud560\ub2f9. age = 25 pi = 3.14 \uc5ec\ub7ec \ubcc0\uc218\uc5d0 \ub3d9\uc2dc\uc5d0 \ud560\ub2f9 \ub3d9\uc77c\ud55c \uac12\uc744 \uc5ec\ub7ec \ubcc0\uc218\uc5d0 \ub3d9\uc2dc\uc5d0 \ud560\ub2f9. a = b = c = 10 print ( a , b , c ) # 10 10 10 \uc5ec\ub7ec \uac12 \ub3d9\uc2dc \ud560\ub2f9 (\uc5b8\ud328\ud0b9) \uc5ec\ub7ec \ubcc0\uc218\ub97c \ud55c \ubc88\uc5d0 \ucd08\uae30\ud654. x , y , z = 1 , 2 , 3 print ( x , y , z ) # 1 2 3 \ubcc0\uc218\uc758 \uc2a4\ucf54\ud504(Scope) \uc9c0\uc5ed \ubcc0\uc218(Local Variable) \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc815\uc758\ub41c \ubcc0\uc218\ub294 \ud574\ub2f9 \ud568\uc218 \ub0b4\uc5d0\uc11c\ub9cc \uc0ac\uc6a9 \uac00\ub2a5. def my_function (): x = 10 print ( x ) # 10 my_function () # print(x) # NameError: x is not defined \uc804\uc5ed \ubcc0\uc218(Global Variable) \ud568\uc218 \ubc16\uc5d0\uc11c \uc815\uc758\ub41c \ubcc0\uc218\ub294 \ubaa8\ub4e0 \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5. x = 10 def my_function (): print ( x ) # 10 my_function () print ( x ) # 10 global \ud0a4\uc6cc\ub4dc \ud568\uc218 \ub0b4\uc5d0\uc11c \uc804\uc5ed \ubcc0\uc218 \uac12\uc744 \uc218\uc815\ud558\ub824\uba74 global \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9. x = 10 def my_function (): global x x = 20 my_function () print ( x ) # 20 nonlocal \ud0a4\uc6cc\ub4dc \uc911\ucca9 \ud568\uc218\uc5d0\uc11c \uc0c1\uc704 \ud568\uc218\uc758 \ubcc0\uc218\ub97c \uc218\uc815\ud558\ub824\uba74 \uc0ac\uc6a9. def outer_function (): x = 10 def inner_function (): nonlocal x x = 20 inner_function () print ( x ) # 20 outer_function () \ubcc0\uc218\uc758 \ud0c0\uc785 \ud655\uc778 \ubc0f \ubcc0\ud658 \ud0c0\uc785 \ud655\uc778 type() \ud568\uc218\ub85c \ubcc0\uc218\uc758 \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778. x = 10 print ( type ( x )) # <class 'int'> \ud0c0\uc785 \ubcc0\ud658 int() , float() , str() \ub4f1\uc744 \uc0ac\uc6a9\ud574 \ud0c0\uc785 \ubcc0\ud658 \uac00\ub2a5. x = \"100\" y = int ( x ) # \ubb38\uc790\uc5f4\uc744 \uc815\uc218\ub85c \ubcc0\ud658 print ( y + 10 ) # 110 \ubcc0\uc218\uc758 \ud65c\uc6a9 \uc608 # \uc0ac\uc6a9\uc790 \uc785\ub825\uc744 \ubc1b\uc544 \ub450 \uc22b\uc790\ub97c \ub354\ud558\uae30 num1 = int ( input ( \"\uccab \ubc88\uc9f8 \uc22b\uc790 \uc785\ub825: \" )) num2 = int ( input ( \"\ub450 \ubc88\uc9f8 \uc22b\uc790 \uc785\ub825: \" )) result = num1 + num2 print ( \"\ub450 \uc22b\uc790\uc758 \ud569:\" , result ) \ubcc0\uc218\ub294 \ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub7a8\uc758 \ub370\uc774\ud130\ub97c \uad00\ub9ac\ud558\ub294 \uae30\ubcf8\uc801\uc778 \ub3c4\uad6c\uc774\uba70, \uc801\uc808\ud788 \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131\uc774 \ud06c\uac8c \ud5a5\uc0c1\ub429\ub2c8\ub2e4.","title":"2.2 \ubcc0\uc218"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/#_1","text":"**\ubcc0\uc218**\ub294 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \uba54\ubaa8\ub9ac \uacf5\uac04\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \ubcc0\uc218\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \ud574\ub2f9 \uac12\uc744 \uc800\uc7a5\ud558\uace0, \ub370\uc774\ud130\uc758 \ud0c0\uc785\uc744 \ucd94\ub860\ud558\uc5ec \uad00\ub9ac\ud569\ub2c8\ub2e4.","title":"\ud30c\uc774\uc36c \ubcc0\uc218 \uac1c\ub150 \ubc0f \uc0ac\uc6a9\ubc95"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/#_2","text":"\ub3d9\uc801 \ud0c0\uc774\ud551(Dynamic Typing) \ubcc0\uc218\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. x = 10 # \uc815\uc218\ud615(int) y = 3.14 # \uc2e4\uc218\ud615(float) name = \"Alice\" # \ubb38\uc790\uc5f4(str) \ud0c0\uc785 \ubcc0\uacbd \uac00\ub2a5 \ubcc0\uc218\uc5d0 \ub2e4\ub978 \ud0c0\uc785\uc758 \uac12\uc744 \uc790\uc720\ub86d\uac8c \uc7ac\ud560\ub2f9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. x = 10 # \uc815\uc218\ud615 x = \"Hello\" # \ubb38\uc790\uc5f4 \uac15\ub825\ud55c \ud0c0\uc785(Type Checking) \ud0c0\uc785 \uac04\uc758 \ubd88\uc77c\uce58\ub294 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4. x = 10 y = \"20\" print ( x + y ) # TypeError: \uc815\uc218\uc640 \ubb38\uc790\uc5f4\uc740 \ub354\ud560 \uc218 \uc5c6\uc74c \ud30c\uc774\uc36c \ubcc0\uc218\ub294 \ucc38\uc870\uac12\uc744 \uc800\uc7a5 \ubcc0\uc218\ub294 \ub370\uc774\ud130 \uac12\uc744 \uc9c1\uc811 \uc800\uc7a5\ud558\uc9c0 \uc54a\uace0, \uba54\ubaa8\ub9ac\uc758 \uc8fc\uc18c\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4.","title":"\ubcc0\uc218\uc758 \ud2b9\uc9d5"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/#_3","text":"\ubb38\uc790, \uc22b\uc790, \ubc11\uc904(_)\ub9cc \uc0ac\uc6a9 \uac00\ub2a5 \ubcc0\uc218 \uc774\ub984\uc740 \ubc18\ub4dc\uc2dc \ubb38\uc790 \ub610\ub294 \ubc11\uc904\ub85c \uc2dc\uc791\ud574\uc57c \ud568. valid_variable = 10 _another_variable = 20 \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 variable \uacfc Variable \uc740 \uc11c\ub85c \ub2e4\ub978 \ubcc0\uc218. name = \"Alice\" Name = \"Bob\" print ( name ) # Alice print ( Name ) # Bob \uc608\uc57d\uc5b4 \uc0ac\uc6a9 \uae08\uc9c0 \ud30c\uc774\uc36c\uc758 \uc608\uc57d\uc5b4\ub294 \ubcc0\uc218 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc74c. (\uc608: if , else , while , for , True , False , None \ub4f1) if = 10 # SyntaxError \uc758\ubbf8 \uc788\ub294 \uc774\ub984 \uc0ac\uc6a9 \uad8c\uc7a5 \ubcc0\uc218 \uc774\ub984\uc740 \ubcc0\uc218\uc758 \ubaa9\uc801\uc744 \ub098\ud0c0\ub0b4\ub294 \uc758\ubbf8 \uc788\ub294 \uc774\ub984\uc73c\ub85c \uc791\uc131. total_price = 1000","title":"\ubcc0\uc218 \uc774\ub984 \uaddc\uce59"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/#_4","text":"\uac12 \ud560\ub2f9 = \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac12\uc744 \ubcc0\uc218\uc5d0 \ud560\ub2f9. age = 25 pi = 3.14 \uc5ec\ub7ec \ubcc0\uc218\uc5d0 \ub3d9\uc2dc\uc5d0 \ud560\ub2f9 \ub3d9\uc77c\ud55c \uac12\uc744 \uc5ec\ub7ec \ubcc0\uc218\uc5d0 \ub3d9\uc2dc\uc5d0 \ud560\ub2f9. a = b = c = 10 print ( a , b , c ) # 10 10 10 \uc5ec\ub7ec \uac12 \ub3d9\uc2dc \ud560\ub2f9 (\uc5b8\ud328\ud0b9) \uc5ec\ub7ec \ubcc0\uc218\ub97c \ud55c \ubc88\uc5d0 \ucd08\uae30\ud654. x , y , z = 1 , 2 , 3 print ( x , y , z ) # 1 2 3","title":"\ubcc0\uc218\uc758 \ud560\ub2f9 \ubc0f \ub3d9\uc791"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/#scope","text":"\uc9c0\uc5ed \ubcc0\uc218(Local Variable) \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc815\uc758\ub41c \ubcc0\uc218\ub294 \ud574\ub2f9 \ud568\uc218 \ub0b4\uc5d0\uc11c\ub9cc \uc0ac\uc6a9 \uac00\ub2a5. def my_function (): x = 10 print ( x ) # 10 my_function () # print(x) # NameError: x is not defined \uc804\uc5ed \ubcc0\uc218(Global Variable) \ud568\uc218 \ubc16\uc5d0\uc11c \uc815\uc758\ub41c \ubcc0\uc218\ub294 \ubaa8\ub4e0 \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5. x = 10 def my_function (): print ( x ) # 10 my_function () print ( x ) # 10 global \ud0a4\uc6cc\ub4dc \ud568\uc218 \ub0b4\uc5d0\uc11c \uc804\uc5ed \ubcc0\uc218 \uac12\uc744 \uc218\uc815\ud558\ub824\uba74 global \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9. x = 10 def my_function (): global x x = 20 my_function () print ( x ) # 20 nonlocal \ud0a4\uc6cc\ub4dc \uc911\ucca9 \ud568\uc218\uc5d0\uc11c \uc0c1\uc704 \ud568\uc218\uc758 \ubcc0\uc218\ub97c \uc218\uc815\ud558\ub824\uba74 \uc0ac\uc6a9. def outer_function (): x = 10 def inner_function (): nonlocal x x = 20 inner_function () print ( x ) # 20 outer_function ()","title":"\ubcc0\uc218\uc758 \uc2a4\ucf54\ud504(Scope)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/#_5","text":"\ud0c0\uc785 \ud655\uc778 type() \ud568\uc218\ub85c \ubcc0\uc218\uc758 \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778. x = 10 print ( type ( x )) # <class 'int'> \ud0c0\uc785 \ubcc0\ud658 int() , float() , str() \ub4f1\uc744 \uc0ac\uc6a9\ud574 \ud0c0\uc785 \ubcc0\ud658 \uac00\ub2a5. x = \"100\" y = int ( x ) # \ubb38\uc790\uc5f4\uc744 \uc815\uc218\ub85c \ubcc0\ud658 print ( y + 10 ) # 110","title":"\ubcc0\uc218\uc758 \ud0c0\uc785 \ud655\uc778 \ubc0f \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98/#_6","text":"# \uc0ac\uc6a9\uc790 \uc785\ub825\uc744 \ubc1b\uc544 \ub450 \uc22b\uc790\ub97c \ub354\ud558\uae30 num1 = int ( input ( \"\uccab \ubc88\uc9f8 \uc22b\uc790 \uc785\ub825: \" )) num2 = int ( input ( \"\ub450 \ubc88\uc9f8 \uc22b\uc790 \uc785\ub825: \" )) result = num1 + num2 print ( \"\ub450 \uc22b\uc790\uc758 \ud569:\" , result ) \ubcc0\uc218\ub294 \ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub7a8\uc758 \ub370\uc774\ud130\ub97c \uad00\ub9ac\ud558\ub294 \uae30\ubcf8\uc801\uc778 \ub3c4\uad6c\uc774\uba70, \uc801\uc808\ud788 \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131\uc774 \ud06c\uac8c \ud5a5\uc0c1\ub429\ub2c8\ub2e4.","title":"\ubcc0\uc218\uc758 \ud65c\uc6a9 \uc608"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/","text":"\ubcc0\uc218 \ub370\uc774\ud130 \ud0c0\uc785 \ud30c\uc774\uc36c\uc5d0\uc11c \ubcc0\uc218\ub294 \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, \ubcc0\uc218\uc758 \ud0c0\uc785\uc740 \ub370\uc774\ud130\uc758 \uc885\ub958\uc5d0 \ub530\ub77c \uc790\ub3d9\uc73c\ub85c \uacb0\uc815\ub429\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \ud30c\uc774\uc36c\uc758 **\uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785**\uacfc \uadf8 \ud2b9\uc9d5\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. 1. \uc22b\uc790\ud615 (Numeric Types) (1) \uc815\uc218\ud615 (int) \uc124\uba85 : \uc815\uc218\ub97c \ud45c\ud604\ud558\ub294 \ud0c0\uc785. \ud06c\uae30\uc758 \uc81c\ud55c\uc774 \uc5c6\uc73c\uba70, \uba54\ubaa8\ub9ac\uac00 \ud5c8\uc6a9\ud558\ub294 \ubc94\uc704\uae4c\uc9c0 \uc0ac\uc6a9 \uac00\ub2a5. \uc608\uc81c : age = 25 temperature = - 10 print ( type ( age )) # <class 'int'> (2) \uc2e4\uc218\ud615 (float) \uc124\uba85 : \ubd80\ub3d9\uc18c\uc218\uc810 \uc22b\uc790\ub97c \ud45c\ud604. \uc18c\uc218\uc810 \uc774\ud558 \uc790\ub9bf\uc218\ub97c \ud3ec\ud568\ud55c \uac12\uc744 \ub2e4\ub8f0 \ub54c \uc0ac\uc6a9. \uc608\uc81c : pi = 3.14 temperature = - 0.5 print ( type ( pi )) # <class 'float'> (3) \ubcf5\uc18c\uc218\ud615 (complex) \uc124\uba85 : \ubcf5\uc18c\uc218\ub97c \ud45c\ud604. \uc2e4\uc218\ubd80\uc640 \ud5c8\uc218\ubd80\ub97c \ud3ec\ud568. a + bj \ud615\ud0dc\ub85c \ud45c\ud604\ud558\uba70, j \ub294 \ud5c8\uc218\ub97c \ub098\ud0c0\ub0c4. \uc608\uc81c : complex_num = 3 + 4 j print ( type ( complex_num )) # <class 'complex'> print ( complex_num . real ) # 3.0 (\uc2e4\uc218\ubd80) print ( complex_num . imag ) # 4.0 (\ud5c8\uc218\ubd80) 2. \ubb38\uc790\uc5f4 (String) \uc124\uba85 : \ubb38\uc790\ub098 \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud558\ub294 \ud0c0\uc785. \uc791\uc740\ub530\uc634\ud45c( ' ) \ub610\ub294 \ud070\ub530\uc634\ud45c( \" )\ub85c \uac10\uc2f8\uc11c \ud45c\ud604. \ubb38\uc790\uc5f4\uc740 \ubd88\ubcc0(immutable)\ud558\uba70, \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1\uc744 \uc9c0\uc6d0. \uc608\uc81c : name = \"Alice\" message = 'Hello, World!' print ( type ( name )) # <class 'str'> print ( name [ 0 ]) # 'A' (\uc778\ub371\uc2f1) print ( name [: 3 ]) # 'Ali' (\uc2ac\ub77c\uc774\uc2f1) 3. \ubd88\ub9b0\ud615 (Boolean) \uc124\uba85 : \ucc38( True )\uacfc \uac70\uc9d3( False )\uc744 \ud45c\ud604\ud558\ub294 \ud0c0\uc785. \uc8fc\ub85c \uc870\uac74\ubb38\uc774\ub098 \ub17c\ub9ac \uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9. \uc608\uc81c : is_active = True is_logged_in = False print ( type ( is_active )) # <class 'bool'> print ( is_active and is_logged_in ) # False 4. NoneType \uc124\uba85 : \uac12\uc774 \uc5c6\uc74c\uc744 \ub098\ud0c0\ub0b4\ub294 \ud0c0\uc785. None \uc740 \ub2e4\ub978 \uc5b8\uc5b4\uc758 null \uacfc \uc720\uc0ac. \uc8fc\ub85c \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uac70\ub098 \ud568\uc218\uc5d0\uc11c \ubc18\ud658 \uac12\uc774 \uc5c6\uc74c\uc744 \ub098\ud0c0\ub0bc \ub54c \uc0ac\uc6a9. \uc608\uc81c : result = None print ( type ( result )) # <class 'NoneType'> 5. \uc2dc\ud000\uc2a4\ud615 (Sequence Types) (1) \ub9ac\uc2a4\ud2b8 (list) \uc124\uba85 : \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \uc21c\uc11c\uac00 \uc788\ub294 \uceec\ub809\uc158. \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \ud63c\ud569 \uac00\ub2a5. \uc608\uc81c : fruits = [ \"apple\" , \"banana\" , \"cherry\" ] print ( type ( fruits )) # <class 'list'> fruits . append ( \"orange\" ) # \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00 print ( fruits ) # ['apple', 'banana', 'cherry', 'orange'] (2) \ud29c\ud50c (tuple) \uc124\uba85 : \ubcc0\uacbd \ubd88\uac00\ub2a5\ud55c(immutable) \uc21c\uc11c\uac00 \uc788\ub294 \uceec\ub809\uc158. \uc608\uc81c : coordinates = ( 10 , 20 ) print ( type ( coordinates )) # <class 'tuple'> # coordinates[0] = 15 # TypeError: \ud29c\ud50c\uc740 \ubcc0\uacbd \ubd88\uac00 (3) \ubb38\uc790\uc5f4 (str) \uc774\ubbf8 \uc704\uc5d0\uc11c \uc124\uba85\ud55c \ub300\ub85c, \ubb38\uc790\uc5f4\ub3c4 \uc2dc\ud000\uc2a4\ud615\uc758 \uc77c\uc885. 6. \uc9d1\ud569\ud615 (Set Types) (1) \uc9d1\ud569 (set) \uc124\uba85 : \uc911\ubcf5\ub418\uc9c0 \uc54a\ub294 \ud56d\ubaa9\ub4e4\uc758 \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \uc9d1\ud569. \uc21c\uc11c\uac00 \uc5c6\uc74c. \uc608\uc81c : numbers = { 1 , 2 , 3 , 3 , 4 } print ( type ( numbers )) # <class 'set'> print ( numbers ) # {1, 2, 3, 4} (2) \ubd88\ubcc0 \uc9d1\ud569 (frozenset) \uc124\uba85 : \ubcc0\uacbd \ubd88\uac00\ub2a5\ud55c(immutable) \uc9d1\ud569. \uc608\uc81c : immutable_set = frozenset ([ 1 , 2 , 3 ]) print ( type ( immutable_set )) # <class 'frozenset'> 7. \ub9e4\ud551\ud615 (Mapping Types) \ub515\uc154\ub108\ub9ac (dict) \uc124\uba85 : \ud0a4-\uac12 \uc30d\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ubcc0\uacbd \uac00\ub2a5\ud55c \uceec\ub809\uc158. \ud0a4\ub294 \uace0\uc720\ud574\uc57c \ud558\uba70, \ud574\uc2dc \uac00\ub2a5\ud55c \uac1d\uccb4\uc5ec\uc57c \ud568. \uc608\uc81c : student = { \"name\" : \"Alice\" , \"age\" : 25 , \"grade\" : \"A\" } print ( type ( student )) # <class 'dict'> print ( student [ \"name\" ]) # 'Alice' student [ \"age\" ] = 26 # \uac12 \ubcc0\uacbd 8. \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130 \ud0c0\uc785 (1) \ubc14\uc774\ud2b8 (bytes) \uc124\uba85 : \ubd88\ubcc0(immutable)\ud55c \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130\ub97c \ud45c\ud604. \uc608\uc81c : byte_data = b \"Hello\" print ( type ( byte_data )) # <class 'bytes'> (2) \ubc14\uc774\ud2b8 \ubc30\uc5f4 (bytearray) \uc124\uba85 : \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130. \uc608\uc81c : byte_array = bytearray ([ 65 , 66 , 67 ]) # ASCII \ucf54\ub4dc print ( type ( byte_array )) # <class 'bytearray'> 9. \uae30\ud0c0 \ud0c0\uc785 (1) \uc5f4\uac70\ud615 (enumerate) \uc124\uba85 : \uc5f4\uac70\ub41c \uac1d\uccb4\ub97c \ubc18\ud658. \uc608\uc81c : items = [ \"a\" , \"b\" , \"c\" ] for index , value in enumerate ( items ): print ( index , value ) (2) \ub808\uc778\uc9c0 (range) \uc124\uba85 : \uc77c\uc815 \ubc94\uc704\uc758 \uc22b\uc790\ub97c \uc0dd\uc131\ud558\ub294 \uac1d\uccb4. \uc608\uc81c : for i in range ( 5 ): print ( i ) # 0, 1, 2, 3, 4 \ud30c\uc774\uc36c\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc740 \ub9e4\uc6b0 \ub2e4\uc591\ud558\uba70, \uac01 \ud0c0\uc785\uc740 \ud2b9\uc815 \uc0c1\ud669\uc5d0\uc11c \uc801\ud569\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud544\uc694\uc5d0 \ub530\ub77c \uc801\uc808\ud55c \ud0c0\uc785\uc744 \uc120\ud0dd\ud558\uba74 \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uacfc \ud6a8\uc728\uc131\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4.","title":"2.3 \ubcc0\uc218\ud0c0\uc785"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#_1","text":"\ud30c\uc774\uc36c\uc5d0\uc11c \ubcc0\uc218\ub294 \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, \ubcc0\uc218\uc758 \ud0c0\uc785\uc740 \ub370\uc774\ud130\uc758 \uc885\ub958\uc5d0 \ub530\ub77c \uc790\ub3d9\uc73c\ub85c \uacb0\uc815\ub429\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \ud30c\uc774\uc36c\uc758 **\uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785**\uacfc \uadf8 \ud2b9\uc9d5\uc744 \uc124\uba85\ud569\ub2c8\ub2e4.","title":"\ubcc0\uc218 \ub370\uc774\ud130 \ud0c0\uc785"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#1-numeric-types","text":"","title":"1. \uc22b\uc790\ud615 (Numeric Types)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#1-int","text":"\uc124\uba85 : \uc815\uc218\ub97c \ud45c\ud604\ud558\ub294 \ud0c0\uc785. \ud06c\uae30\uc758 \uc81c\ud55c\uc774 \uc5c6\uc73c\uba70, \uba54\ubaa8\ub9ac\uac00 \ud5c8\uc6a9\ud558\ub294 \ubc94\uc704\uae4c\uc9c0 \uc0ac\uc6a9 \uac00\ub2a5. \uc608\uc81c : age = 25 temperature = - 10 print ( type ( age )) # <class 'int'>","title":"(1) \uc815\uc218\ud615 (int)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#2-float","text":"\uc124\uba85 : \ubd80\ub3d9\uc18c\uc218\uc810 \uc22b\uc790\ub97c \ud45c\ud604. \uc18c\uc218\uc810 \uc774\ud558 \uc790\ub9bf\uc218\ub97c \ud3ec\ud568\ud55c \uac12\uc744 \ub2e4\ub8f0 \ub54c \uc0ac\uc6a9. \uc608\uc81c : pi = 3.14 temperature = - 0.5 print ( type ( pi )) # <class 'float'>","title":"(2) \uc2e4\uc218\ud615 (float)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#3-complex","text":"\uc124\uba85 : \ubcf5\uc18c\uc218\ub97c \ud45c\ud604. \uc2e4\uc218\ubd80\uc640 \ud5c8\uc218\ubd80\ub97c \ud3ec\ud568. a + bj \ud615\ud0dc\ub85c \ud45c\ud604\ud558\uba70, j \ub294 \ud5c8\uc218\ub97c \ub098\ud0c0\ub0c4. \uc608\uc81c : complex_num = 3 + 4 j print ( type ( complex_num )) # <class 'complex'> print ( complex_num . real ) # 3.0 (\uc2e4\uc218\ubd80) print ( complex_num . imag ) # 4.0 (\ud5c8\uc218\ubd80)","title":"(3) \ubcf5\uc18c\uc218\ud615 (complex)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#2-string","text":"\uc124\uba85 : \ubb38\uc790\ub098 \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud558\ub294 \ud0c0\uc785. \uc791\uc740\ub530\uc634\ud45c( ' ) \ub610\ub294 \ud070\ub530\uc634\ud45c( \" )\ub85c \uac10\uc2f8\uc11c \ud45c\ud604. \ubb38\uc790\uc5f4\uc740 \ubd88\ubcc0(immutable)\ud558\uba70, \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1\uc744 \uc9c0\uc6d0. \uc608\uc81c : name = \"Alice\" message = 'Hello, World!' print ( type ( name )) # <class 'str'> print ( name [ 0 ]) # 'A' (\uc778\ub371\uc2f1) print ( name [: 3 ]) # 'Ali' (\uc2ac\ub77c\uc774\uc2f1)","title":"2. \ubb38\uc790\uc5f4 (String)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#3-boolean","text":"\uc124\uba85 : \ucc38( True )\uacfc \uac70\uc9d3( False )\uc744 \ud45c\ud604\ud558\ub294 \ud0c0\uc785. \uc8fc\ub85c \uc870\uac74\ubb38\uc774\ub098 \ub17c\ub9ac \uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9. \uc608\uc81c : is_active = True is_logged_in = False print ( type ( is_active )) # <class 'bool'> print ( is_active and is_logged_in ) # False","title":"3. \ubd88\ub9b0\ud615 (Boolean)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#4-nonetype","text":"\uc124\uba85 : \uac12\uc774 \uc5c6\uc74c\uc744 \ub098\ud0c0\ub0b4\ub294 \ud0c0\uc785. None \uc740 \ub2e4\ub978 \uc5b8\uc5b4\uc758 null \uacfc \uc720\uc0ac. \uc8fc\ub85c \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uac70\ub098 \ud568\uc218\uc5d0\uc11c \ubc18\ud658 \uac12\uc774 \uc5c6\uc74c\uc744 \ub098\ud0c0\ub0bc \ub54c \uc0ac\uc6a9. \uc608\uc81c : result = None print ( type ( result )) # <class 'NoneType'>","title":"4. NoneType"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#5-sequence-types","text":"","title":"5. \uc2dc\ud000\uc2a4\ud615 (Sequence Types)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#1-list","text":"\uc124\uba85 : \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \uc21c\uc11c\uac00 \uc788\ub294 \uceec\ub809\uc158. \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \ud63c\ud569 \uac00\ub2a5. \uc608\uc81c : fruits = [ \"apple\" , \"banana\" , \"cherry\" ] print ( type ( fruits )) # <class 'list'> fruits . append ( \"orange\" ) # \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00 print ( fruits ) # ['apple', 'banana', 'cherry', 'orange']","title":"(1) \ub9ac\uc2a4\ud2b8 (list)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#2-tuple","text":"\uc124\uba85 : \ubcc0\uacbd \ubd88\uac00\ub2a5\ud55c(immutable) \uc21c\uc11c\uac00 \uc788\ub294 \uceec\ub809\uc158. \uc608\uc81c : coordinates = ( 10 , 20 ) print ( type ( coordinates )) # <class 'tuple'> # coordinates[0] = 15 # TypeError: \ud29c\ud50c\uc740 \ubcc0\uacbd \ubd88\uac00","title":"(2) \ud29c\ud50c (tuple)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#3-str","text":"\uc774\ubbf8 \uc704\uc5d0\uc11c \uc124\uba85\ud55c \ub300\ub85c, \ubb38\uc790\uc5f4\ub3c4 \uc2dc\ud000\uc2a4\ud615\uc758 \uc77c\uc885.","title":"(3) \ubb38\uc790\uc5f4 (str)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#6-set-types","text":"","title":"6. \uc9d1\ud569\ud615 (Set Types)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#1-set","text":"\uc124\uba85 : \uc911\ubcf5\ub418\uc9c0 \uc54a\ub294 \ud56d\ubaa9\ub4e4\uc758 \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \uc9d1\ud569. \uc21c\uc11c\uac00 \uc5c6\uc74c. \uc608\uc81c : numbers = { 1 , 2 , 3 , 3 , 4 } print ( type ( numbers )) # <class 'set'> print ( numbers ) # {1, 2, 3, 4}","title":"(1) \uc9d1\ud569 (set)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#2-frozenset","text":"\uc124\uba85 : \ubcc0\uacbd \ubd88\uac00\ub2a5\ud55c(immutable) \uc9d1\ud569. \uc608\uc81c : immutable_set = frozenset ([ 1 , 2 , 3 ]) print ( type ( immutable_set )) # <class 'frozenset'>","title":"(2) \ubd88\ubcc0 \uc9d1\ud569 (frozenset)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#7-mapping-types","text":"","title":"7. \ub9e4\ud551\ud615 (Mapping Types)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#dict","text":"\uc124\uba85 : \ud0a4-\uac12 \uc30d\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ubcc0\uacbd \uac00\ub2a5\ud55c \uceec\ub809\uc158. \ud0a4\ub294 \uace0\uc720\ud574\uc57c \ud558\uba70, \ud574\uc2dc \uac00\ub2a5\ud55c \uac1d\uccb4\uc5ec\uc57c \ud568. \uc608\uc81c : student = { \"name\" : \"Alice\" , \"age\" : 25 , \"grade\" : \"A\" } print ( type ( student )) # <class 'dict'> print ( student [ \"name\" ]) # 'Alice' student [ \"age\" ] = 26 # \uac12 \ubcc0\uacbd","title":"\ub515\uc154\ub108\ub9ac (dict)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#8","text":"","title":"8. \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130 \ud0c0\uc785"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#1-bytes","text":"\uc124\uba85 : \ubd88\ubcc0(immutable)\ud55c \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130\ub97c \ud45c\ud604. \uc608\uc81c : byte_data = b \"Hello\" print ( type ( byte_data )) # <class 'bytes'>","title":"(1) \ubc14\uc774\ud2b8 (bytes)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#2-bytearray","text":"\uc124\uba85 : \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \ubc14\uc774\ub108\ub9ac \ub370\uc774\ud130. \uc608\uc81c : byte_array = bytearray ([ 65 , 66 , 67 ]) # ASCII \ucf54\ub4dc print ( type ( byte_array )) # <class 'bytearray'>","title":"(2) \ubc14\uc774\ud2b8 \ubc30\uc5f4 (bytearray)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#9","text":"","title":"9. \uae30\ud0c0 \ud0c0\uc785"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#1-enumerate","text":"\uc124\uba85 : \uc5f4\uac70\ub41c \uac1d\uccb4\ub97c \ubc18\ud658. \uc608\uc81c : items = [ \"a\" , \"b\" , \"c\" ] for index , value in enumerate ( items ): print ( index , value )","title":"(1) \uc5f4\uac70\ud615 (enumerate)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%B3%80%EC%88%98%ED%83%80%EC%9E%85/#2-range","text":"\uc124\uba85 : \uc77c\uc815 \ubc94\uc704\uc758 \uc22b\uc790\ub97c \uc0dd\uc131\ud558\ub294 \uac1d\uccb4. \uc608\uc81c : for i in range ( 5 ): print ( i ) # 0, 1, 2, 3, 4 \ud30c\uc774\uc36c\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc740 \ub9e4\uc6b0 \ub2e4\uc591\ud558\uba70, \uac01 \ud0c0\uc785\uc740 \ud2b9\uc815 \uc0c1\ud669\uc5d0\uc11c \uc801\ud569\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud544\uc694\uc5d0 \ub530\ub77c \uc801\uc808\ud55c \ud0c0\uc785\uc744 \uc120\ud0dd\ud558\uba74 \ucf54\ub4dc\uc758 \uac00\ub3c5\uc131\uacfc \ud6a8\uc728\uc131\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4.","title":"(2) \ub808\uc778\uc9c0 (range)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/","text":"\uc81c\uc5b4\ubb38 \ud30c\uc774\uc36c\uc758 \uc81c\uc5b4\uad6c\ubb38\uc740 \ud504\ub85c\uadf8\ub7a8\uc758 \ud750\ub984\uc744 \uc81c\uc5b4\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc870\uac74\ubb38\uacfc \ubc18\ubcf5\ubb38\uc774 \uc8fc\ub41c \uc81c\uc5b4\uad6c\ubb38\uc774\uba70, \ucd94\uac00\ub85c \uc608\uc678 \ucc98\ub9ac\ub97c \uc704\ud55c \uad6c\ubb38\ub3c4 \ud3ec\ud568\ub429\ub2c8\ub2e4. 1. \uc870\uac74\ubb38 (Conditional Statements) (1) if , elif , else \ud2b9\uc815 \uc870\uac74\uc5d0 \ub530\ub77c \ucf54\ub4dc \ube14\ub85d\uc744 \uc2e4\ud589\ud558\uac70\ub098 \uac74\ub108\ub6f0\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uad6c\ubb38 \ud615\uc2dd : if \uc870\uac74\uc2dd : \uc2e4\ud589\ud560 \ucf54\ub4dc elif \ub2e4\ub978 \uc870\uac74\uc2dd : \uc2e4\ud589\ud560 \ucf54\ub4dc else : \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : score = 85 if score >= 90 : print ( \"A\ub4f1\uae09\" ) elif score >= 80 : print ( \"B\ub4f1\uae09\" ) else : print ( \"C\ub4f1\uae09\" ) (2) \uc911\ucca9 \uc870\uac74\ubb38 \uc870\uac74\ubb38 \uc548\uc5d0 \ub610 \ub2e4\ub978 \uc870\uac74\ubb38\uc744 \ud3ec\ud568. \uc608\uc81c : age = 20 has_ticket = True if age >= 18 : if has_ticket : print ( \"\uc785\uc7a5 \uac00\ub2a5\" ) else : print ( \"\ud2f0\ucf13\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\" ) else : print ( \"\ub098\uc774\uac00 \ubd80\uc871\ud569\ub2c8\ub2e4\" ) (3) \uc870\uac74 \ud45c\ud604\uc2dd (\uc0bc\ud56d \uc5f0\uc0b0\uc790) \ub2e8\uc77c \ud45c\ud604\uc2dd\uc73c\ub85c \uc870\uac74\uc5d0 \ub530\ub77c \uac12\uc744 \uc120\ud0dd. \uad6c\ubb38 \ud615\uc2dd : \ucc38\uc77c \ub54c \uac12 if \uc870\uac74\uc2dd else \uac70\uc9d3\uc77c \ub54c \uac12 \uc608\uc81c : age = 18 category = \"\uc131\uc778\" if age >= 18 else \"\ubbf8\uc131\ub144\uc790\" print ( category ) # \uc131\uc778 2. \ubc18\ubcf5\ubb38 (Loops) (1) for \ubb38 \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4(\ub9ac\uc2a4\ud2b8, \ubb38\uc790\uc5f4, \ud29c\ud50c \ub4f1)\ub97c \uc21c\ud68c. \uad6c\ubb38 \ud615\uc2dd : for \ubcc0\uc218 in \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4 : \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : for i in range ( 5 ): print ( i ) # 0, 1, 2, 3, 4 \uc911\ucca9 for \ubb38 : for i in range ( 3 ): for j in range ( 2 ): print ( f \"i= { i } , j= { j } \" ) (2) while \ubb38 \uc870\uac74\uc2dd\uc774 \ucc38\uc778 \ub3d9\uc548 \ucf54\ub4dc \ube14\ub85d\uc744 \ubc18\ubcf5. \uad6c\ubb38 \ud615\uc2dd : while \uc870\uac74\uc2dd : \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : count = 0 while count < 5 : print ( count ) count += 1 (3) \ubc18\ubcf5 \uc81c\uc5b4 \uad6c\ubb38 break : \ubc18\ubcf5\ubb38\uc744 \uc989\uc2dc \uc885\ub8cc. for i in range ( 10 ): if i == 5 : break print ( i ) # 0, 1, 2, 3, 4 continue : \ud604\uc7ac \ubc18\ubcf5\uc744 \uac74\ub108\ub6f0\uace0 \ub2e4\uc74c \ubc18\ubcf5\uc73c\ub85c \uc774\ub3d9. for i in range ( 5 ): if i == 2 : continue print ( i ) # 0, 1, 3, 4 else : \ubc18\ubcf5\ubb38\uc774 \uc815\uc0c1 \uc885\ub8cc\ub41c \uacbd\uc6b0 \uc2e4\ud589. for i in range ( 5 ): print ( i ) else : print ( \"\ubc18\ubcf5 \uc885\ub8cc\" ) # \ubc18\ubcf5\ubb38\uc774 break \uc5c6\uc774 \uc885\ub8cc\ub418\uba74 \uc2e4\ud589 3. \uc608\uc678 \ucc98\ub9ac (Exception Handling) (1) try , except , else , finally \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc911 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc624\ub958\ub97c \ucc98\ub9ac\ud558\uc5ec \uc911\ub2e8\uc744 \ubc29\uc9c0. \uad6c\ubb38 \ud615\uc2dd : try : \uc2e4\ud589\ud560 \ucf54\ub4dc except \uc608\uc678 \uc885\ub958 : \uc608\uc678 \ucc98\ub9ac \ucf54\ub4dc else : \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc744 \ub54c \uc2e4\ud589\ud560 \ucf54\ub4dc finally : \ud56d\uc0c1 \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : try : num = int ( input ( \"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694: \" )) print ( 10 / num ) except ZeroDivisionError : print ( \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) except ValueError : print ( \"\uc22b\uc790\ub97c \uc785\ub825\ud574\uc57c \ud569\ub2c8\ub2e4.\" ) else : print ( \"\uc815\uc0c1\uc801\uc73c\ub85c \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\" ) finally : print ( \"\ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc\" ) 4. \ucef4\ud504\ub9ac\ud5e8\uc158 (Comprehension) (1) \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \uc124\uba85 : \ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub9ac\uc2a4\ud2b8\ub97c \uac04\uacb0\ud558\uac8c \uc0dd\uc131. \uad6c\ubb38 \ud615\uc2dd : [ \ud45c\ud604\uc2dd for \ubcc0\uc218 in \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4 if \uc870\uac74\uc2dd ] \uc608\uc81c : squares = [ x ** 2 for x in range ( 10 ) if x % 2 == 0 ] print ( squares ) # [0, 4, 16, 36, 64] (2) \ub515\uc154\ub108\ub9ac \ucef4\ud504\ub9ac\ud5e8\uc158 \uc608\uc81c : keys = [ 'a' , 'b' , 'c' ] values = [ 1 , 2 , 3 ] dictionary = { k : v for k , v in zip ( keys , values )} print ( dictionary ) # {'a': 1, 'b': 2, 'c': 3} (3) \uc9d1\ud569 \ucef4\ud504\ub9ac\ud5e8\uc158 \uc608\uc81c : unique_squares = { x ** 2 for x in range ( 10 )} print ( unique_squares ) # {0, 1, 4, 9, 16, 25, 36, 49, 64, 81} 5. \ud568\uc218\uc640 \uad00\ub828\ub41c \uc81c\uc5b4 \uad6c\ubb38 (1) return \ud568\uc218\uc5d0\uc11c \uac12\uc744 \ubc18\ud658\ud558\uace0 \uc2e4\ud589 \uc885\ub8cc. \uc608\uc81c : def add ( a , b ): return a + b print ( add ( 2 , 3 )) # 5 (2) pass \uc2e4\ud589\ud560 \ucf54\ub4dc\uac00 \uc5c6\uc744 \ub54c \uc0ac\uc6a9. \uc608\uc81c : if True : pass # \uc544\ubb34 \uc791\uc5c5\ub3c4 \ud558\uc9c0 \uc54a\uc74c (3) yield \uc81c\ub108\ub808\uc774\ud130 \ud568\uc218\uc5d0\uc11c \uac12\uc744 \ubc18\ud658\ud558\uace0 \uc0c1\ud0dc\ub97c \uc720\uc9c0. \uc608\uc81c : def generate_numbers (): for i in range ( 3 ): yield i for num in generate_numbers (): print ( num ) # 0, 1, 2 \uc694\uc57d \uc870\uac74\ubb38 : if , elif , else \ub85c \ubd84\uae30 \ucc98\ub9ac. \ubc18\ubcf5\ubb38 : for , while \ub85c \ubc18\ubcf5 \ucc98\ub9ac. break , continue , else \ub85c \uc81c\uc5b4 \uac00\ub2a5. \uc608\uc678 \ucc98\ub9ac : try , except , else , finally \ub85c \uc624\ub958 \uad00\ub9ac. \ucef4\ud504\ub9ac\ud5e8\uc158 : \ubc18\ubcf5\ubb38\uacfc \uc870\uac74\uc744 \uac04\uacb0\ud558\uac8c \ud65c\uc6a9. \uae30\ud0c0 : pass , return , yield \ub85c \ucd94\uac00 \ud750\ub984 \uc81c\uc5b4. \uc81c\uc5b4\uad6c\ubb38\uc744 \uc798 \ud65c\uc6a9\ud558\uba74 \ubcf5\uc7a1\ud55c \ud504\ub85c\uadf8\ub7a8\ub3c4 \uac04\uacb0\ud558\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude0a","title":"2.4 \uc81c\uc5b4\ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#_1","text":"\ud30c\uc774\uc36c\uc758 \uc81c\uc5b4\uad6c\ubb38\uc740 \ud504\ub85c\uadf8\ub7a8\uc758 \ud750\ub984\uc744 \uc81c\uc5b4\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc870\uac74\ubb38\uacfc \ubc18\ubcf5\ubb38\uc774 \uc8fc\ub41c \uc81c\uc5b4\uad6c\ubb38\uc774\uba70, \ucd94\uac00\ub85c \uc608\uc678 \ucc98\ub9ac\ub97c \uc704\ud55c \uad6c\ubb38\ub3c4 \ud3ec\ud568\ub429\ub2c8\ub2e4.","title":"\uc81c\uc5b4\ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#1-conditional-statements","text":"","title":"1. \uc870\uac74\ubb38 (Conditional Statements)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#1-if-elif-else","text":"\ud2b9\uc815 \uc870\uac74\uc5d0 \ub530\ub77c \ucf54\ub4dc \ube14\ub85d\uc744 \uc2e4\ud589\ud558\uac70\ub098 \uac74\ub108\ub6f0\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uad6c\ubb38 \ud615\uc2dd : if \uc870\uac74\uc2dd : \uc2e4\ud589\ud560 \ucf54\ub4dc elif \ub2e4\ub978 \uc870\uac74\uc2dd : \uc2e4\ud589\ud560 \ucf54\ub4dc else : \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : score = 85 if score >= 90 : print ( \"A\ub4f1\uae09\" ) elif score >= 80 : print ( \"B\ub4f1\uae09\" ) else : print ( \"C\ub4f1\uae09\" )","title":"(1) if, elif, else"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#2","text":"\uc870\uac74\ubb38 \uc548\uc5d0 \ub610 \ub2e4\ub978 \uc870\uac74\ubb38\uc744 \ud3ec\ud568. \uc608\uc81c : age = 20 has_ticket = True if age >= 18 : if has_ticket : print ( \"\uc785\uc7a5 \uac00\ub2a5\" ) else : print ( \"\ud2f0\ucf13\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\" ) else : print ( \"\ub098\uc774\uac00 \ubd80\uc871\ud569\ub2c8\ub2e4\" )","title":"(2) \uc911\ucca9 \uc870\uac74\ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#3","text":"\ub2e8\uc77c \ud45c\ud604\uc2dd\uc73c\ub85c \uc870\uac74\uc5d0 \ub530\ub77c \uac12\uc744 \uc120\ud0dd. \uad6c\ubb38 \ud615\uc2dd : \ucc38\uc77c \ub54c \uac12 if \uc870\uac74\uc2dd else \uac70\uc9d3\uc77c \ub54c \uac12 \uc608\uc81c : age = 18 category = \"\uc131\uc778\" if age >= 18 else \"\ubbf8\uc131\ub144\uc790\" print ( category ) # \uc131\uc778","title":"(3) \uc870\uac74 \ud45c\ud604\uc2dd (\uc0bc\ud56d \uc5f0\uc0b0\uc790)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#2-loops","text":"","title":"2. \ubc18\ubcf5\ubb38 (Loops)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#1-for","text":"\ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4(\ub9ac\uc2a4\ud2b8, \ubb38\uc790\uc5f4, \ud29c\ud50c \ub4f1)\ub97c \uc21c\ud68c. \uad6c\ubb38 \ud615\uc2dd : for \ubcc0\uc218 in \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4 : \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : for i in range ( 5 ): print ( i ) # 0, 1, 2, 3, 4 \uc911\ucca9 for \ubb38 : for i in range ( 3 ): for j in range ( 2 ): print ( f \"i= { i } , j= { j } \" )","title":"(1) for \ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#2-while","text":"\uc870\uac74\uc2dd\uc774 \ucc38\uc778 \ub3d9\uc548 \ucf54\ub4dc \ube14\ub85d\uc744 \ubc18\ubcf5. \uad6c\ubb38 \ud615\uc2dd : while \uc870\uac74\uc2dd : \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : count = 0 while count < 5 : print ( count ) count += 1","title":"(2) while \ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#3_1","text":"break : \ubc18\ubcf5\ubb38\uc744 \uc989\uc2dc \uc885\ub8cc. for i in range ( 10 ): if i == 5 : break print ( i ) # 0, 1, 2, 3, 4 continue : \ud604\uc7ac \ubc18\ubcf5\uc744 \uac74\ub108\ub6f0\uace0 \ub2e4\uc74c \ubc18\ubcf5\uc73c\ub85c \uc774\ub3d9. for i in range ( 5 ): if i == 2 : continue print ( i ) # 0, 1, 3, 4 else : \ubc18\ubcf5\ubb38\uc774 \uc815\uc0c1 \uc885\ub8cc\ub41c \uacbd\uc6b0 \uc2e4\ud589. for i in range ( 5 ): print ( i ) else : print ( \"\ubc18\ubcf5 \uc885\ub8cc\" ) # \ubc18\ubcf5\ubb38\uc774 break \uc5c6\uc774 \uc885\ub8cc\ub418\uba74 \uc2e4\ud589","title":"(3) \ubc18\ubcf5 \uc81c\uc5b4 \uad6c\ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#3-exception-handling","text":"","title":"3. \uc608\uc678 \ucc98\ub9ac (Exception Handling)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#1-try-except-else-finally","text":"\ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc911 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc624\ub958\ub97c \ucc98\ub9ac\ud558\uc5ec \uc911\ub2e8\uc744 \ubc29\uc9c0. \uad6c\ubb38 \ud615\uc2dd : try : \uc2e4\ud589\ud560 \ucf54\ub4dc except \uc608\uc678 \uc885\ub958 : \uc608\uc678 \ucc98\ub9ac \ucf54\ub4dc else : \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc744 \ub54c \uc2e4\ud589\ud560 \ucf54\ub4dc finally : \ud56d\uc0c1 \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : try : num = int ( input ( \"\uc22b\uc790\ub97c \uc785\ub825\ud558\uc138\uc694: \" )) print ( 10 / num ) except ZeroDivisionError : print ( \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) except ValueError : print ( \"\uc22b\uc790\ub97c \uc785\ub825\ud574\uc57c \ud569\ub2c8\ub2e4.\" ) else : print ( \"\uc815\uc0c1\uc801\uc73c\ub85c \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\" ) finally : print ( \"\ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc\" )","title":"(1) try, except, else, finally"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#4-comprehension","text":"","title":"4. \ucef4\ud504\ub9ac\ud5e8\uc158 (Comprehension)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#1","text":"\uc124\uba85 : \ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub9ac\uc2a4\ud2b8\ub97c \uac04\uacb0\ud558\uac8c \uc0dd\uc131. \uad6c\ubb38 \ud615\uc2dd : [ \ud45c\ud604\uc2dd for \ubcc0\uc218 in \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4 if \uc870\uac74\uc2dd ] \uc608\uc81c : squares = [ x ** 2 for x in range ( 10 ) if x % 2 == 0 ] print ( squares ) # [0, 4, 16, 36, 64]","title":"(1) \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#2_1","text":"\uc608\uc81c : keys = [ 'a' , 'b' , 'c' ] values = [ 1 , 2 , 3 ] dictionary = { k : v for k , v in zip ( keys , values )} print ( dictionary ) # {'a': 1, 'b': 2, 'c': 3}","title":"(2) \ub515\uc154\ub108\ub9ac \ucef4\ud504\ub9ac\ud5e8\uc158"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#3_2","text":"\uc608\uc81c : unique_squares = { x ** 2 for x in range ( 10 )} print ( unique_squares ) # {0, 1, 4, 9, 16, 25, 36, 49, 64, 81}","title":"(3) \uc9d1\ud569 \ucef4\ud504\ub9ac\ud5e8\uc158"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#5","text":"","title":"5. \ud568\uc218\uc640 \uad00\ub828\ub41c \uc81c\uc5b4 \uad6c\ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#1-return","text":"\ud568\uc218\uc5d0\uc11c \uac12\uc744 \ubc18\ud658\ud558\uace0 \uc2e4\ud589 \uc885\ub8cc. \uc608\uc81c : def add ( a , b ): return a + b print ( add ( 2 , 3 )) # 5","title":"(1) return"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#2-pass","text":"\uc2e4\ud589\ud560 \ucf54\ub4dc\uac00 \uc5c6\uc744 \ub54c \uc0ac\uc6a9. \uc608\uc81c : if True : pass # \uc544\ubb34 \uc791\uc5c5\ub3c4 \ud558\uc9c0 \uc54a\uc74c","title":"(2) pass"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#3-yield","text":"\uc81c\ub108\ub808\uc774\ud130 \ud568\uc218\uc5d0\uc11c \uac12\uc744 \ubc18\ud658\ud558\uace0 \uc0c1\ud0dc\ub97c \uc720\uc9c0. \uc608\uc81c : def generate_numbers (): for i in range ( 3 ): yield i for num in generate_numbers (): print ( num ) # 0, 1, 2","title":"(3) yield"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%A0%9C%EC%96%B4%EB%AC%B8/#_2","text":"\uc870\uac74\ubb38 : if , elif , else \ub85c \ubd84\uae30 \ucc98\ub9ac. \ubc18\ubcf5\ubb38 : for , while \ub85c \ubc18\ubcf5 \ucc98\ub9ac. break , continue , else \ub85c \uc81c\uc5b4 \uac00\ub2a5. \uc608\uc678 \ucc98\ub9ac : try , except , else , finally \ub85c \uc624\ub958 \uad00\ub9ac. \ucef4\ud504\ub9ac\ud5e8\uc158 : \ubc18\ubcf5\ubb38\uacfc \uc870\uac74\uc744 \uac04\uacb0\ud558\uac8c \ud65c\uc6a9. \uae30\ud0c0 : pass , return , yield \ub85c \ucd94\uac00 \ud750\ub984 \uc81c\uc5b4. \uc81c\uc5b4\uad6c\ubb38\uc744 \uc798 \ud65c\uc6a9\ud558\uba74 \ubcf5\uc7a1\ud55c \ud504\ub85c\uadf8\ub7a8\ub3c4 \uac04\uacb0\ud558\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude0a","title":"\uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/","text":"\ud30c\uc774\uc36c \ud074\ub798\uc2a4 (Class): \uac1c\ub150 \ubc0f \uc0ac\uc6a9\ubc95 \ud074\ub798\uc2a4(Class) \ub294 \uac1d\uccb4 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d(OOP, Object-Oriented Programming)\uc758 \uae30\ubcf8 \ub2e8\uc704\ub85c, \ub370\uc774\ud130\uc640 \ud574\ub2f9 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \uba54\uc11c\ub4dc(\ud568\uc218)\ub97c \ud568\uaed8 \uc815\uc758\ud558\ub294 \uad6c\uc870\uc785\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uba74 \ud504\ub85c\uadf8\ub7a8\uc744 \ub17c\ub9ac\uc801\uc73c\ub85c \uad6c\uc870\ud654\ud558\uace0 \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1. \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uac1c\ub150 \ud074\ub798\uc2a4(Class) : \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uccad\uc0ac\uc9c4(\ud15c\ud50c\ub9bf)\uc785\ub2c8\ub2e4. \uac1d\uccb4(Object) : \ud074\ub798\uc2a4\uc5d0\uc11c \uc0dd\uc131\ub41c \uc778\uc2a4\ud134\uc2a4(instance)\uc785\ub2c8\ub2e4. \uc18d\uc131(Attribute) : \uac1d\uccb4\uc758 \ub370\uc774\ud130(\ubcc0\uc218)\uc785\ub2c8\ub2e4. \uba54\uc11c\ub4dc(Method) : \uac1d\uccb4\uac00 \uc218\ud589\ud560 \uc218 \uc788\ub294 \ub3d9\uc791(\ud568\uc218)\uc785\ub2c8\ub2e4. 2. \ud074\ub798\uc2a4 \uc815\uc758 class \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud074\ub798\uc2a4\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uad6c\ubb38 : class \ud074\ub798\uc2a4\uc774\ub984 : \ud074\ub798\uc2a4 \ubcc0\uc218 \uba54\uc11c\ub4dc \uc608\uc81c : class Person : def __init__ ( self , name , age ): # \uc0dd\uc131\uc790 \uba54\uc11c\ub4dc self . name = name self . age = age def greet ( self ): # \uba54\uc11c\ub4dc print ( f \"\uc548\ub155\ud558\uc138\uc694, \uc800\ub294 { self . name } \uc774\uace0, \ub098\uc774\ub294 { self . age } \uc785\ub2c8\ub2e4.\" ) 3. \uac1d\uccb4 \uc0dd\uc131 \ubc0f \uc0ac\uc6a9 \uac1d\uccb4 \uc0dd\uc131 \ud074\ub798\uc2a4\ub97c \ud638\ucd9c\ud558\uc5ec \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608\uc81c : p1 = Person ( \"\ucca0\uc218\" , 25 ) p2 = Person ( \"\uc601\ud76c\" , 30 ) \uac1d\uccb4 \uc18d\uc131 \uc811\uadfc \uac1d\uccb4\uc758 \uc18d\uc131\uc5d0 \uc810( . ) \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc811\uadfc\ud569\ub2c8\ub2e4. \uc608\uc81c : print ( p1 . name ) # \ucca0\uc218 print ( p2 . age ) # 30 \uac1d\uccb4 \uba54\uc11c\ub4dc \ud638\ucd9c \uc810( . ) \uc5f0\uc0b0\uc790\ub85c \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. \uc608\uc81c : p1 . greet () # \uc548\ub155\ud558\uc138\uc694, \uc800\ub294 \ucca0\uc218\uc774\uace0, \ub098\uc774\ub294 25\uc785\ub2c8\ub2e4. p2 . greet () # \uc548\ub155\ud558\uc138\uc694, \uc800\ub294 \uc601\ud76c\uc774\uace0, \ub098\uc774\ub294 30\uc785\ub2c8\ub2e4. 4. \ud074\ub798\uc2a4\uc758 \uad6c\uc131 \uc694\uc18c (1) \uc0dd\uc131\uc790 \uba54\uc11c\ub4dc ( __init__ ) \uac1d\uccb4\uac00 \uc0dd\uc131\ub420 \ub54c \ud638\ucd9c\ub418\uc5b4 \ucd08\uae30\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uc608\uc81c : class Dog : def __init__ ( self , name , breed ): self . name = name self . breed = breed my_dog = Dog ( \"\ubc14\ub451\uc774\" , \"\uc9c4\ub3d7\uac1c\" ) print ( my_dog . name ) # \ubc14\ub451\uc774 print ( my_dog . breed ) # \uc9c4\ub3d7\uac1c (2) \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218 \uac1d\uccb4\ub9c8\ub2e4 \uace0\uc720\ud55c \uac12\uc744 \uac00\uc9c0\ub294 \ubcc0\uc218. self \ub97c \ud1b5\ud574 \uc815\uc758\ud569\ub2c8\ub2e4. (3) \ud074\ub798\uc2a4 \ubcc0\uc218 \ubaa8\ub4e0 \uac1d\uccb4\uac00 \uacf5\uc720\ud558\ub294 \ubcc0\uc218. \ud074\ub798\uc2a4 \uc774\ub984\uc73c\ub85c \uc811\uadfc\ud569\ub2c8\ub2e4. \uc608\uc81c : class Counter : count = 0 # \ud074\ub798\uc2a4 \ubcc0\uc218 def __init__ ( self ): Counter . count += 1 c1 = Counter () c2 = Counter () print ( Counter . count ) # 2 (4) \uba54\uc11c\ub4dc \uac1d\uccb4\uac00 \uc218\ud589\ud560 \uc218 \uc788\ub294 \ub3d9\uc791\uc744 \uc815\uc758\ud55c \ud568\uc218. self \ub97c \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\uc5ec \uac1d\uccb4\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4. (5) \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc ( @classmethod ) \ud074\ub798\uc2a4 \ubcc0\uc218\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 \uc0ac\uc6a9. \ud074\ub798\uc2a4 \uc790\uccb4\ub97c \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc2b5\ub2c8\ub2e4. \uc608\uc81c : class MyClass : count = 0 @classmethod def increment ( cls ): cls . count += 1 MyClass . increment () print ( MyClass . count ) # 1 (6) \uc815\uc801 \uba54\uc11c\ub4dc ( @staticmethod ) \ud074\ub798\uc2a4\uc640 \uac1d\uccb4\uc640 \uad00\ub828 \uc5c6\uc774 \ub3d9\uc791\ud558\ub294 \uba54\uc11c\ub4dc. \uc608\uc81c : class Math : @staticmethod def add ( a , b ): return a + b print ( Math . add ( 3 , 5 )) # 8 5. \uc0c1\uc18d (Inheritance) \uc0c1\uc18d\uc758 \uac1c\ub150 \uae30\uc874 \ud074\ub798\uc2a4\ub97c \uae30\ubc18\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ud074\ub798\uc2a4\ub97c \uc815\uc758. \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uace0, \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870\ub97c \ud615\uc131. \uae30\ubcf8 \uad6c\ubb38 class \ubd80\ubaa8\ud074\ub798\uc2a4 : ... class \uc790\uc2dd\ud074\ub798\uc2a4 ( \ubd80\ubaa8\ud074\ub798\uc2a4 ): ... \uc608\uc81c class Animal : def __init__ ( self , name ): self . name = name def speak ( self ): print ( \"\uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.\" ) class Dog ( Animal ): def speak ( self ): # \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529 print ( f \" { self . name } \uac00 \uba4d\uba4d \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.\" ) dog = Dog ( \"\ubc14\ub451\uc774\" ) dog . speak () # \ubc14\ub451\uc774\uac00 \uba4d\uba4d \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4. 6. \ub2e4\ud615\uc131 (Polymorphism) \uac1c\ub150 \uac19\uc740 \uba54\uc11c\ub4dc \uc774\ub984\uc774\uc9c0\ub9cc, \ud074\ub798\uc2a4\uc5d0 \ub530\ub77c \ub2e4\ub974\uac8c \ub3d9\uc791. \uc608\uc81c : class Cat ( Animal ): def speak ( self ): print ( f \" { self . name } \uac00 \uc57c\uc639 \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.\" ) animals = [ Dog ( \"\ubc14\ub451\uc774\" ), Cat ( \"\ub098\ube44\" )] for animal in animals : animal . speak () # \ubc14\ub451\uc774\uac00 \uba4d\uba4d \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4. # \ub098\ube44\uac00 \uc57c\uc639 \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4. 7. \ud2b9\uc218 \uba54\uc11c\ub4dc (Magic Methods) \uc8fc\uc694 \ud2b9\uc218 \uba54\uc11c\ub4dc __str__ : \uac1d\uccb4\uc758 \ubb38\uc790\uc5f4 \ud45c\ud604 \uc815\uc758. __repr__ : \uac1d\uccb4\uc758 \uac1c\ubc1c\uc790\uc6a9 \ubb38\uc790\uc5f4 \ud45c\ud604 \uc815\uc758. __add__ : \uac1d\uccb4 \uac04 \ub367\uc148 \uc5f0\uc0b0 \uc815\uc758. \uc608\uc81c : class Vector : def __init__ ( self , x , y ): self . x = x self . y = y def __add__ ( self , other ): return Vector ( self . x + other . x , self . y + other . y ) def __str__ ( self ): return f \"Vector( { self . x } , { self . y } )\" v1 = Vector ( 2 , 3 ) v2 = Vector ( 4 , 5 ) v3 = v1 + v2 print ( v3 ) # Vector(6, 8) 8. \ub370\uc774\ud130 \ucea1\uc290\ud654\uc640 \uc811\uadfc \uc81c\ud55c \ucea1\uc290\ud654 \uac1d\uccb4\uc758 \ub0b4\ubd80 \ub370\uc774\ud130\ub97c \ubcf4\ud638\ud558\uace0, \uc678\ubd80 \uc811\uadfc\uc744 \uc81c\ud55c. \uc811\uadfc \uc81c\ud55c\uc790 \uacf5\uac1c (Public) : \ubaa8\ub4e0 \uacf3\uc5d0\uc11c \uc811\uadfc \uac00\ub2a5. (\uae30\ubcf8) \ube44\uacf5\uac1c (Private) : \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5. \ubcc0\uc218 \uc774\ub984 \uc55e\uc5d0 __ \uc0ac\uc6a9. \uc608\uc81c : class BankAccount : def __init__ ( self , balance ): self . __balance = balance # \ube44\uacf5\uac1c \ubcc0\uc218 def deposit ( self , amount ): self . __balance += amount def get_balance ( self ): return self . __balance account = BankAccount ( 1000 ) account . deposit ( 500 ) print ( account . get_balance ()) # 1500 # print(account.__balance) # AttributeError 9. \ud074\ub798\uc2a4 \ud65c\uc6a9 \uc608\uc81c \uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4 class Calculator : def __init__ ( self ): self . result = 0 def add ( self , value ): self . result += value def subtract ( self , value ): self . result -= value def multiply ( self , value ): self . result *= value def divide ( self , value ): if value != 0 : self . result /= value else : print ( \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) def clear ( self ): self . result = 0 calc = Calculator () calc . add ( 10 ) calc . multiply ( 2 ) print ( calc . result ) # 20 \uc694\uc57d **\ud074\ub798\uc2a4**\ub294 \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \ud15c\ud50c\ub9bf. **\uc0dd\uc131\uc790 \uba54\uc11c\ub4dc ( __init__ )**\ub85c \uac1d\uccb4 \ucd08\uae30\ud654. **\uc18d\uc131**\uc740 \uac1d\uccb4\uc758 \ub370\uc774\ud130, **\uba54\uc11c\ub4dc**\ub294 \uac1d\uccb4\uc758 \ub3d9\uc791. **\uc0c1\uc18d**\uacfc **\ub2e4\ud615\uc131**\uc73c\ub85c \uac1d\uccb4 \uac04 \uad00\uacc4\ub97c \ud615\uc131. **\ud2b9\uc218 \uba54\uc11c\ub4dc**\ub85c \uc5f0\uc0b0\uc790 \ub3d9\uc791 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 \uac00\ub2a5. **\ucea1\uc290\ud654**\ub85c \ub370\uc774\ud130\ub97c \ubcf4\ud638\ud558\uace0 \uad00\ub9ac. \ud074\ub798\uc2a4\ub97c \uc798 \ud65c\uc6a9\ud558\uba74 \ubcf5\uc7a1\ud55c \ud504\ub85c\uadf8\ub7a8\ub3c4 \ub17c\ub9ac\uc801\uc73c\ub85c \uad6c\uc870\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4! \ud83d\ude0a","title":"2.6 \ud074\ub798\uc2a4"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#class","text":"\ud074\ub798\uc2a4(Class) \ub294 \uac1d\uccb4 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d(OOP, Object-Oriented Programming)\uc758 \uae30\ubcf8 \ub2e8\uc704\ub85c, \ub370\uc774\ud130\uc640 \ud574\ub2f9 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \uba54\uc11c\ub4dc(\ud568\uc218)\ub97c \ud568\uaed8 \uc815\uc758\ud558\ub294 \uad6c\uc870\uc785\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uba74 \ud504\ub85c\uadf8\ub7a8\uc744 \ub17c\ub9ac\uc801\uc73c\ub85c \uad6c\uc870\ud654\ud558\uace0 \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud30c\uc774\uc36c \ud074\ub798\uc2a4 (Class): \uac1c\ub150 \ubc0f \uc0ac\uc6a9\ubc95"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#1","text":"\ud074\ub798\uc2a4(Class) : \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uccad\uc0ac\uc9c4(\ud15c\ud50c\ub9bf)\uc785\ub2c8\ub2e4. \uac1d\uccb4(Object) : \ud074\ub798\uc2a4\uc5d0\uc11c \uc0dd\uc131\ub41c \uc778\uc2a4\ud134\uc2a4(instance)\uc785\ub2c8\ub2e4. \uc18d\uc131(Attribute) : \uac1d\uccb4\uc758 \ub370\uc774\ud130(\ubcc0\uc218)\uc785\ub2c8\ub2e4. \uba54\uc11c\ub4dc(Method) : \uac1d\uccb4\uac00 \uc218\ud589\ud560 \uc218 \uc788\ub294 \ub3d9\uc791(\ud568\uc218)\uc785\ub2c8\ub2e4.","title":"1. \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uac1c\ub150"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#2","text":"class \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud074\ub798\uc2a4\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uad6c\ubb38 : class \ud074\ub798\uc2a4\uc774\ub984 : \ud074\ub798\uc2a4 \ubcc0\uc218 \uba54\uc11c\ub4dc \uc608\uc81c : class Person : def __init__ ( self , name , age ): # \uc0dd\uc131\uc790 \uba54\uc11c\ub4dc self . name = name self . age = age def greet ( self ): # \uba54\uc11c\ub4dc print ( f \"\uc548\ub155\ud558\uc138\uc694, \uc800\ub294 { self . name } \uc774\uace0, \ub098\uc774\ub294 { self . age } \uc785\ub2c8\ub2e4.\" )","title":"2. \ud074\ub798\uc2a4 \uc815\uc758"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#3","text":"","title":"3. \uac1d\uccb4 \uc0dd\uc131 \ubc0f \uc0ac\uc6a9"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_1","text":"\ud074\ub798\uc2a4\ub97c \ud638\ucd9c\ud558\uc5ec \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608\uc81c : p1 = Person ( \"\ucca0\uc218\" , 25 ) p2 = Person ( \"\uc601\ud76c\" , 30 )","title":"\uac1d\uccb4 \uc0dd\uc131"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_2","text":"\uac1d\uccb4\uc758 \uc18d\uc131\uc5d0 \uc810( . ) \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc811\uadfc\ud569\ub2c8\ub2e4. \uc608\uc81c : print ( p1 . name ) # \ucca0\uc218 print ( p2 . age ) # 30","title":"\uac1d\uccb4 \uc18d\uc131 \uc811\uadfc"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_3","text":"\uc810( . ) \uc5f0\uc0b0\uc790\ub85c \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. \uc608\uc81c : p1 . greet () # \uc548\ub155\ud558\uc138\uc694, \uc800\ub294 \ucca0\uc218\uc774\uace0, \ub098\uc774\ub294 25\uc785\ub2c8\ub2e4. p2 . greet () # \uc548\ub155\ud558\uc138\uc694, \uc800\ub294 \uc601\ud76c\uc774\uace0, \ub098\uc774\ub294 30\uc785\ub2c8\ub2e4.","title":"\uac1d\uccb4 \uba54\uc11c\ub4dc \ud638\ucd9c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#4","text":"","title":"4. \ud074\ub798\uc2a4\uc758 \uad6c\uc131 \uc694\uc18c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#1-__init__","text":"\uac1d\uccb4\uac00 \uc0dd\uc131\ub420 \ub54c \ud638\ucd9c\ub418\uc5b4 \ucd08\uae30\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uc608\uc81c : class Dog : def __init__ ( self , name , breed ): self . name = name self . breed = breed my_dog = Dog ( \"\ubc14\ub451\uc774\" , \"\uc9c4\ub3d7\uac1c\" ) print ( my_dog . name ) # \ubc14\ub451\uc774 print ( my_dog . breed ) # \uc9c4\ub3d7\uac1c","title":"(1) \uc0dd\uc131\uc790 \uba54\uc11c\ub4dc (__init__)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#2_1","text":"\uac1d\uccb4\ub9c8\ub2e4 \uace0\uc720\ud55c \uac12\uc744 \uac00\uc9c0\ub294 \ubcc0\uc218. self \ub97c \ud1b5\ud574 \uc815\uc758\ud569\ub2c8\ub2e4.","title":"(2) \uc778\uc2a4\ud134\uc2a4 \ubcc0\uc218"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#3_1","text":"\ubaa8\ub4e0 \uac1d\uccb4\uac00 \uacf5\uc720\ud558\ub294 \ubcc0\uc218. \ud074\ub798\uc2a4 \uc774\ub984\uc73c\ub85c \uc811\uadfc\ud569\ub2c8\ub2e4. \uc608\uc81c : class Counter : count = 0 # \ud074\ub798\uc2a4 \ubcc0\uc218 def __init__ ( self ): Counter . count += 1 c1 = Counter () c2 = Counter () print ( Counter . count ) # 2","title":"(3) \ud074\ub798\uc2a4 \ubcc0\uc218"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#4_1","text":"\uac1d\uccb4\uac00 \uc218\ud589\ud560 \uc218 \uc788\ub294 \ub3d9\uc791\uc744 \uc815\uc758\ud55c \ud568\uc218. self \ub97c \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\uc5ec \uac1d\uccb4\ub97c \ucc38\uc870\ud569\ub2c8\ub2e4.","title":"(4) \uba54\uc11c\ub4dc"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#5-classmethod","text":"\ud074\ub798\uc2a4 \ubcc0\uc218\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 \uc0ac\uc6a9. \ud074\ub798\uc2a4 \uc790\uccb4\ub97c \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc2b5\ub2c8\ub2e4. \uc608\uc81c : class MyClass : count = 0 @classmethod def increment ( cls ): cls . count += 1 MyClass . increment () print ( MyClass . count ) # 1","title":"(5) \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc (@classmethod)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#6-staticmethod","text":"\ud074\ub798\uc2a4\uc640 \uac1d\uccb4\uc640 \uad00\ub828 \uc5c6\uc774 \ub3d9\uc791\ud558\ub294 \uba54\uc11c\ub4dc. \uc608\uc81c : class Math : @staticmethod def add ( a , b ): return a + b print ( Math . add ( 3 , 5 )) # 8","title":"(6) \uc815\uc801 \uba54\uc11c\ub4dc (@staticmethod)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#5-inheritance","text":"","title":"5. \uc0c1\uc18d (Inheritance)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_4","text":"\uae30\uc874 \ud074\ub798\uc2a4\ub97c \uae30\ubc18\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ud074\ub798\uc2a4\ub97c \uc815\uc758. \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub192\uc774\uace0, \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870\ub97c \ud615\uc131.","title":"\uc0c1\uc18d\uc758 \uac1c\ub150"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_5","text":"class \ubd80\ubaa8\ud074\ub798\uc2a4 : ... class \uc790\uc2dd\ud074\ub798\uc2a4 ( \ubd80\ubaa8\ud074\ub798\uc2a4 ): ...","title":"\uae30\ubcf8 \uad6c\ubb38"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_6","text":"class Animal : def __init__ ( self , name ): self . name = name def speak ( self ): print ( \"\uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.\" ) class Dog ( Animal ): def speak ( self ): # \uba54\uc11c\ub4dc \uc624\ubc84\ub77c\uc774\ub529 print ( f \" { self . name } \uac00 \uba4d\uba4d \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.\" ) dog = Dog ( \"\ubc14\ub451\uc774\" ) dog . speak () # \ubc14\ub451\uc774\uac00 \uba4d\uba4d \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.","title":"\uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#6-polymorphism","text":"","title":"6. \ub2e4\ud615\uc131 (Polymorphism)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_7","text":"\uac19\uc740 \uba54\uc11c\ub4dc \uc774\ub984\uc774\uc9c0\ub9cc, \ud074\ub798\uc2a4\uc5d0 \ub530\ub77c \ub2e4\ub974\uac8c \ub3d9\uc791. \uc608\uc81c : class Cat ( Animal ): def speak ( self ): print ( f \" { self . name } \uac00 \uc57c\uc639 \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.\" ) animals = [ Dog ( \"\ubc14\ub451\uc774\" ), Cat ( \"\ub098\ube44\" )] for animal in animals : animal . speak () # \ubc14\ub451\uc774\uac00 \uba4d\uba4d \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4. # \ub098\ube44\uac00 \uc57c\uc639 \uc18c\ub9ac\ub97c \ub0c5\ub2c8\ub2e4.","title":"\uac1c\ub150"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#7-magic-methods","text":"","title":"7. \ud2b9\uc218 \uba54\uc11c\ub4dc (Magic Methods)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_8","text":"__str__ : \uac1d\uccb4\uc758 \ubb38\uc790\uc5f4 \ud45c\ud604 \uc815\uc758. __repr__ : \uac1d\uccb4\uc758 \uac1c\ubc1c\uc790\uc6a9 \ubb38\uc790\uc5f4 \ud45c\ud604 \uc815\uc758. __add__ : \uac1d\uccb4 \uac04 \ub367\uc148 \uc5f0\uc0b0 \uc815\uc758. \uc608\uc81c : class Vector : def __init__ ( self , x , y ): self . x = x self . y = y def __add__ ( self , other ): return Vector ( self . x + other . x , self . y + other . y ) def __str__ ( self ): return f \"Vector( { self . x } , { self . y } )\" v1 = Vector ( 2 , 3 ) v2 = Vector ( 4 , 5 ) v3 = v1 + v2 print ( v3 ) # Vector(6, 8)","title":"\uc8fc\uc694 \ud2b9\uc218 \uba54\uc11c\ub4dc"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#8","text":"","title":"8. \ub370\uc774\ud130 \ucea1\uc290\ud654\uc640 \uc811\uadfc \uc81c\ud55c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_9","text":"\uac1d\uccb4\uc758 \ub0b4\ubd80 \ub370\uc774\ud130\ub97c \ubcf4\ud638\ud558\uace0, \uc678\ubd80 \uc811\uadfc\uc744 \uc81c\ud55c.","title":"\ucea1\uc290\ud654"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_10","text":"\uacf5\uac1c (Public) : \ubaa8\ub4e0 \uacf3\uc5d0\uc11c \uc811\uadfc \uac00\ub2a5. (\uae30\ubcf8) \ube44\uacf5\uac1c (Private) : \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5. \ubcc0\uc218 \uc774\ub984 \uc55e\uc5d0 __ \uc0ac\uc6a9. \uc608\uc81c : class BankAccount : def __init__ ( self , balance ): self . __balance = balance # \ube44\uacf5\uac1c \ubcc0\uc218 def deposit ( self , amount ): self . __balance += amount def get_balance ( self ): return self . __balance account = BankAccount ( 1000 ) account . deposit ( 500 ) print ( account . get_balance ()) # 1500 # print(account.__balance) # AttributeError","title":"\uc811\uadfc \uc81c\ud55c\uc790"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#9","text":"","title":"9. \ud074\ub798\uc2a4 \ud65c\uc6a9 \uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_11","text":"class Calculator : def __init__ ( self ): self . result = 0 def add ( self , value ): self . result += value def subtract ( self , value ): self . result -= value def multiply ( self , value ): self . result *= value def divide ( self , value ): if value != 0 : self . result /= value else : print ( \"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) def clear ( self ): self . result = 0 calc = Calculator () calc . add ( 10 ) calc . multiply ( 2 ) print ( calc . result ) # 20","title":"\uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%81%B4%EB%9E%98%EC%8A%A4/#_12","text":"**\ud074\ub798\uc2a4**\ub294 \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \ud15c\ud50c\ub9bf. **\uc0dd\uc131\uc790 \uba54\uc11c\ub4dc ( __init__ )**\ub85c \uac1d\uccb4 \ucd08\uae30\ud654. **\uc18d\uc131**\uc740 \uac1d\uccb4\uc758 \ub370\uc774\ud130, **\uba54\uc11c\ub4dc**\ub294 \uac1d\uccb4\uc758 \ub3d9\uc791. **\uc0c1\uc18d**\uacfc **\ub2e4\ud615\uc131**\uc73c\ub85c \uac1d\uccb4 \uac04 \uad00\uacc4\ub97c \ud615\uc131. **\ud2b9\uc218 \uba54\uc11c\ub4dc**\ub85c \uc5f0\uc0b0\uc790 \ub3d9\uc791 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 \uac00\ub2a5. **\ucea1\uc290\ud654**\ub85c \ub370\uc774\ud130\ub97c \ubcf4\ud638\ud558\uace0 \uad00\ub9ac. \ud074\ub798\uc2a4\ub97c \uc798 \ud65c\uc6a9\ud558\uba74 \ubcf5\uc7a1\ud55c \ud504\ub85c\uadf8\ub7a8\ub3c4 \ub17c\ub9ac\uc801\uc73c\ub85c \uad6c\uc870\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4! \ud83d\ude0a","title":"\uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%86%8C%EA%B0%9C/","text":"\ud30c\uc774\uc36c \uc18c\uac1c \ud30c\uc774\uc36c(Python)\uc740 **1980\ub144\ub300 \ud6c4\ubc18**\uc5d0 \uad6c\uc774\ub3c4 \ubc18 \ub85c\uc12c(Guido van Rossum)\uc774 \uac1c\ubc1c\uc744 \uc2dc\uc791\ud574 **1991\ub144**\uc5d0 \ucc98\uc74c \uacf5\uac1c\ub41c \uace0\uc218\uc900\uc758 \ubc94\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc785\ub2c8\ub2e4. \uc27d\uace0 \uc9c1\uad00\uc801\uc778 \ubb38\ubc95, \uac15\ub825\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0dd\ud0dc\uacc4, \ub2e4\uc591\ud55c \uc751\uc6a9 \ubd84\uc57c\uc5d0\uc11c \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc8fc\uc694 \ud2b9\uc9d5 \uc26c\uc6b4 \ubb38\ubc95 \uc601\uc5b4\uc640 \uc720\uc0ac\ud55c \uac04\uacb0\ud55c \ubb38\ubc95\uc73c\ub85c \ucd08\ubcf4\uc790\ub3c4 \uc27d\uac8c \ubc30\uc6b8 \uc218 \uc788\uc74c. \ucf54\ub4dc \uac00\ub3c5\uc131\uc774 \ub192\uc544 \ud611\uc5c5\uc774\ub098 \uc720\uc9c0\ubcf4\uc218\uc5d0 \uc801\ud569. # \ub450 \uc22b\uc790\ub97c \ub354\ud558\ub294 \uac04\ub2e8\ud55c \ucf54\ub4dc a = 5 b = 3 print ( a + b ) # \ucd9c\ub825: 8 \uc778\ud130\ud504\ub9ac\ud130 \uc5b8\uc5b4 \ucf54\ub4dc \uc2e4\ud589 \uc2dc \ucef4\ud30c\uc77c \uacfc\uc815 \uc5c6\uc774 \ubc14\ub85c \uc2e4\ud589\ub418\ubbc0\ub85c \ube60\ub978 \ud14c\uc2a4\ud2b8\uc640 \uac1c\ubc1c \uac00\ub2a5. \ub300\ud654\ud615 \ud658\uacbd(Interactive Shell) \uc81c\uacf5. \uba40\ud2f0 \ud328\ub7ec\ub2e4\uc784 \uc9c0\uc6d0 \uac1d\uccb4\uc9c0\ud5a5, \uc808\ucc28\uc801 \ud504\ub85c\uadf8\ub798\ubc0d, \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ub4f1\uc744 \uc9c0\uc6d0. \uad11\ubc94\uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ub370\uc774\ud130 \uacfc\ud559: NumPy , Pandas , Matplotlib \uc6f9 \uac1c\ubc1c: Django , Flask \uc778\uacf5\uc9c0\ub2a5: TensorFlow , PyTorch \uc790\ub3d9\ud654: Selenium , BeautifulSoup \ud50c\ub7ab\ud3fc \ub3c5\ub9bd\uc801 Windows, macOS, Linux \ub4f1 \ub2e4\uc591\ud55c \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ub3d9\uc77c\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589 \uac00\ub2a5. \ucee4\ubba4\ub2c8\ud2f0 \ubc0f \uc0dd\ud0dc\uacc4 \ud48d\ubd80\ud55c \ubb38\uc11c\uc640 \ud29c\ud1a0\ub9ac\uc5bc, \ud65c\ubc1c\ud55c \uac1c\ubc1c\uc790 \ucee4\ubba4\ub2c8\ud2f0 \uc9c0\uc6d0. \uc0ac\uc6a9 \ubd84\uc57c \uc6f9 \uac1c\ubc1c Django, Flask\uc640 \uac19\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud574 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c \uac00\ub2a5. \ub370\uc774\ud130 \uacfc\ud559 \ubc0f \uba38\uc2e0\ub7ec\ub2dd \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uace0 \uc2dc\uac01\ud654\ud558\uba70, \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \ub370 \uc0ac\uc6a9. \uc2a4\ud06c\ub9bd\ud305 \ubc0f \uc790\ub3d9\ud654 \ubc18\ubcf5 \uc791\uc5c5\uc774\ub098 \uc2dc\uc2a4\ud15c \uad00\ub9ac \uc791\uc5c5\uc744 \uc790\ub3d9\ud654. \uac8c\uc784 \uac1c\ubc1c Pygame \uac19\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uac04\ub2e8\ud55c \uac8c\uc784 \uc81c\uc791. IoT \ubc0f \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc5b4 \ub77c\uc988\ubca0\ub9ac\ud30c\uc774, \uc544\ub450\uc774\ub178\uc640 \uac19\uc740 \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc81c\uc5b4\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8 \uc791\uc131. \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \ub370\uc2a4\ud06c\ud1b1 \uc560\ud50c\ub9ac\ucf00\uc774\uc158, CLI \ub3c4\uad6c \ub4f1 \ub2e4\uc591\ud55c \ud504\ub85c\uadf8\ub7a8 \uac1c\ubc1c \uac00\ub2a5. \ud30c\uc774\uc36c\uc758 \ub2e8\uc810 \uc18d\ub3c4 C/C++ \uac19\uc740 \uc800\uc218\uc900 \uc5b8\uc5b4\ubcf4\ub2e4 \ub290\ub9bc. \ud558\uc9c0\ub9cc, \uc18d\ub3c4\uac00 \uc911\uc694\ud55c \uacbd\uc6b0\uc5d4 C \ud655\uc7a5( Cython )\uc774\ub098 JIT \ucef4\ud30c\uc77c\ub7ec( PyPy )\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c. \ubaa8\ubc14\uc77c \uac1c\ubc1c\uc758 \ud55c\uacc4 \ubaa8\ubc14\uc77c \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c\uc5d0\uc11c \uc8fc\ub958 \uc5b8\uc5b4\ub85c \uc0ac\uc6a9\ub418\uc9c0\ub294 \uc54a\uc74c. \ub3d9\uc801 \ud0c0\uc774\ud551 \ucf54\ub4dc \uc791\uc131\uc774 \uc720\uc5f0\ud558\uc9c0\ub9cc, \ud0c0\uc785 \uad00\ub828 \uc624\ub958\ub97c \uc2e4\ud589 \uc2dc\uc810\uc5d0\uc11c\uc57c \ubc1c\uacac\ud560 \uc218 \uc788\uc74c. \ud30c\uc774\uc36c \uc2dc\uc791\ud558\uae30 \uc124\uce58 Python \uacf5\uc2dd \uc6f9\uc0ac\uc774\ud2b8 \uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \uac00\ub2a5. \ub300\ubd80\ubd84\uc758 Linux \ubc0f macOS\uc5d0\ub294 \uae30\ubcf8 \uc124\uce58\ub418\uc5b4 \uc788\uc74c. \ud544\uc218 \ub3c4\uad6c \ud1b5\ud569 \uac1c\ubc1c \ud658\uacbd(IDE): PyCharm, VS Code, Jupyter Notebook \ud328\ud0a4\uc9c0 \uad00\ub9ac \ub3c4\uad6c: pip (Python Package Index) Hello World! print ( \"Hello, World!\" ) \ud30c\uc774\uc36c\uc740 \ubc30\uc6b0\uae30 \uc27d\uace0 \uac15\ub825\ud558\uba70 \ub2e4\uc591\ud55c \ubd84\uc57c\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294 \uc5b8\uc5b4\ub85c, \ucd08\ubcf4\uc790\ubd80\ud130 \uc804\ubb38\uac00\uae4c\uc9c0 \ubaa8\ub450\uc5d0\uac8c \uc0ac\ub791\ubc1b\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude0a","title":"2.1 \ud30c\uc774\uc36c\uc18c\uac1c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%86%8C%EA%B0%9C/#_1","text":"\ud30c\uc774\uc36c(Python)\uc740 **1980\ub144\ub300 \ud6c4\ubc18**\uc5d0 \uad6c\uc774\ub3c4 \ubc18 \ub85c\uc12c(Guido van Rossum)\uc774 \uac1c\ubc1c\uc744 \uc2dc\uc791\ud574 **1991\ub144**\uc5d0 \ucc98\uc74c \uacf5\uac1c\ub41c \uace0\uc218\uc900\uc758 \ubc94\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc785\ub2c8\ub2e4. \uc27d\uace0 \uc9c1\uad00\uc801\uc778 \ubb38\ubc95, \uac15\ub825\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0dd\ud0dc\uacc4, \ub2e4\uc591\ud55c \uc751\uc6a9 \ubd84\uc57c\uc5d0\uc11c \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"\ud30c\uc774\uc36c \uc18c\uac1c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%86%8C%EA%B0%9C/#_2","text":"\uc26c\uc6b4 \ubb38\ubc95 \uc601\uc5b4\uc640 \uc720\uc0ac\ud55c \uac04\uacb0\ud55c \ubb38\ubc95\uc73c\ub85c \ucd08\ubcf4\uc790\ub3c4 \uc27d\uac8c \ubc30\uc6b8 \uc218 \uc788\uc74c. \ucf54\ub4dc \uac00\ub3c5\uc131\uc774 \ub192\uc544 \ud611\uc5c5\uc774\ub098 \uc720\uc9c0\ubcf4\uc218\uc5d0 \uc801\ud569. # \ub450 \uc22b\uc790\ub97c \ub354\ud558\ub294 \uac04\ub2e8\ud55c \ucf54\ub4dc a = 5 b = 3 print ( a + b ) # \ucd9c\ub825: 8 \uc778\ud130\ud504\ub9ac\ud130 \uc5b8\uc5b4 \ucf54\ub4dc \uc2e4\ud589 \uc2dc \ucef4\ud30c\uc77c \uacfc\uc815 \uc5c6\uc774 \ubc14\ub85c \uc2e4\ud589\ub418\ubbc0\ub85c \ube60\ub978 \ud14c\uc2a4\ud2b8\uc640 \uac1c\ubc1c \uac00\ub2a5. \ub300\ud654\ud615 \ud658\uacbd(Interactive Shell) \uc81c\uacf5. \uba40\ud2f0 \ud328\ub7ec\ub2e4\uc784 \uc9c0\uc6d0 \uac1d\uccb4\uc9c0\ud5a5, \uc808\ucc28\uc801 \ud504\ub85c\uadf8\ub798\ubc0d, \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ub4f1\uc744 \uc9c0\uc6d0. \uad11\ubc94\uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ub370\uc774\ud130 \uacfc\ud559: NumPy , Pandas , Matplotlib \uc6f9 \uac1c\ubc1c: Django , Flask \uc778\uacf5\uc9c0\ub2a5: TensorFlow , PyTorch \uc790\ub3d9\ud654: Selenium , BeautifulSoup \ud50c\ub7ab\ud3fc \ub3c5\ub9bd\uc801 Windows, macOS, Linux \ub4f1 \ub2e4\uc591\ud55c \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ub3d9\uc77c\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589 \uac00\ub2a5. \ucee4\ubba4\ub2c8\ud2f0 \ubc0f \uc0dd\ud0dc\uacc4 \ud48d\ubd80\ud55c \ubb38\uc11c\uc640 \ud29c\ud1a0\ub9ac\uc5bc, \ud65c\ubc1c\ud55c \uac1c\ubc1c\uc790 \ucee4\ubba4\ub2c8\ud2f0 \uc9c0\uc6d0.","title":"\uc8fc\uc694 \ud2b9\uc9d5"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%86%8C%EA%B0%9C/#_3","text":"\uc6f9 \uac1c\ubc1c Django, Flask\uc640 \uac19\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud574 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c \uac00\ub2a5. \ub370\uc774\ud130 \uacfc\ud559 \ubc0f \uba38\uc2e0\ub7ec\ub2dd \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uace0 \uc2dc\uac01\ud654\ud558\uba70, \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \ub370 \uc0ac\uc6a9. \uc2a4\ud06c\ub9bd\ud305 \ubc0f \uc790\ub3d9\ud654 \ubc18\ubcf5 \uc791\uc5c5\uc774\ub098 \uc2dc\uc2a4\ud15c \uad00\ub9ac \uc791\uc5c5\uc744 \uc790\ub3d9\ud654. \uac8c\uc784 \uac1c\ubc1c Pygame \uac19\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uac04\ub2e8\ud55c \uac8c\uc784 \uc81c\uc791. IoT \ubc0f \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc5b4 \ub77c\uc988\ubca0\ub9ac\ud30c\uc774, \uc544\ub450\uc774\ub178\uc640 \uac19\uc740 \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc81c\uc5b4\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8 \uc791\uc131. \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \ub370\uc2a4\ud06c\ud1b1 \uc560\ud50c\ub9ac\ucf00\uc774\uc158, CLI \ub3c4\uad6c \ub4f1 \ub2e4\uc591\ud55c \ud504\ub85c\uadf8\ub7a8 \uac1c\ubc1c \uac00\ub2a5.","title":"\uc0ac\uc6a9 \ubd84\uc57c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%86%8C%EA%B0%9C/#_4","text":"\uc18d\ub3c4 C/C++ \uac19\uc740 \uc800\uc218\uc900 \uc5b8\uc5b4\ubcf4\ub2e4 \ub290\ub9bc. \ud558\uc9c0\ub9cc, \uc18d\ub3c4\uac00 \uc911\uc694\ud55c \uacbd\uc6b0\uc5d4 C \ud655\uc7a5( Cython )\uc774\ub098 JIT \ucef4\ud30c\uc77c\ub7ec( PyPy )\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c. \ubaa8\ubc14\uc77c \uac1c\ubc1c\uc758 \ud55c\uacc4 \ubaa8\ubc14\uc77c \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uac1c\ubc1c\uc5d0\uc11c \uc8fc\ub958 \uc5b8\uc5b4\ub85c \uc0ac\uc6a9\ub418\uc9c0\ub294 \uc54a\uc74c. \ub3d9\uc801 \ud0c0\uc774\ud551 \ucf54\ub4dc \uc791\uc131\uc774 \uc720\uc5f0\ud558\uc9c0\ub9cc, \ud0c0\uc785 \uad00\ub828 \uc624\ub958\ub97c \uc2e4\ud589 \uc2dc\uc810\uc5d0\uc11c\uc57c \ubc1c\uacac\ud560 \uc218 \uc788\uc74c.","title":"\ud30c\uc774\uc36c\uc758 \ub2e8\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%86%8C%EA%B0%9C/#_5","text":"\uc124\uce58 Python \uacf5\uc2dd \uc6f9\uc0ac\uc774\ud2b8 \uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \uac00\ub2a5. \ub300\ubd80\ubd84\uc758 Linux \ubc0f macOS\uc5d0\ub294 \uae30\ubcf8 \uc124\uce58\ub418\uc5b4 \uc788\uc74c. \ud544\uc218 \ub3c4\uad6c \ud1b5\ud569 \uac1c\ubc1c \ud658\uacbd(IDE): PyCharm, VS Code, Jupyter Notebook \ud328\ud0a4\uc9c0 \uad00\ub9ac \ub3c4\uad6c: pip (Python Package Index) Hello World! print ( \"Hello, World!\" ) \ud30c\uc774\uc36c\uc740 \ubc30\uc6b0\uae30 \uc27d\uace0 \uac15\ub825\ud558\uba70 \ub2e4\uc591\ud55c \ubd84\uc57c\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294 \uc5b8\uc5b4\ub85c, \ucd08\ubcf4\uc790\ubd80\ud130 \uc804\ubb38\uac00\uae4c\uc9c0 \ubaa8\ub450\uc5d0\uac8c \uc0ac\ub791\ubc1b\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude0a","title":"\ud30c\uc774\uc36c \uc2dc\uc791\ud558\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/","text":"\ud30c\uc774\uc36c \ud568\uc218: \uac1c\ub150 \ubc0f \uc0ac\uc6a9\ubc95 **\ud568\uc218(Function)**\ub294 \ucf54\ub4dc\ub97c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud558\ub3c4\ub85d \ubb36\uc740 \ucf54\ub4dc \ube14\ub85d\uc785\ub2c8\ub2e4. \ud568\uc218\ub294 \uc785\ub825\uac12\uc744 \ubc1b\uc544 \ucc98\ub9ac\ub97c \uc218\ud589\ud558\uace0, \uacb0\uacfc\ub97c \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ucf54\ub4dc\uc758 \uc911\ubcf5\uc744 \uc904\uc774\uace0, \uac00\ub3c5\uc131\uc744 \ub192\uc774\uba70, \uc720\uc9c0\ubcf4\uc218\ub97c \uc6a9\uc774\ud558\uac8c \ud569\ub2c8\ub2e4. 1. \ud568\uc218\uc758 \uae30\ubcf8 \uad6c\uc870 \ud30c\uc774\uc36c\uc5d0\uc11c \ud568\uc218\ub97c \uc815\uc758\ud558\ub824\uba74 def \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. def \ud568\uc218\uc774\ub984 ( \ub9e4\uac1c\ubcc0\uc218 ): \"\"\"(\uc120\ud0dd\uc801) \ud568\uc218\uc758 \uc124\uba85\"\"\" \uc2e4\ud589\ud560 \ucf54\ub4dc return \ubc18\ud658\uac12 # (\uc120\ud0dd\uc801) \uc608\uc81c: def greet ( name ): \"\"\"\uc0ac\uc6a9\uc790\ub97c \ud658\uc601\ud558\ub294 \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4.\"\"\" return f \"\uc548\ub155\ud558\uc138\uc694, { name } \ub2d8!\" print ( greet ( \"\ucca0\uc218\" )) # \uc548\ub155\ud558\uc138\uc694, \ucca0\uc218\ub2d8! 2. \ud568\uc218 \ud638\ucd9c \ud568\uc218\ub97c \uc815\uc758\ud55c \ud6c4, \ud568\uc218 \uc774\ub984\uacfc \ud568\uaed8 \ud544\uc694\ud55c \uc778\uc790\ub97c \uc804\ub2ec\ud558\uc5ec \ud638\ucd9c\ud569\ub2c8\ub2e4. \uc608\uc81c : def add ( a , b ): return a + b result = add ( 3 , 5 ) print ( result ) # 8 3. \ub9e4\uac1c\ubcc0\uc218\uc640 \uc778\uc790 (1) \uc704\uce58 \uc778\uc790 (Positional Arguments) \uc778\uc790\uc758 \uc21c\uc11c\uac00 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub9e4\uce6d\ub429\ub2c8\ub2e4. \uc608\uc81c : def multiply ( a , b ): return a * b print ( multiply ( 2 , 3 )) # 6 (2) \ud0a4\uc6cc\ub4dc \uc778\uc790 (Keyword Arguments) \uc778\uc790\uc758 \uc774\ub984\uc744 \uba85\uc2dc\ud558\uc5ec \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac12\uc744 \uc804\ub2ec. \uc21c\uc11c\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uc74c. \uc608\uc81c : def divide ( a , b ): return a / b print ( divide ( b = 2 , a = 10 )) # 5.0 (3) \uae30\ubcf8\uac12\uc774 \uc788\ub294 \ub9e4\uac1c\ubcc0\uc218 (Default Arguments) \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uae30\ubcf8\uac12\uc744 \uc124\uc815\ud558\uc5ec, \uac12\uc774 \uc804\ub2ec\ub418\uc9c0 \uc54a\uc73c\uba74 \uae30\ubcf8\uac12 \uc0ac\uc6a9. \uc608\uc81c : def greet ( name = \"\uc0ac\uc6a9\uc790\" ): return f \"\uc548\ub155\ud558\uc138\uc694, { name } \ub2d8!\" print ( greet ()) # \uc548\ub155\ud558\uc138\uc694, \uc0ac\uc6a9\uc790\ub2d8! print ( greet ( \"\ubbfc\uc218\" )) # \uc548\ub155\ud558\uc138\uc694, \ubbfc\uc218\ub2d8! (4) \uac00\ubcc0 \uc778\uc790 (Variable-Length Arguments) \ud568\uc218\uac00 \uc804\ub2ec\ubc1b\ub294 \uc778\uc790\uc758 \uac1c\uc218\ub97c \ubaa8\ub97c \ub54c \uc0ac\uc6a9. \uac00\ubcc0 \uc704\uce58 \uc778\uc790 ( *args ) \uc5ec\ub7ec \uac1c\uc758 \uc704\uce58 \uc778\uc790\ub97c \ud558\ub098\uc758 \ud29c\ud50c\ub85c \uc804\ub2ec. \uc608\uc81c : def total_sum ( * args ): return sum ( args ) print ( total_sum ( 1 , 2 , 3 , 4 )) # 10 \uac00\ubcc0 \ud0a4\uc6cc\ub4dc \uc778\uc790 ( **kwargs ) \uc5ec\ub7ec \uac1c\uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub97c \ud558\ub098\uc758 \ub515\uc154\ub108\ub9ac\ub85c \uc804\ub2ec. \uc608\uc81c : def display_info ( ** kwargs ): for key , value in kwargs . items (): print ( f \" { key } : { value } \" ) display_info ( name = \"Alice\" , age = 25 , city = \"Seoul\" ) # name: Alice # age: 25 # city: Seoul 4. \ud568\uc218 \ubc18\ud658\uac12 (1) \ub2e8\uc77c \uac12 \ubc18\ud658 return \ud0a4\uc6cc\ub4dc\ub85c \uac12 \ubc18\ud658. \uc608\uc81c : def square ( x ): return x * x print ( square ( 5 )) # 25 (2) \uc5ec\ub7ec \uac12 \ubc18\ud658 \ud29c\ud50c\ub85c \uc5ec\ub7ec \uac12\uc744 \ubc18\ud658. \uc608\uc81c : def calculate ( a , b ): return a + b , a - b result = calculate ( 5 , 3 ) print ( result ) # (8, 2) 5. \ub78c\ub2e4 \ud568\uc218 (Lambda Function) \uac04\ub2e8\ud55c \ud568\uc218\ub97c \ud55c \uc904\ub85c \uc815\uc758\ud560 \ub54c \uc0ac\uc6a9. \uad6c\ubb38 \ud615\uc2dd : lambda \ub9e4\uac1c\ubcc0\uc218 : \ud45c\ud604\uc2dd \uc608\uc81c : square = lambda x : x * x print ( square ( 4 )) # 16 \ud568\uc218\uc758 \uc778\uc790\ub85c \uc0ac\uc6a9 \uac00\ub2a5: numbers = [ 1 , 2 , 3 , 4 , 5 ] squares = list ( map ( lambda x : x * x , numbers )) print ( squares ) # [1, 4, 9, 16, 25] 6. \ud568\uc218 \uc2a4\ucf54\ud504 (1) \uc9c0\uc5ed \ubcc0\uc218 (Local Variable) \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub294 \ud574\ub2f9 \ud568\uc218 \ub0b4\uc5d0\uc11c\ub9cc \uc0ac\uc6a9 \uac00\ub2a5. \uc608\uc81c : def my_function (): x = 10 print ( x ) # 10 my_function () # print(x) # NameError: x is not defined (2) \uc804\uc5ed \ubcc0\uc218 (Global Variable) \ud568\uc218 \uc678\ubd80\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub294 \ubaa8\ub4e0 \ud568\uc218\uc5d0\uc11c \uc811\uadfc \uac00\ub2a5. \uc608\uc81c : x = 10 def my_function (): print ( x ) # 10 my_function () (3) global \ud0a4\uc6cc\ub4dc \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc804\uc5ed \ubcc0\uc218\ub97c \uc218\uc815\ud558\ub824\uba74 global \ud0a4\uc6cc\ub4dc \uc0ac\uc6a9. \uc608\uc81c : x = 10 def update_global (): global x x = 20 update_global () print ( x ) # 20 (4) nonlocal \ud0a4\uc6cc\ub4dc \uc911\ucca9 \ud568\uc218\uc5d0\uc11c \uc0c1\uc704 \ud568\uc218\uc758 \ubcc0\uc218\ub97c \uc218\uc815\ud558\ub824\uba74 nonlocal \ud0a4\uc6cc\ub4dc \uc0ac\uc6a9. \uc608\uc81c : def outer_function (): x = 10 def inner_function (): nonlocal x x = 20 inner_function () print ( x ) # 20 outer_function () 7. \uc7ac\uadc0 \ud568\uc218 (Recursive Function) \ud568\uc218\uac00 \uc790\uae30 \uc790\uc2e0\uc744 \ud638\ucd9c\ud558\ub294 \ud568\uc218. \uc885\ub8cc \uc870\uac74\uc744 \ubc18\ub4dc\uc2dc \ud3ec\ud568\ud574\uc57c \ud568. \uc608\uc81c : \ud329\ud1a0\ub9ac\uc5bc \uacc4\uc0b0 def factorial ( n ): if n == 1 : return 1 return n * factorial ( n - 1 ) print ( factorial ( 5 )) # 120 8. \ud568\uc218 \ub370\ucf54\ub808\uc774\ud130 \ud568\uc218\uc758 \ub3d9\uc791\uc744 \ud655\uc7a5\ud558\uac70\ub098 \uc218\uc815\ud560 \ub54c \uc0ac\uc6a9. \uad6c\ubb38 \ud615\uc2dd : @\ub370\ucf54\ub808\uc774\ud130_\uc774\ub984 def \ud568\uc218\uc774\ub984 (): \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : def decorator ( func ): def wrapper (): print ( \"\ud568\uc218 \uc2e4\ud589 \uc804\" ) func () print ( \"\ud568\uc218 \uc2e4\ud589 \ud6c4\" ) return wrapper @decorator def say_hello (): print ( \"Hello!\" ) say_hello () # \ud568\uc218 \uc2e4\ud589 \uc804 # Hello! # \ud568\uc218 \uc2e4\ud589 \ud6c4 \uc694\uc57d \ud568\uc218 \uc815\uc758 \ubc0f \ud638\ucd9c : def \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc815\uc758, \ud568\uc218 \uc774\ub984\uc73c\ub85c \ud638\ucd9c. \ub9e4\uac1c\ubcc0\uc218\uc640 \ubc18\ud658\uac12 : \uc704\uce58 \uc778\uc790, \ud0a4\uc6cc\ub4dc \uc778\uc790, \uae30\ubcf8\uac12, \uac00\ubcc0 \uc778\uc790\ub97c \ud65c\uc6a9. \uc2a4\ucf54\ud504 : \uc9c0\uc5ed \ubcc0\uc218\uc640 \uc804\uc5ed \ubcc0\uc218\ub97c \uad6c\ubd84\ud558\uba70, \ud544\uc694\uc2dc global \uacfc nonlocal \uc0ac\uc6a9. \ub78c\ub2e4 \ud568\uc218 : \uac04\ub2e8\ud55c \ud568\uc218\ub97c \uac04\uacb0\ud558\uac8c \ud45c\ud604. \uc7ac\uadc0 \ud568\uc218 : \ud568\uc218 \ub0b4\uc5d0\uc11c \uc790\uae30 \uc790\uc2e0 \ud638\ucd9c. \ub370\ucf54\ub808\uc774\ud130 : \ud568\uc218\uc758 \ub3d9\uc791\uc744 \uc27d\uac8c \ud655\uc7a5. \ud30c\uc774\uc36c \ud568\uc218\ub294 \uc720\uc5f0\ud558\uace0 \uac15\ub825\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uc5ec \ub2e4\uc591\ud55c \uc791\uc5c5\uc744 \uac04\uacb0\ud558\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude0a","title":"2.5 \ud568\uc218"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#_1","text":"**\ud568\uc218(Function)**\ub294 \ucf54\ub4dc\ub97c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud558\ub3c4\ub85d \ubb36\uc740 \ucf54\ub4dc \ube14\ub85d\uc785\ub2c8\ub2e4. \ud568\uc218\ub294 \uc785\ub825\uac12\uc744 \ubc1b\uc544 \ucc98\ub9ac\ub97c \uc218\ud589\ud558\uace0, \uacb0\uacfc\ub97c \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ucf54\ub4dc\uc758 \uc911\ubcf5\uc744 \uc904\uc774\uace0, \uac00\ub3c5\uc131\uc744 \ub192\uc774\uba70, \uc720\uc9c0\ubcf4\uc218\ub97c \uc6a9\uc774\ud558\uac8c \ud569\ub2c8\ub2e4.","title":"\ud30c\uc774\uc36c \ud568\uc218: \uac1c\ub150 \ubc0f \uc0ac\uc6a9\ubc95"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#1","text":"\ud30c\uc774\uc36c\uc5d0\uc11c \ud568\uc218\ub97c \uc815\uc758\ud558\ub824\uba74 def \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. def \ud568\uc218\uc774\ub984 ( \ub9e4\uac1c\ubcc0\uc218 ): \"\"\"(\uc120\ud0dd\uc801) \ud568\uc218\uc758 \uc124\uba85\"\"\" \uc2e4\ud589\ud560 \ucf54\ub4dc return \ubc18\ud658\uac12 # (\uc120\ud0dd\uc801)","title":"1. \ud568\uc218\uc758 \uae30\ubcf8 \uad6c\uc870"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#_2","text":"def greet ( name ): \"\"\"\uc0ac\uc6a9\uc790\ub97c \ud658\uc601\ud558\ub294 \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4.\"\"\" return f \"\uc548\ub155\ud558\uc138\uc694, { name } \ub2d8!\" print ( greet ( \"\ucca0\uc218\" )) # \uc548\ub155\ud558\uc138\uc694, \ucca0\uc218\ub2d8!","title":"\uc608\uc81c:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#2","text":"\ud568\uc218\ub97c \uc815\uc758\ud55c \ud6c4, \ud568\uc218 \uc774\ub984\uacfc \ud568\uaed8 \ud544\uc694\ud55c \uc778\uc790\ub97c \uc804\ub2ec\ud558\uc5ec \ud638\ucd9c\ud569\ub2c8\ub2e4. \uc608\uc81c : def add ( a , b ): return a + b result = add ( 3 , 5 ) print ( result ) # 8","title":"2. \ud568\uc218 \ud638\ucd9c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#3","text":"","title":"3. \ub9e4\uac1c\ubcc0\uc218\uc640 \uc778\uc790"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#1-positional-arguments","text":"\uc778\uc790\uc758 \uc21c\uc11c\uac00 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub9e4\uce6d\ub429\ub2c8\ub2e4. \uc608\uc81c : def multiply ( a , b ): return a * b print ( multiply ( 2 , 3 )) # 6","title":"(1) \uc704\uce58 \uc778\uc790 (Positional Arguments)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#2-keyword-arguments","text":"\uc778\uc790\uc758 \uc774\ub984\uc744 \uba85\uc2dc\ud558\uc5ec \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac12\uc744 \uc804\ub2ec. \uc21c\uc11c\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uc74c. \uc608\uc81c : def divide ( a , b ): return a / b print ( divide ( b = 2 , a = 10 )) # 5.0","title":"(2) \ud0a4\uc6cc\ub4dc \uc778\uc790 (Keyword Arguments)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#3-default-arguments","text":"\ub9e4\uac1c\ubcc0\uc218\uc5d0 \uae30\ubcf8\uac12\uc744 \uc124\uc815\ud558\uc5ec, \uac12\uc774 \uc804\ub2ec\ub418\uc9c0 \uc54a\uc73c\uba74 \uae30\ubcf8\uac12 \uc0ac\uc6a9. \uc608\uc81c : def greet ( name = \"\uc0ac\uc6a9\uc790\" ): return f \"\uc548\ub155\ud558\uc138\uc694, { name } \ub2d8!\" print ( greet ()) # \uc548\ub155\ud558\uc138\uc694, \uc0ac\uc6a9\uc790\ub2d8! print ( greet ( \"\ubbfc\uc218\" )) # \uc548\ub155\ud558\uc138\uc694, \ubbfc\uc218\ub2d8!","title":"(3) \uae30\ubcf8\uac12\uc774 \uc788\ub294 \ub9e4\uac1c\ubcc0\uc218 (Default Arguments)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#4-variable-length-arguments","text":"\ud568\uc218\uac00 \uc804\ub2ec\ubc1b\ub294 \uc778\uc790\uc758 \uac1c\uc218\ub97c \ubaa8\ub97c \ub54c \uc0ac\uc6a9.","title":"(4) \uac00\ubcc0 \uc778\uc790 (Variable-Length Arguments)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#args","text":"\uc5ec\ub7ec \uac1c\uc758 \uc704\uce58 \uc778\uc790\ub97c \ud558\ub098\uc758 \ud29c\ud50c\ub85c \uc804\ub2ec. \uc608\uc81c : def total_sum ( * args ): return sum ( args ) print ( total_sum ( 1 , 2 , 3 , 4 )) # 10","title":"\uac00\ubcc0 \uc704\uce58 \uc778\uc790 (*args)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#kwargs","text":"\uc5ec\ub7ec \uac1c\uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub97c \ud558\ub098\uc758 \ub515\uc154\ub108\ub9ac\ub85c \uc804\ub2ec. \uc608\uc81c : def display_info ( ** kwargs ): for key , value in kwargs . items (): print ( f \" { key } : { value } \" ) display_info ( name = \"Alice\" , age = 25 , city = \"Seoul\" ) # name: Alice # age: 25 # city: Seoul","title":"\uac00\ubcc0 \ud0a4\uc6cc\ub4dc \uc778\uc790 (**kwargs)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#4","text":"","title":"4. \ud568\uc218 \ubc18\ud658\uac12"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#1_1","text":"return \ud0a4\uc6cc\ub4dc\ub85c \uac12 \ubc18\ud658. \uc608\uc81c : def square ( x ): return x * x print ( square ( 5 )) # 25","title":"(1) \ub2e8\uc77c \uac12 \ubc18\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#2_1","text":"\ud29c\ud50c\ub85c \uc5ec\ub7ec \uac12\uc744 \ubc18\ud658. \uc608\uc81c : def calculate ( a , b ): return a + b , a - b result = calculate ( 5 , 3 ) print ( result ) # (8, 2)","title":"(2) \uc5ec\ub7ec \uac12 \ubc18\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#5-lambda-function","text":"\uac04\ub2e8\ud55c \ud568\uc218\ub97c \ud55c \uc904\ub85c \uc815\uc758\ud560 \ub54c \uc0ac\uc6a9. \uad6c\ubb38 \ud615\uc2dd : lambda \ub9e4\uac1c\ubcc0\uc218 : \ud45c\ud604\uc2dd \uc608\uc81c : square = lambda x : x * x print ( square ( 4 )) # 16 \ud568\uc218\uc758 \uc778\uc790\ub85c \uc0ac\uc6a9 \uac00\ub2a5: numbers = [ 1 , 2 , 3 , 4 , 5 ] squares = list ( map ( lambda x : x * x , numbers )) print ( squares ) # [1, 4, 9, 16, 25]","title":"5. \ub78c\ub2e4 \ud568\uc218 (Lambda Function)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#6","text":"","title":"6. \ud568\uc218 \uc2a4\ucf54\ud504"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#1-local-variable","text":"\ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub294 \ud574\ub2f9 \ud568\uc218 \ub0b4\uc5d0\uc11c\ub9cc \uc0ac\uc6a9 \uac00\ub2a5. \uc608\uc81c : def my_function (): x = 10 print ( x ) # 10 my_function () # print(x) # NameError: x is not defined","title":"(1) \uc9c0\uc5ed \ubcc0\uc218 (Local Variable)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#2-global-variable","text":"\ud568\uc218 \uc678\ubd80\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\ub294 \ubaa8\ub4e0 \ud568\uc218\uc5d0\uc11c \uc811\uadfc \uac00\ub2a5. \uc608\uc81c : x = 10 def my_function (): print ( x ) # 10 my_function ()","title":"(2) \uc804\uc5ed \ubcc0\uc218 (Global Variable)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#3-global","text":"\ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc804\uc5ed \ubcc0\uc218\ub97c \uc218\uc815\ud558\ub824\uba74 global \ud0a4\uc6cc\ub4dc \uc0ac\uc6a9. \uc608\uc81c : x = 10 def update_global (): global x x = 20 update_global () print ( x ) # 20","title":"(3) global \ud0a4\uc6cc\ub4dc"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#4-nonlocal","text":"\uc911\ucca9 \ud568\uc218\uc5d0\uc11c \uc0c1\uc704 \ud568\uc218\uc758 \ubcc0\uc218\ub97c \uc218\uc815\ud558\ub824\uba74 nonlocal \ud0a4\uc6cc\ub4dc \uc0ac\uc6a9. \uc608\uc81c : def outer_function (): x = 10 def inner_function (): nonlocal x x = 20 inner_function () print ( x ) # 20 outer_function ()","title":"(4) nonlocal \ud0a4\uc6cc\ub4dc"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#7-recursive-function","text":"\ud568\uc218\uac00 \uc790\uae30 \uc790\uc2e0\uc744 \ud638\ucd9c\ud558\ub294 \ud568\uc218. \uc885\ub8cc \uc870\uac74\uc744 \ubc18\ub4dc\uc2dc \ud3ec\ud568\ud574\uc57c \ud568. \uc608\uc81c : \ud329\ud1a0\ub9ac\uc5bc \uacc4\uc0b0 def factorial ( n ): if n == 1 : return 1 return n * factorial ( n - 1 ) print ( factorial ( 5 )) # 120","title":"7. \uc7ac\uadc0 \ud568\uc218 (Recursive Function)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#8","text":"\ud568\uc218\uc758 \ub3d9\uc791\uc744 \ud655\uc7a5\ud558\uac70\ub098 \uc218\uc815\ud560 \ub54c \uc0ac\uc6a9. \uad6c\ubb38 \ud615\uc2dd : @\ub370\ucf54\ub808\uc774\ud130_\uc774\ub984 def \ud568\uc218\uc774\ub984 (): \uc2e4\ud589\ud560 \ucf54\ub4dc \uc608\uc81c : def decorator ( func ): def wrapper (): print ( \"\ud568\uc218 \uc2e4\ud589 \uc804\" ) func () print ( \"\ud568\uc218 \uc2e4\ud589 \ud6c4\" ) return wrapper @decorator def say_hello (): print ( \"Hello!\" ) say_hello () # \ud568\uc218 \uc2e4\ud589 \uc804 # Hello! # \ud568\uc218 \uc2e4\ud589 \ud6c4","title":"8. \ud568\uc218 \ub370\ucf54\ub808\uc774\ud130"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC/%ED%95%A8%EC%88%98/#_3","text":"\ud568\uc218 \uc815\uc758 \ubc0f \ud638\ucd9c : def \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc815\uc758, \ud568\uc218 \uc774\ub984\uc73c\ub85c \ud638\ucd9c. \ub9e4\uac1c\ubcc0\uc218\uc640 \ubc18\ud658\uac12 : \uc704\uce58 \uc778\uc790, \ud0a4\uc6cc\ub4dc \uc778\uc790, \uae30\ubcf8\uac12, \uac00\ubcc0 \uc778\uc790\ub97c \ud65c\uc6a9. \uc2a4\ucf54\ud504 : \uc9c0\uc5ed \ubcc0\uc218\uc640 \uc804\uc5ed \ubcc0\uc218\ub97c \uad6c\ubd84\ud558\uba70, \ud544\uc694\uc2dc global \uacfc nonlocal \uc0ac\uc6a9. \ub78c\ub2e4 \ud568\uc218 : \uac04\ub2e8\ud55c \ud568\uc218\ub97c \uac04\uacb0\ud558\uac8c \ud45c\ud604. \uc7ac\uadc0 \ud568\uc218 : \ud568\uc218 \ub0b4\uc5d0\uc11c \uc790\uae30 \uc790\uc2e0 \ud638\ucd9c. \ub370\ucf54\ub808\uc774\ud130 : \ud568\uc218\uc758 \ub3d9\uc791\uc744 \uc27d\uac8c \ud655\uc7a5. \ud30c\uc774\uc36c \ud568\uc218\ub294 \uc720\uc5f0\ud558\uace0 \uac15\ub825\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uc5ec \ub2e4\uc591\ud55c \uc791\uc5c5\uc744 \uac04\uacb0\ud558\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude0a","title":"\uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv/","text":"OpenCV **OpenCV(Open Source Computer Vision Library)**\ub294 \ucef4\ud4e8\ud130 \ube44\uc804\uacfc \uba38\uc2e0 \ub7ec\ub2dd \uc791\uc5c5\uc744 \uc704\ud55c **\uc624\ud508 \uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac**\uc785\ub2c8\ub2e4. \uc2e4\uc2dc\uac04 \uc774\ubbf8\uc9c0 \ubc0f \ube44\ub514\uc624 \ucc98\ub9ac \uae30\ub2a5\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd94\uba70, \ub2e4\uc591\ud55c \ucef4\ud4e8\ud130 \ube44\uc804 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc190\uc27d\uac8c \uac1c\ubc1c\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\uc2b5\ub2c8\ub2e4. OpenCV\ub294 **C++, Python, Java**\ub97c \ube44\ub86f\ud55c \uc5ec\ub7ec \uc5b8\uc5b4\uc640 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud558\uba70, Jetson Nano \uac19\uc740 \uc784\ubca0\ub514\ub4dc \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub3c4 \ud3ed\ub113\uac8c \ud65c\uc6a9\ub429\ub2c8\ub2e4. OpenCV\uc758 \uc8fc\uc694 \uae30\ub2a5 \uc774\ubbf8\uc9c0 \ucc98\ub9ac : \uc774\ubbf8\uc9c0 \uc77d\uae30, \uc4f0\uae30, \ubcc0\ud658 \ud544\ud130\ub9c1 (\ube14\ub7ec\ub9c1, \uc0e4\ud504\ub2dd) \uc0c9\uc0c1 \uacf5\uac04 \ubcc0\ud658 (RGB \u2194 HSV, GRAY \ub4f1) \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uacc4\uc0b0 \ubc0f \ud3c9\ud65c\ud654 \uc5e3\uc9c0 \uac80\ucd9c (Canny, Sobel \ub4f1) \ube44\ub514\uc624 \ucc98\ub9ac : \uc2e4\uc2dc\uac04 \ube44\ub514\uc624 \ucea1\ucc98 \ube44\ub514\uc624 \uc2a4\ud2b8\ub9bc \uc77d\uae30 \ubc0f \uc4f0\uae30 \ud504\ub808\uc784 \ucc98\ub9ac \ubc0f \ubcc0\ud658 \uae30\ud558\ud559\uc801 \ubcc0\ud658 : \ud68c\uc804, \ud06c\uae30 \uc870\uc815, \uc774\ub3d9 \uc774\ubbf8\uc9c0\uc758 \ud22c\uc601 \ubcc0\ud658 \ubc0f \uc65c\uace1 \ubcf4\uc815 \uc5b4\ud540 \ubcc0\ud658 \ubc0f \uc6d0\uadfc \ubcc0\ud658 \uac1d\uccb4 \ud0d0\uc9c0 : \uc5bc\uad74, \ub208, \uc0ac\ub78c \ub4f1\uc758 \ud0d0\uc9c0 (Haarcascade, DNN \ubaa8\ub378 \uc0ac\uc6a9) \uc724\uacfd\uc120 \uac80\ucd9c \ubc0f \ubd84\uc11d \uac1d\uccb4\uc758 \uacbd\uacc4 \uc0c1\uc790, \uc911\uc2ec\uc810 \ucd94\ucd9c \ud2b9\uc9d5\uc810 \uac80\ucd9c \ubc0f \ub9e4\uce6d : SIFT, SURF, ORB \ub4f1\uc758 \ud2b9\uc9d5\uc810 \uac80\ucd9c \ud2b9\uc9d5\uc810 \ub9e4\uce6d\uc744 \ud1b5\ud55c \uc774\ubbf8\uc9c0 \uc815\ud569 \uba38\uc2e0 \ub7ec\ub2dd \ubc0f \ub525\ub7ec\ub2dd : OpenCV\uc5d0 \ub0b4\uc7a5\ub41c \uba38\uc2e0 \ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998 (SVM, KNN, Decision Trees \ub4f1) DNN \ubaa8\ub4c8\uc744 \ud1b5\ud55c \ub525\ub7ec\ub2dd \ubaa8\ub378 \ub85c\ub4dc \ubc0f \uc2e4\ud589 (TensorFlow, PyTorch \uc9c0\uc6d0) \ucd94\uc801 \ubc0f \uc778\uc2dd : \uac1d\uccb4 \ucd94\uc801 (MeanShift, CamShift) \ubaa8\uc158 \ubd84\uc11d \uc0ac\ub78c \ucd94\uc801 \ubc0f \ub3d9\uc791 \ubd84\uc11d OpenCV\uc758 \uc7a5\uc810 \ub2e4\uc591\ud55c \uc5b8\uc5b4 \ubc0f \ud50c\ub7ab\ud3fc \uc9c0\uc6d0 : Python, C++, Java \ub4f1\uc758 \uc5b8\uc5b4\uc640 Windows, Linux, macOS, Android, iOS \ub4f1\uc758 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ub3d9\uc791\ud569\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4 \uac00\uc18d : CUDA \ubc0f OpenCL\uc744 \uc9c0\uc6d0\ud574 GPU \uac00\uc18d\uc744 \ud65c\uc6a9\ud55c \ube60\ub978 \ucc98\ub9ac \uac00\ub2a5. Jetson Nano\uc5d0\uc11c CUDA \uac00\uc18d\uc73c\ub85c \ucd5c\uc801\ud654\ub41c \uc131\ub2a5 \uc81c\uacf5. \uad11\ubc94\uc704\ud55c \uae30\ub2a5 \uc81c\uacf5 : \ub2e8\uc21c\ud55c \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0\uc11c\ubd80\ud130 \ubcf5\uc7a1\ud55c \ub525\ub7ec\ub2dd \ubaa8\ub378 \uc2e4\ud589\uae4c\uc9c0 \ub2e4\ub8f9\ub2c8\ub2e4. \uc624\ud508 \uc18c\uc2a4 : \ubb34\ub8cc\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud558\uba70, \ucee4\ubba4\ub2c8\ud2f0\uc758 \ud65c\ubc1c\ud55c \uc9c0\uc6d0\uacfc \uc5c5\ub370\uc774\ud2b8 \uc81c\uacf5. OpenCV\uc758 \uc2e4\uc81c \ud65c\uc6a9 \uc0ac\ub840 \uc790\uc728 \uc8fc\ud589 : \ucc28\uc120 \uc778\uc2dd, \uc7a5\uc560\ubb3c \uac10\uc9c0, \ucc28\ub7c9 \ubc0f \ubcf4\ud589\uc790 \ud0d0\uc9c0. \uc758\ub8cc \uc601\uc0c1 \ucc98\ub9ac : CT, MRI \uc774\ubbf8\uc9c0 \ubd84\uc11d. \ubcd1\ubcc0 \ud0d0\uc9c0 \ubc0f \ud2b9\uc774\uc810 \ud45c\uc2dc. \ubcf4\uc548 \ubc0f \uac10\uc2dc : \uc5bc\uad74 \uc778\uc2dd, \uac1d\uccb4 \ucd94\uc801, \uc774\uc0c1 \ud589\ub3d9 \uac10\uc9c0. \uc0b0\uc5c5 \uc790\ub3d9\ud654 : \ub85c\ubd07 \ube44\uc804, \uc0dd\uc0b0 \ub77c\uc778 \ud488\uc9c8 \uac80\uc0ac. \uc2a4\ud3ec\uce20 \ubd84\uc11d : \uc120\uc218\uc758 \ub3d9\uc791 \ucd94\uc801 \ubc0f \uacbd\uae30 \ubd84\uc11d. Jetson Nano\uc5d0\uc11c OpenCV\uc758 \ud65c\uc6a9 Jetson Nano\ub294 NVIDIA\uc758 CUDA \ucf54\uc5b4\ub97c \ud65c\uc6a9\ud558\uc5ec OpenCV\uc758 \uc5f0\uc0b0\uc744 \uac00\uc18d\ud654\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, \uc2e4\uc2dc\uac04 \uc560\ud50c\ub9ac\ucf00\uc774\uc158**\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Jetson Nano\uc5d0\uc11c CSI \uce74\uba54\ub77c\uc640 OpenCV\ub97c \uc0ac\uc6a9\ud574 **\uc5bc\uad74 \uc778\uc2dd, \uac1d\uccb4 \ucd94\uc801 \uac19\uc740 \uc791\uc5c5\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. OpenCV \ud559\uc2b5\uc758 \uc2dc\uc791\uc810 OpenCV \uacf5\uc2dd \ubb38\uc11c : \ud568\uc218 \uc124\uba85 \ubc0f API \ub808\ud37c\ub7f0\uc2a4 \uc81c\uacf5. OpenCV GitHub \uc800\uc7a5\uc18c : \ucd5c\uc2e0 \uc18c\uc2a4 \ucf54\ub4dc \ubc0f \uc5c5\ub370\uc774\ud2b8 \ud655\uc778.","title":"\uac1c\uc694"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv/#opencv","text":"**OpenCV(Open Source Computer Vision Library)**\ub294 \ucef4\ud4e8\ud130 \ube44\uc804\uacfc \uba38\uc2e0 \ub7ec\ub2dd \uc791\uc5c5\uc744 \uc704\ud55c **\uc624\ud508 \uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac**\uc785\ub2c8\ub2e4. \uc2e4\uc2dc\uac04 \uc774\ubbf8\uc9c0 \ubc0f \ube44\ub514\uc624 \ucc98\ub9ac \uae30\ub2a5\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd94\uba70, \ub2e4\uc591\ud55c \ucef4\ud4e8\ud130 \ube44\uc804 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc190\uc27d\uac8c \uac1c\ubc1c\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\uc2b5\ub2c8\ub2e4. OpenCV\ub294 **C++, Python, Java**\ub97c \ube44\ub86f\ud55c \uc5ec\ub7ec \uc5b8\uc5b4\uc640 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud558\uba70, Jetson Nano \uac19\uc740 \uc784\ubca0\ub514\ub4dc \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub3c4 \ud3ed\ub113\uac8c \ud65c\uc6a9\ub429\ub2c8\ub2e4.","title":"OpenCV"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv/#opencv_1","text":"\uc774\ubbf8\uc9c0 \ucc98\ub9ac : \uc774\ubbf8\uc9c0 \uc77d\uae30, \uc4f0\uae30, \ubcc0\ud658 \ud544\ud130\ub9c1 (\ube14\ub7ec\ub9c1, \uc0e4\ud504\ub2dd) \uc0c9\uc0c1 \uacf5\uac04 \ubcc0\ud658 (RGB \u2194 HSV, GRAY \ub4f1) \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uacc4\uc0b0 \ubc0f \ud3c9\ud65c\ud654 \uc5e3\uc9c0 \uac80\ucd9c (Canny, Sobel \ub4f1) \ube44\ub514\uc624 \ucc98\ub9ac : \uc2e4\uc2dc\uac04 \ube44\ub514\uc624 \ucea1\ucc98 \ube44\ub514\uc624 \uc2a4\ud2b8\ub9bc \uc77d\uae30 \ubc0f \uc4f0\uae30 \ud504\ub808\uc784 \ucc98\ub9ac \ubc0f \ubcc0\ud658 \uae30\ud558\ud559\uc801 \ubcc0\ud658 : \ud68c\uc804, \ud06c\uae30 \uc870\uc815, \uc774\ub3d9 \uc774\ubbf8\uc9c0\uc758 \ud22c\uc601 \ubcc0\ud658 \ubc0f \uc65c\uace1 \ubcf4\uc815 \uc5b4\ud540 \ubcc0\ud658 \ubc0f \uc6d0\uadfc \ubcc0\ud658 \uac1d\uccb4 \ud0d0\uc9c0 : \uc5bc\uad74, \ub208, \uc0ac\ub78c \ub4f1\uc758 \ud0d0\uc9c0 (Haarcascade, DNN \ubaa8\ub378 \uc0ac\uc6a9) \uc724\uacfd\uc120 \uac80\ucd9c \ubc0f \ubd84\uc11d \uac1d\uccb4\uc758 \uacbd\uacc4 \uc0c1\uc790, \uc911\uc2ec\uc810 \ucd94\ucd9c \ud2b9\uc9d5\uc810 \uac80\ucd9c \ubc0f \ub9e4\uce6d : SIFT, SURF, ORB \ub4f1\uc758 \ud2b9\uc9d5\uc810 \uac80\ucd9c \ud2b9\uc9d5\uc810 \ub9e4\uce6d\uc744 \ud1b5\ud55c \uc774\ubbf8\uc9c0 \uc815\ud569 \uba38\uc2e0 \ub7ec\ub2dd \ubc0f \ub525\ub7ec\ub2dd : OpenCV\uc5d0 \ub0b4\uc7a5\ub41c \uba38\uc2e0 \ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998 (SVM, KNN, Decision Trees \ub4f1) DNN \ubaa8\ub4c8\uc744 \ud1b5\ud55c \ub525\ub7ec\ub2dd \ubaa8\ub378 \ub85c\ub4dc \ubc0f \uc2e4\ud589 (TensorFlow, PyTorch \uc9c0\uc6d0) \ucd94\uc801 \ubc0f \uc778\uc2dd : \uac1d\uccb4 \ucd94\uc801 (MeanShift, CamShift) \ubaa8\uc158 \ubd84\uc11d \uc0ac\ub78c \ucd94\uc801 \ubc0f \ub3d9\uc791 \ubd84\uc11d","title":"OpenCV\uc758 \uc8fc\uc694 \uae30\ub2a5"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv/#opencv_2","text":"\ub2e4\uc591\ud55c \uc5b8\uc5b4 \ubc0f \ud50c\ub7ab\ud3fc \uc9c0\uc6d0 : Python, C++, Java \ub4f1\uc758 \uc5b8\uc5b4\uc640 Windows, Linux, macOS, Android, iOS \ub4f1\uc758 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ub3d9\uc791\ud569\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4 \uac00\uc18d : CUDA \ubc0f OpenCL\uc744 \uc9c0\uc6d0\ud574 GPU \uac00\uc18d\uc744 \ud65c\uc6a9\ud55c \ube60\ub978 \ucc98\ub9ac \uac00\ub2a5. Jetson Nano\uc5d0\uc11c CUDA \uac00\uc18d\uc73c\ub85c \ucd5c\uc801\ud654\ub41c \uc131\ub2a5 \uc81c\uacf5. \uad11\ubc94\uc704\ud55c \uae30\ub2a5 \uc81c\uacf5 : \ub2e8\uc21c\ud55c \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0\uc11c\ubd80\ud130 \ubcf5\uc7a1\ud55c \ub525\ub7ec\ub2dd \ubaa8\ub378 \uc2e4\ud589\uae4c\uc9c0 \ub2e4\ub8f9\ub2c8\ub2e4. \uc624\ud508 \uc18c\uc2a4 : \ubb34\ub8cc\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud558\uba70, \ucee4\ubba4\ub2c8\ud2f0\uc758 \ud65c\ubc1c\ud55c \uc9c0\uc6d0\uacfc \uc5c5\ub370\uc774\ud2b8 \uc81c\uacf5.","title":"OpenCV\uc758 \uc7a5\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv/#opencv_3","text":"\uc790\uc728 \uc8fc\ud589 : \ucc28\uc120 \uc778\uc2dd, \uc7a5\uc560\ubb3c \uac10\uc9c0, \ucc28\ub7c9 \ubc0f \ubcf4\ud589\uc790 \ud0d0\uc9c0. \uc758\ub8cc \uc601\uc0c1 \ucc98\ub9ac : CT, MRI \uc774\ubbf8\uc9c0 \ubd84\uc11d. \ubcd1\ubcc0 \ud0d0\uc9c0 \ubc0f \ud2b9\uc774\uc810 \ud45c\uc2dc. \ubcf4\uc548 \ubc0f \uac10\uc2dc : \uc5bc\uad74 \uc778\uc2dd, \uac1d\uccb4 \ucd94\uc801, \uc774\uc0c1 \ud589\ub3d9 \uac10\uc9c0. \uc0b0\uc5c5 \uc790\ub3d9\ud654 : \ub85c\ubd07 \ube44\uc804, \uc0dd\uc0b0 \ub77c\uc778 \ud488\uc9c8 \uac80\uc0ac. \uc2a4\ud3ec\uce20 \ubd84\uc11d : \uc120\uc218\uc758 \ub3d9\uc791 \ucd94\uc801 \ubc0f \uacbd\uae30 \ubd84\uc11d.","title":"OpenCV\uc758 \uc2e4\uc81c \ud65c\uc6a9 \uc0ac\ub840"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv/#jetson-nano-opencv","text":"Jetson Nano\ub294 NVIDIA\uc758 CUDA \ucf54\uc5b4\ub97c \ud65c\uc6a9\ud558\uc5ec OpenCV\uc758 \uc5f0\uc0b0\uc744 \uac00\uc18d\ud654\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, \uc2e4\uc2dc\uac04 \uc560\ud50c\ub9ac\ucf00\uc774\uc158**\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Jetson Nano\uc5d0\uc11c CSI \uce74\uba54\ub77c\uc640 OpenCV\ub97c \uc0ac\uc6a9\ud574 **\uc5bc\uad74 \uc778\uc2dd, \uac1d\uccb4 \ucd94\uc801 \uac19\uc740 \uc791\uc5c5\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Jetson Nano\uc5d0\uc11c OpenCV\uc758 \ud65c\uc6a9"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv/#opencv_4","text":"OpenCV \uacf5\uc2dd \ubb38\uc11c : \ud568\uc218 \uc124\uba85 \ubc0f API \ub808\ud37c\ub7f0\uc2a4 \uc81c\uacf5. OpenCV GitHub \uc800\uc7a5\uc18c : \ucd5c\uc2e0 \uc18c\uc2a4 \ucf54\ub4dc \ubc0f \uc5c5\ub370\uc774\ud2b8 \ud655\uc778.","title":"OpenCV \ud559\uc2b5\uc758 \uc2dc\uc791\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/","text":"OpenCV \uc0c9\uc0c1 \ucc98\ub9ac \uc608\uc81c Jetson Nano\uc5d0\uc11c OpenCV\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0 \ub610\ub294 \ube44\ub514\uc624\uc758 \uc0c9\uc0c1\uc744 \ucc98\ub9ac\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. 1. \uc0c9\uc0c1 \uacf5\uac04 \ubcc0\ud658 \uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1 \uacf5\uac04\uc744 BGR\uc5d0\uc11c HSV\ub85c \ubcc0\ud658\ud558\uac70\ub098, \ub2e4\ub978 \uc0c9\uc0c1 \uacf5\uac04\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uae30\ubcf8 \uc608\uc81c\uc785\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # BGR\uc5d0\uc11c HSV\ub85c \ubcc0\ud658 hsv_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # BGR\uc5d0\uc11c GRAY\ub85c \ubcc0\ud658 gray_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \uc774\ubbf8\uc9c0 \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"HSV Image\" , hsv_image ) cv2 . imshow ( \"Gray Image\" , gray_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () 2. \ud2b9\uc815 \uc0c9\uc0c1 \ud544\ud130\ub9c1 HSV \uc0c9\uc0c1 \uacf5\uac04\uc5d0\uc11c \ud2b9\uc815 \uc0c9\uc0c1(\uc608: \ube68\uac04\uc0c9, \ud30c\ub780\uc0c9 \ub4f1)\uc744 \ucd94\ucd9c\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import numpy as np def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # BGR\uc5d0\uc11c HSV\ub85c \ubcc0\ud658 hsv = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # \ube68\uac04\uc0c9 \ubc94\uc704 \uc815\uc758 lower_red = np . array ([ 0 , 120 , 70 ]) upper_red = np . array ([ 10 , 255 , 255 ]) # \ube68\uac04\uc0c9\uc5d0 \ud574\ub2f9\ud558\ub294 \ub9c8\uc2a4\ud06c \uc0dd\uc131 mask = cv2 . inRange ( hsv , lower_red , upper_red ) # \uc6d0\ubcf8 \uc774\ubbf8\uc9c0\uc640 \ub9c8\uc2a4\ud06c \uc801\uc6a9 result = cv2 . bitwise_and ( image , image , mask = mask ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Red Color Filtered\" , result ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () 3. \uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1 \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1 \ubd84\ud3ec\ub97c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \uacc4\uc0b0\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import numpy as np from matplotlib import pyplot as plt def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # \uac01 \ucc44\ub110\ubcc4 \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uacc4\uc0b0 colors = ( 'b' , 'g' , 'r' ) for i , color in enumerate ( colors ): hist = cv2 . calcHist ([ image ], [ i ], None , [ 256 ], [ 0 , 256 ]) plt . plot ( hist , color = color ) plt . xlim ([ 0 , 256 ]) plt . title ( \"Color Histogram\" ) plt . xlabel ( \"Pixel Intensity\" ) plt . ylabel ( \"Frequency\" ) plt . show () if __name__ == \"__main__\" : main () 4. \uc0c9\uc0c1 \ubc18\uc804 \uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1\uc744 \ubc18\uc804\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # \uc0c9\uc0c1 \ubc18\uc804 inverted_image = cv2 . bitwise_not ( image ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Inverted Image\" , inverted_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () 5. \uc774\ubbf8\uc9c0 \ube14\ub7ec\ub9c1 \ubc0f \uc0c9\uc0c1 \ubcc0\uacbd \uc774\ubbf8\uc9c0\ub97c \ube14\ub7ec\ub9c1\ud55c \ub4a4 \ud2b9\uc815 \uc0c9\uc0c1\ub9cc \uac15\uc870\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import numpy as np def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # \uc774\ubbf8\uc9c0 \ube14\ub7ec\ub9c1 blurred = cv2 . GaussianBlur ( image , ( 15 , 15 ), 0 ) # HSV\ub85c \ubcc0\ud658 \ud6c4 \ud2b9\uc815 \uc0c9\uc0c1\ub9cc \ucd94\ucd9c (\ud30c\ub780\uc0c9 \uc608\uc81c) hsv = cv2 . cvtColor ( blurred , cv2 . COLOR_BGR2HSV ) lower_blue = np . array ([ 100 , 150 , 0 ]) upper_blue = np . array ([ 140 , 255 , 255 ]) mask = cv2 . inRange ( hsv , lower_blue , upper_blue ) # \uc6d0\ubcf8 \uc774\ubbf8\uc9c0\uc5d0 \uc0c9\uc0c1 \uac15\uc870 result = cv2 . bitwise_and ( image , image , mask = mask ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Blurred Image\" , blurred ) cv2 . imshow ( \"Blue Color Enhanced\" , result ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () \uc2e4\ud589 \uc804 \uc900\ube44\uc0ac\ud56d Jetson Nano\uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 sample.jpg \ud30c\uc77c\uc744 \uc900\ube44\ud558\uc138\uc694. \uce74\uba54\ub77c \uc785\ub825\uc73c\ub85c \ud14c\uc2a4\ud2b8\ud558\ub824\uba74 cv2.VideoCapture() \ub97c \uc0ac\uc6a9\ud574 \uc785\ub825 \ud504\ub808\uc784\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uc138\uc694.","title":"\uc0c9\uc0c1\ucc98\ub9ac\uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#opencv","text":"Jetson Nano\uc5d0\uc11c OpenCV\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0 \ub610\ub294 \ube44\ub514\uc624\uc758 \uc0c9\uc0c1\uc744 \ucc98\ub9ac\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"OpenCV \uc0c9\uc0c1 \ucc98\ub9ac \uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#1","text":"\uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1 \uacf5\uac04\uc744 BGR\uc5d0\uc11c HSV\ub85c \ubcc0\ud658\ud558\uac70\ub098, \ub2e4\ub978 \uc0c9\uc0c1 \uacf5\uac04\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uae30\ubcf8 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"1. \uc0c9\uc0c1 \uacf5\uac04 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#_1","text":"import cv2 def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # BGR\uc5d0\uc11c HSV\ub85c \ubcc0\ud658 hsv_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # BGR\uc5d0\uc11c GRAY\ub85c \ubcc0\ud658 gray_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \uc774\ubbf8\uc9c0 \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"HSV Image\" , hsv_image ) cv2 . imshow ( \"Gray Image\" , gray_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#2","text":"HSV \uc0c9\uc0c1 \uacf5\uac04\uc5d0\uc11c \ud2b9\uc815 \uc0c9\uc0c1(\uc608: \ube68\uac04\uc0c9, \ud30c\ub780\uc0c9 \ub4f1)\uc744 \ucd94\ucd9c\ud569\ub2c8\ub2e4.","title":"2. \ud2b9\uc815 \uc0c9\uc0c1 \ud544\ud130\ub9c1"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#_2","text":"import cv2 import numpy as np def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # BGR\uc5d0\uc11c HSV\ub85c \ubcc0\ud658 hsv = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # \ube68\uac04\uc0c9 \ubc94\uc704 \uc815\uc758 lower_red = np . array ([ 0 , 120 , 70 ]) upper_red = np . array ([ 10 , 255 , 255 ]) # \ube68\uac04\uc0c9\uc5d0 \ud574\ub2f9\ud558\ub294 \ub9c8\uc2a4\ud06c \uc0dd\uc131 mask = cv2 . inRange ( hsv , lower_red , upper_red ) # \uc6d0\ubcf8 \uc774\ubbf8\uc9c0\uc640 \ub9c8\uc2a4\ud06c \uc801\uc6a9 result = cv2 . bitwise_and ( image , image , mask = mask ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Red Color Filtered\" , result ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#3","text":"\uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1 \ubd84\ud3ec\ub97c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \uacc4\uc0b0\ud569\ub2c8\ub2e4.","title":"3. \uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1 \ud788\uc2a4\ud1a0\uadf8\ub7a8"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#_3","text":"import cv2 import numpy as np from matplotlib import pyplot as plt def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # \uac01 \ucc44\ub110\ubcc4 \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uacc4\uc0b0 colors = ( 'b' , 'g' , 'r' ) for i , color in enumerate ( colors ): hist = cv2 . calcHist ([ image ], [ i ], None , [ 256 ], [ 0 , 256 ]) plt . plot ( hist , color = color ) plt . xlim ([ 0 , 256 ]) plt . title ( \"Color Histogram\" ) plt . xlabel ( \"Pixel Intensity\" ) plt . ylabel ( \"Frequency\" ) plt . show () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#4","text":"\uc774\ubbf8\uc9c0\uc758 \uc0c9\uc0c1\uc744 \ubc18\uc804\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"4. \uc0c9\uc0c1 \ubc18\uc804"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#_4","text":"import cv2 def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # \uc0c9\uc0c1 \ubc18\uc804 inverted_image = cv2 . bitwise_not ( image ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Inverted Image\" , inverted_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#5","text":"\uc774\ubbf8\uc9c0\ub97c \ube14\ub7ec\ub9c1\ud55c \ub4a4 \ud2b9\uc815 \uc0c9\uc0c1\ub9cc \uac15\uc870\ud569\ub2c8\ub2e4.","title":"5. \uc774\ubbf8\uc9c0 \ube14\ub7ec\ub9c1 \ubc0f \uc0c9\uc0c1 \ubcc0\uacbd"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#_5","text":"import cv2 import numpy as np def main (): # \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc635\ub2c8\ub2e4 image = cv2 . imread ( \"sample.jpg\" ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return # \uc774\ubbf8\uc9c0 \ube14\ub7ec\ub9c1 blurred = cv2 . GaussianBlur ( image , ( 15 , 15 ), 0 ) # HSV\ub85c \ubcc0\ud658 \ud6c4 \ud2b9\uc815 \uc0c9\uc0c1\ub9cc \ucd94\ucd9c (\ud30c\ub780\uc0c9 \uc608\uc81c) hsv = cv2 . cvtColor ( blurred , cv2 . COLOR_BGR2HSV ) lower_blue = np . array ([ 100 , 150 , 0 ]) upper_blue = np . array ([ 140 , 255 , 255 ]) mask = cv2 . inRange ( hsv , lower_blue , upper_blue ) # \uc6d0\ubcf8 \uc774\ubbf8\uc9c0\uc5d0 \uc0c9\uc0c1 \uac15\uc870 result = cv2 . bitwise_and ( image , image , mask = mask ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Blurred Image\" , blurred ) cv2 . imshow ( \"Blue Color Enhanced\" , result ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_color/#_6","text":"Jetson Nano\uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 sample.jpg \ud30c\uc77c\uc744 \uc900\ube44\ud558\uc138\uc694. \uce74\uba54\ub77c \uc785\ub825\uc73c\ub85c \ud14c\uc2a4\ud2b8\ud558\ub824\uba74 cv2.VideoCapture() \ub97c \uc0ac\uc6a9\ud574 \uc785\ub825 \ud504\ub808\uc784\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uc138\uc694.","title":"\uc2e4\ud589 \uc804 \uc900\ube44\uc0ac\ud56d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/","text":"\uc774\ubbf8\uc9c0 \uc870\uc791 \uc544\ub798\ub294 OpenCV\ub97c \uc0ac\uc6a9\ud558\uc5ec 2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0 \ubc0f **3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0**\ub97c \uc790\ub974\uace0, \ubd99\uc774\uace0, \uc870\uc791\ud558\ub294 \uc608\uc81c\ub4e4\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 **NumPy \ubc30\uc5f4 \uc870\uc791**\uc744 \uba3c\uc800 \uc18c\uac1c\ud569\ub2c8\ub2e4. 1. NumPy \ubc30\uc5f4 \uc870\uc791 \uae30\ucd08 OpenCV \uc774\ubbf8\uc9c0\ub294 \uae30\ubcf8\uc801\uc73c\ub85c NumPy \ubc30\uc5f4\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubbf8\uc9c0 \uc870\uc791\uc740 NumPy \ubc30\uc5f4\uc758 \uc2ac\ub77c\uc774\uc2f1\uacfc \uacb0\ud569\uc744 \ud1b5\ud574 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. 1.1 \ubc30\uc5f4 \uc2ac\ub77c\uc774\uc2f1\uc73c\ub85c \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 NumPy \ubc30\uc5f4 \uc2ac\ub77c\uc774\uc2f1\uc744 \uc774\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \uc790\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc: import numpy as np # \uc608\uc81c \ubc30\uc5f4 \uc0dd\uc131 (5x5 \ud06c\uae30\uc758 2D \ubc30\uc5f4) array = np . arange ( 25 ) . reshape ( 5 , 5 ) print ( \"\uc6d0\ubcf8 \ubc30\uc5f4:\" ) print ( array ) # \ubc30\uc5f4 \uc790\ub974\uae30 (2\ud589~4\ud589, 1\uc5f4~3\uc5f4) cropped_array = array [ 2 : 5 , 1 : 4 ] print ( \"\uc790\ub978 \ubc30\uc5f4:\" ) print ( cropped_array ) \ucd9c\ub825: \uc6d0\ubcf8 \ubc30\uc5f4: [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19] [20 21 22 23 24]] \uc790\ub978 \ubc30\uc5f4: [[11 12 13] [16 17 18] [21 22 23]] 1.2 \ubc30\uc5f4 \ubcd1\ud569\uc73c\ub85c \uc774\ubbf8\uc9c0 \ubd99\uc774\uae30 NumPy \ubc30\uc5f4\uc744 \uc138\ub85c( vstack ) \ub610\ub294 \uac00\ub85c( hstack )\ub85c \uacb0\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc: import numpy as np # \ub450 \uac1c\uc758 \ubc30\uc5f4 \uc0dd\uc131 array1 = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) array2 = np . array ([[ 7 , 8 , 9 ], [ 10 , 11 , 12 ]]) # \uc138\ub85c\ub85c \ubcd1\ud569 vertical_concat = np . vstack (( array1 , array2 )) print ( \"\uc138\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4:\" ) print ( vertical_concat ) # \uac00\ub85c\ub85c \ubcd1\ud569 horizontal_concat = np . hstack (( array1 , array2 )) print ( \"\uac00\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4:\" ) print ( horizontal_concat ) \ucd9c\ub825: \uc138\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4: [[ 1 2 3] [ 4 5 6] [ 7 8 9] [10 11 12]] \uac00\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4: [[ 1 2 3 7 8 9] [ 4 5 6 10 11 12]] 2. 2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc870\uc791 2.1 \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0\ub294 \ub2e8\uc77c \ucc44\ub110 \ub370\uc774\ud130\ub85c, NumPy \ubc30\uc5f4\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 # \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 (y: 50~200, x: 100~300) cropped_image = image [ 50 : 200 , 100 : 300 ] # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Cropped Image\" , cropped_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 2.2 \uc774\ubbf8\uc9c0 \ubd99\uc774\uae30 \uc5ec\ub7ec \uc774\ubbf8\uc9c0\ub97c \uac00\ub85c \ub610\ub294 \uc138\ub85c\ub85c \ubd99\uc774\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import numpy as np # \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 cropped1 = image [ 50 : 200 , 100 : 300 ] cropped2 = image [ 200 : 350 , 300 : 500 ] # \uc138\ub85c\ub85c \ubd99\uc774\uae30 vertical_concat = np . vstack (( cropped1 , cropped2 )) # \uac00\ub85c\ub85c \ubd99\uc774\uae30 horizontal_concat = np . hstack (( cropped1 , cropped2 )) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Vertical Concatenation\" , vertical_concat ) cv2 . imshow ( \"Horizontal Concatenation\" , horizontal_concat ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 3. 3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc870\uc791 3.1 \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 Height x Width x Channels \ub85c \ud45c\ud604\ub418\uba70, \uac01 \ud53d\uc140\uc5d0 RGB(BGR) \uac12\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 (y: 50~200, x: 100~300) cropped_image = image [ 50 : 200 , 100 : 300 ] # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Cropped Image\" , cropped_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 3.2 \ud2b9\uc815 \ucc44\ub110 \ubd84\ub9ac \ubc0f \ubcd1\ud569 \uc774\ubbf8\uc9c0\uc5d0\uc11c R, G, B(BGR \uc21c\uc11c) \ucc44\ub110\uc744 \ubd84\ub9ac\ud558\uace0 \ubcd1\ud569\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \ucc44\ub110 \ubd84\ub9ac b , g , r = cv2 . split ( image ) # \ud2b9\uc815 \ucc44\ub110 \uac15\uc870 (\uc608: R \ucc44\ub110\ub9cc \ub0a8\uae30\uae30) image_r = cv2 . merge (( b * 0 , g * 0 , r )) # R \ucc44\ub110 \uac15\uc870 # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Red Channel Highlight\" , image_r ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 3.3 \uc774\ubbf8\uc9c0 \ubd99\uc774\uae30 3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \uacbd\uc6b0\ub3c4 NumPy\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ub85c \ub610\ub294 \uc138\ub85c\ub85c \ubd99\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import numpy as np # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 cropped1 = image [ 50 : 200 , 100 : 300 ] cropped2 = image [ 200 : 350 , 300 : 500 ] # \uc138\ub85c\ub85c \ubd99\uc774\uae30 vertical_concat = np . vstack (( cropped1 , cropped2 )) # \uac00\ub85c\ub85c \ubd99\uc774\uae30 horizontal_concat = np . hstack (( cropped1 , cropped2 )) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Vertical Concatenation\" , vertical_concat ) cv2 . imshow ( \"Horizontal Concatenation\" , horizontal_concat ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 4. 2\ucc28\uc6d0\uacfc 3\ucc28\uc6d0 \uc774\ubbf8\uc9c0 \ud63c\ud569 \uc870\uc791 4.1 \ud751\ubc31 \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec \uc774\ubbf8\uc9c0\uc5d0 \ubcd1\ud569 \ud751\ubc31 \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \ucc44\ub110 \uc911 \ud558\ub098\ub85c \ucd94\uac00\ud558\uac70\ub098, \ubc30\uacbd\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import numpy as np # \uceec\ub7ec \uc774\ubbf8\uc9c0\uc640 \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc77d\uae30 color_image = cv2 . imread ( \"sample.jpg\" ) gray_image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) # \ud751\ubc31 \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec \ucc44\ub110\ub85c \ubcd1\ud569 (BGR\uc758 G \ucc44\ub110\ub85c \uc0ac\uc6a9) merged_image = cv2 . merge (( gray_image , gray_image , gray_image )) # \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ud751\ubc31 \uc774\ubbf8\uc9c0\ub85c \ubcc0\ud658 \ud6c4 \ubcd1\ud569 gray_from_color = cv2 . cvtColor ( color_image , cv2 . COLOR_BGR2GRAY ) combined = cv2 . merge (( gray_from_color , gray_image , gray_image )) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Merged Gray as Color\" , merged_image ) cv2 . imshow ( \"Combined Image\" , combined ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 5. 3\ucc28\uc6d0 \uc774\ubbf8\uc9c0\ub97c 2\ucc28\uc6d0\uc73c\ub85c \ubcc0\ud658 (Grayscale) \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ud751\ubc31(Grayscale)\uc73c\ub85c \ubcc0\ud658\ud558\uc5ec \uc870\uc791\ud569\ub2c8\ub2e4. 5.1 \ucf54\ub4dc: import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ud751\ubc31\uc73c\ub85c \ubcc0\ud658 gray_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Grayscale Image\" , gray_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 6. \uc774\ubbf8\uc9c0\uc5d0 \ud14d\uc2a4\ud2b8 \ucd94\uac00 \ubc0f \ubcd1\ud569 \uc774\ubbf8\uc9c0\uc5d0 \ud14d\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\uac70\ub098, \ud06c\uae30\ub97c \uc870\uc815\ud558\uc5ec \ubcd1\ud569\ud569\ub2c8\ub2e4. 6.1 \ucf54\ub4dc: import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \ud14d\uc2a4\ud2b8 \ucd94\uac00 text_image = image . copy () cv2 . putText ( text_image , \"Hello OpenCV\" , ( 50 , 50 ), cv2 . FONT_HERSHEY_SIMPLEX , 1 , ( 0 , 255 , 0 ), 2 ) # \uc790\ub978 \uc774\ubbf8\uc9c0\ub97c \ubd99\uc774\uae30 cropped = text_image [ 50 : 200 , 100 : 300 ] merged = cv2 . hconcat ([ text_image , cropped ]) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Text Added Image\" , text_image ) cv2 . imshow ( \"Merged Image\" , merged ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () \uc694\uc57d 2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc870\uc791 : \uac04\ub2e8\ud55c NumPy \uc2ac\ub77c\uc774\uc2f1\uacfc \ubd99\uc774\uae30\ub85c \uc870\uc791. 3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc870\uc791 : \ucc44\ub110 \ubd84\ub9ac/\ubcd1\ud569, \uc2ac\ub77c\uc774\uc2f1 \ub4f1\uc744 \uc0ac\uc6a9. \ud63c\ud569 \uc870\uc791 : \ud751\ubc31\uacfc \uceec\ub7ec\ub97c \uacb0\ud569\ud558\uac70\ub098 \ubcc0\ud658. OpenCV\uc758 \uae30\ubcf8 split , merge , resize , vstack , hstack \ud568\uc218\ub4e4\uc744 \uc801\uc808\ud788 \ud65c\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \uc774\ubbf8\uc9c0\ub97c \uc870\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc774\ubbf8\uc9c0 \uc870\uc791"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_1","text":"\uc544\ub798\ub294 OpenCV\ub97c \uc0ac\uc6a9\ud558\uc5ec 2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0 \ubc0f **3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0**\ub97c \uc790\ub974\uace0, \ubd99\uc774\uace0, \uc870\uc791\ud558\ub294 \uc608\uc81c\ub4e4\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 **NumPy \ubc30\uc5f4 \uc870\uc791**\uc744 \uba3c\uc800 \uc18c\uac1c\ud569\ub2c8\ub2e4.","title":"\uc774\ubbf8\uc9c0 \uc870\uc791"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#1-numpy","text":"OpenCV \uc774\ubbf8\uc9c0\ub294 \uae30\ubcf8\uc801\uc73c\ub85c NumPy \ubc30\uc5f4\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubbf8\uc9c0 \uc870\uc791\uc740 NumPy \ubc30\uc5f4\uc758 \uc2ac\ub77c\uc774\uc2f1\uacfc \uacb0\ud569\uc744 \ud1b5\ud574 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.","title":"1. NumPy \ubc30\uc5f4 \uc870\uc791 \uae30\ucd08"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#11","text":"NumPy \ubc30\uc5f4 \uc2ac\ub77c\uc774\uc2f1\uc744 \uc774\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \uc790\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1.1 \ubc30\uc5f4 \uc2ac\ub77c\uc774\uc2f1\uc73c\ub85c \uc774\ubbf8\uc9c0 \uc790\ub974\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_2","text":"import numpy as np # \uc608\uc81c \ubc30\uc5f4 \uc0dd\uc131 (5x5 \ud06c\uae30\uc758 2D \ubc30\uc5f4) array = np . arange ( 25 ) . reshape ( 5 , 5 ) print ( \"\uc6d0\ubcf8 \ubc30\uc5f4:\" ) print ( array ) # \ubc30\uc5f4 \uc790\ub974\uae30 (2\ud589~4\ud589, 1\uc5f4~3\uc5f4) cropped_array = array [ 2 : 5 , 1 : 4 ] print ( \"\uc790\ub978 \ubc30\uc5f4:\" ) print ( cropped_array )","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_3","text":"\uc6d0\ubcf8 \ubc30\uc5f4: [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19] [20 21 22 23 24]] \uc790\ub978 \ubc30\uc5f4: [[11 12 13] [16 17 18] [21 22 23]]","title":"\ucd9c\ub825:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#12","text":"NumPy \ubc30\uc5f4\uc744 \uc138\ub85c( vstack ) \ub610\ub294 \uac00\ub85c( hstack )\ub85c \uacb0\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1.2 \ubc30\uc5f4 \ubcd1\ud569\uc73c\ub85c \uc774\ubbf8\uc9c0 \ubd99\uc774\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_4","text":"import numpy as np # \ub450 \uac1c\uc758 \ubc30\uc5f4 \uc0dd\uc131 array1 = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) array2 = np . array ([[ 7 , 8 , 9 ], [ 10 , 11 , 12 ]]) # \uc138\ub85c\ub85c \ubcd1\ud569 vertical_concat = np . vstack (( array1 , array2 )) print ( \"\uc138\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4:\" ) print ( vertical_concat ) # \uac00\ub85c\ub85c \ubcd1\ud569 horizontal_concat = np . hstack (( array1 , array2 )) print ( \"\uac00\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4:\" ) print ( horizontal_concat )","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_5","text":"\uc138\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4: [[ 1 2 3] [ 4 5 6] [ 7 8 9] [10 11 12]] \uac00\ub85c\ub85c \ubcd1\ud569\ub41c \ubc30\uc5f4: [[ 1 2 3 7 8 9] [ 4 5 6 10 11 12]]","title":"\ucd9c\ub825:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#2-2","text":"","title":"2. 2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc870\uc791"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#21","text":"2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0\ub294 \ub2e8\uc77c \ucc44\ub110 \ub370\uc774\ud130\ub85c, NumPy \ubc30\uc5f4\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.","title":"2.1 \uc774\ubbf8\uc9c0 \uc790\ub974\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_6","text":"import cv2 # \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 (y: 50~200, x: 100~300) cropped_image = image [ 50 : 200 , 100 : 300 ] # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Cropped Image\" , cropped_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#22","text":"\uc5ec\ub7ec \uc774\ubbf8\uc9c0\ub97c \uac00\ub85c \ub610\ub294 \uc138\ub85c\ub85c \ubd99\uc774\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.","title":"2.2 \uc774\ubbf8\uc9c0 \ubd99\uc774\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_7","text":"import cv2 import numpy as np # \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 cropped1 = image [ 50 : 200 , 100 : 300 ] cropped2 = image [ 200 : 350 , 300 : 500 ] # \uc138\ub85c\ub85c \ubd99\uc774\uae30 vertical_concat = np . vstack (( cropped1 , cropped2 )) # \uac00\ub85c\ub85c \ubd99\uc774\uae30 horizontal_concat = np . hstack (( cropped1 , cropped2 )) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Vertical Concatenation\" , vertical_concat ) cv2 . imshow ( \"Horizontal Concatenation\" , horizontal_concat ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#3-3","text":"","title":"3. 3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc870\uc791"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#31","text":"3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 Height x Width x Channels \ub85c \ud45c\ud604\ub418\uba70, \uac01 \ud53d\uc140\uc5d0 RGB(BGR) \uac12\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4.","title":"3.1 \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc790\ub974\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_8","text":"import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 (y: 50~200, x: 100~300) cropped_image = image [ 50 : 200 , 100 : 300 ] # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Cropped Image\" , cropped_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#32","text":"\uc774\ubbf8\uc9c0\uc5d0\uc11c R, G, B(BGR \uc21c\uc11c) \ucc44\ub110\uc744 \ubd84\ub9ac\ud558\uace0 \ubcd1\ud569\ud569\ub2c8\ub2e4.","title":"3.2 \ud2b9\uc815 \ucc44\ub110 \ubd84\ub9ac \ubc0f \ubcd1\ud569"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_9","text":"import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \ucc44\ub110 \ubd84\ub9ac b , g , r = cv2 . split ( image ) # \ud2b9\uc815 \ucc44\ub110 \uac15\uc870 (\uc608: R \ucc44\ub110\ub9cc \ub0a8\uae30\uae30) image_r = cv2 . merge (( b * 0 , g * 0 , r )) # R \ucc44\ub110 \uac15\uc870 # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Red Channel Highlight\" , image_r ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#33","text":"3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \uacbd\uc6b0\ub3c4 NumPy\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ub85c \ub610\ub294 \uc138\ub85c\ub85c \ubd99\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"3.3 \uc774\ubbf8\uc9c0 \ubd99\uc774\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_10","text":"import cv2 import numpy as np # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \uc774\ubbf8\uc9c0 \uc790\ub974\uae30 cropped1 = image [ 50 : 200 , 100 : 300 ] cropped2 = image [ 200 : 350 , 300 : 500 ] # \uc138\ub85c\ub85c \ubd99\uc774\uae30 vertical_concat = np . vstack (( cropped1 , cropped2 )) # \uac00\ub85c\ub85c \ubd99\uc774\uae30 horizontal_concat = np . hstack (( cropped1 , cropped2 )) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Vertical Concatenation\" , vertical_concat ) cv2 . imshow ( \"Horizontal Concatenation\" , horizontal_concat ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#4-2-3","text":"","title":"4. 2\ucc28\uc6d0\uacfc 3\ucc28\uc6d0 \uc774\ubbf8\uc9c0 \ud63c\ud569 \uc870\uc791"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#41","text":"\ud751\ubc31 \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \ucc44\ub110 \uc911 \ud558\ub098\ub85c \ucd94\uac00\ud558\uac70\ub098, \ubc30\uacbd\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"4.1 \ud751\ubc31 \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec \uc774\ubbf8\uc9c0\uc5d0 \ubcd1\ud569"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_11","text":"import cv2 import numpy as np # \uceec\ub7ec \uc774\ubbf8\uc9c0\uc640 \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc77d\uae30 color_image = cv2 . imread ( \"sample.jpg\" ) gray_image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) # \ud751\ubc31 \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec \ucc44\ub110\ub85c \ubcd1\ud569 (BGR\uc758 G \ucc44\ub110\ub85c \uc0ac\uc6a9) merged_image = cv2 . merge (( gray_image , gray_image , gray_image )) # \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ud751\ubc31 \uc774\ubbf8\uc9c0\ub85c \ubcc0\ud658 \ud6c4 \ubcd1\ud569 gray_from_color = cv2 . cvtColor ( color_image , cv2 . COLOR_BGR2GRAY ) combined = cv2 . merge (( gray_from_color , gray_image , gray_image )) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Merged Gray as Color\" , merged_image ) cv2 . imshow ( \"Combined Image\" , combined ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#5-3-2-grayscale","text":"\uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ud751\ubc31(Grayscale)\uc73c\ub85c \ubcc0\ud658\ud558\uc5ec \uc870\uc791\ud569\ub2c8\ub2e4.","title":"5. 3\ucc28\uc6d0 \uc774\ubbf8\uc9c0\ub97c 2\ucc28\uc6d0\uc73c\ub85c \ubcc0\ud658 (Grayscale)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#51","text":"import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ud751\ubc31\uc73c\ub85c \ubcc0\ud658 gray_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Grayscale Image\" , gray_image ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"5.1 \ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#6","text":"\uc774\ubbf8\uc9c0\uc5d0 \ud14d\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\uac70\ub098, \ud06c\uae30\ub97c \uc870\uc815\ud558\uc5ec \ubcd1\ud569\ud569\ub2c8\ub2e4.","title":"6. \uc774\ubbf8\uc9c0\uc5d0 \ud14d\uc2a4\ud2b8 \ucd94\uac00 \ubc0f \ubcd1\ud569"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#61","text":"import cv2 # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # \ud14d\uc2a4\ud2b8 \ucd94\uac00 text_image = image . copy () cv2 . putText ( text_image , \"Hello OpenCV\" , ( 50 , 50 ), cv2 . FONT_HERSHEY_SIMPLEX , 1 , ( 0 , 255 , 0 ), 2 ) # \uc790\ub978 \uc774\ubbf8\uc9c0\ub97c \ubd99\uc774\uae30 cropped = text_image [ 50 : 200 , 100 : 300 ] merged = cv2 . hconcat ([ text_image , cropped ]) # \uacb0\uacfc \ucd9c\ub825 cv2 . imshow ( \"Text Added Image\" , text_image ) cv2 . imshow ( \"Merged Image\" , merged ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"6.1 \ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgman/#_12","text":"2\ucc28\uc6d0 \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc870\uc791 : \uac04\ub2e8\ud55c NumPy \uc2ac\ub77c\uc774\uc2f1\uacfc \ubd99\uc774\uae30\ub85c \uc870\uc791. 3\ucc28\uc6d0 \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc870\uc791 : \ucc44\ub110 \ubd84\ub9ac/\ubcd1\ud569, \uc2ac\ub77c\uc774\uc2f1 \ub4f1\uc744 \uc0ac\uc6a9. \ud63c\ud569 \uc870\uc791 : \ud751\ubc31\uacfc \uceec\ub7ec\ub97c \uacb0\ud569\ud558\uac70\ub098 \ubcc0\ud658. OpenCV\uc758 \uae30\ubcf8 split , merge , resize , vstack , hstack \ud568\uc218\ub4e4\uc744 \uc801\uc808\ud788 \ud65c\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \uc774\ubbf8\uc9c0\ub97c \uc870\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/","text":"opencv \uc774\ubbf8\uc9c0\ucd9c\ub825 \uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud558\ub294 \ubc29\ubc95\uc740 OpenCV\uc640 Matplotlib\ub97c \uc0ac\uc6a9\ud558\ub294 \ub450 \uac00\uc9c0 \uc8fc\uc694 \ubc29\uc2dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub450 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc11c\ub85c \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud558\uba70, \uc0c1\ud638 \ub370\uc774\ud130 \ubcc0\ud658\uc744 \ud1b5\ud574 \uac01 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc7a5\uc810\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1. OpenCV\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825 OpenCV\uc758 imshow \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \ud654\uba74\uc5d0 \uc9c1\uc811 \ucd9c\ub825\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 # \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # OpenCV\ub294 \uc774\ubbf8\uc9c0\ub97c \uae30\ubcf8\uc801\uc73c\ub85c BGR \ud615\uc2dd\uc73c\ub85c \uc77d\uc74c. # OpenCV\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825 cv2 . imshow ( \"OpenCV Image\" , image ) # \ud0a4 \uc785\ub825 \ub300\uae30 cv2 . waitKey ( 0 ) # 0\uc774\uba74 \ubb34\ud55c \ub300\uae30, \ud2b9\uc815 \uc2dc\uac04(ms)\uc744 \uc785\ub825\ud558\uba74 \uadf8 \uc2dc\uac04\ub9cc\ud07c \ub300\uae30. cv2 . destroyAllWindows () \ud2b9\uc9d5: BGR \ud3ec\ub9f7 \uc0ac\uc6a9 : OpenCV\ub294 \uc774\ubbf8\uc9c0\ub97c BGR \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc2e4\uc2dc\uac04 \ucd9c\ub825 : imshow \ub294 \ucc3d\uc744 \uc5f4\uc5b4 \uc2e4\uc2dc\uac04\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4. GUI \ucc3d \uc0ac\uc6a9 : \ub3c5\ub9bd\uc801\uc778 GUI \ucc3d\uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. 2. Matplotlib\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825 Matplotlib\uc758 plt.imshow \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. Matplotlib\ub294 \uc774\ubbf8\uc9c0\ub97c \uae30\ubcf8\uc801\uc73c\ub85c RGB \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import matplotlib.pyplot as plt # \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # OpenCV\ub294 BGR \ud615\uc2dd\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uc74c. # BGR\uc744 RGB\ub85c \ubcc0\ud658 (Matplotlib\ub294 RGB \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac) image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # Matplotlib\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825 plt . imshow ( image_rgb ) plt . title ( \"Matplotlib Image\" ) plt . axis ( \"off\" ) # \ucd95 \uc81c\uac70 plt . show () \ud2b9\uc9d5: RGB \ud3ec\ub9f7 \uc0ac\uc6a9 : Matplotlib\ub294 \uc774\ubbf8\uc9c0\ub97c RGB \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud558\ubbc0\ub85c \ubcc0\ud658\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ud1b5\ud569 \ud658\uacbd\uc5d0\uc11c \ucd9c\ub825 : Jupyter Notebook \ub4f1\uc5d0\uc11c \uc2dc\uac01\ud654\uc5d0 \uc720\ub9ac\ud569\ub2c8\ub2e4. \ucd95 \uc635\uc158 : \ucd95 \uc81c\uac70, \ub77c\ubca8\ub9c1 \ub4f1 \uadf8\ub798\ud504 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. 3. OpenCV\uc640 Matplotlib \uac04 \ub370\uc774\ud130 \ubcc0\ud658 OpenCV\uc640 Matplotlib\ub294 \uc11c\ub85c \ub2e4\ub978 \uc0c9\uc0c1 \ud615\uc2dd\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud560 \ub54c \uc801\uc808\ud55c \uc0c9\uc0c1 \ubcc0\ud658\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ubcc0\ud658 \ubc29\ubc95: OpenCV (BGR) \u2192 Matplotlib (RGB) : image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) Matplotlib (RGB) \u2192 OpenCV (BGR) : image_bgr = cv2 . cvtColor ( image , cv2 . COLOR_RGB2BGR ) 4. \uc0c1\ud638 \ucd9c\ub825 \uc608\uc81c OpenCV\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 Matplotlib\ub85c \ucd9c\ub825 import cv2 import matplotlib.pyplot as plt # OpenCV\ub85c \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # BGR \ud615\uc2dd # BGR \u2192 RGB \ubcc0\ud658 image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # Matplotlib\ub85c \ucd9c\ub825 plt . imshow ( image_rgb ) plt . title ( \"Image in RGB (Matplotlib)\" ) plt . axis ( \"off\" ) plt . show () Matplotlib\ub85c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud558\uace0 OpenCV\ub85c \ucd9c\ub825 import cv2 import matplotlib.pyplot as plt import numpy as np # \uac00\uc0c1 \uc774\ubbf8\uc9c0 \uc0dd\uc131 (Matplotlib\uc5d0\uc11c \ucc98\ub9ac) image_rgb = np . zeros (( 300 , 300 , 3 ), dtype = np . uint8 ) image_rgb [:, : 150 ] = [ 255 , 0 , 0 ] # \uc67c\ucabd\uc740 \ube68\uac04\uc0c9 image_rgb [:, 150 :] = [ 0 , 255 , 0 ] # \uc624\ub978\ucabd\uc740 \ucd08\ub85d\uc0c9 # RGB \u2192 BGR \ubcc0\ud658 image_bgr = cv2 . cvtColor ( image_rgb , cv2 . COLOR_RGB2BGR ) # OpenCV\ub85c \ucd9c\ub825 cv2 . imshow ( \"Image in BGR (OpenCV)\" , image_bgr ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 5. OpenCV\uc640 Matplotlib\uc758 \ucd9c\ub825 \ucc28\uc774 \ud2b9\uc9d5 OpenCV Matplotlib \uc0c9\uc0c1 \ud3ec\ub9f7 BGR RGB \ucc3d \uad00\ub9ac \ub3c5\ub9bd\uc801\uc778 GUI \ucc3d Jupyter Notebook, \ud1b5\ud569 \ud658\uacbd \uc801\ud569 \ucd94\uac00 \uae30\ub2a5 \uc2e4\uc2dc\uac04 \ucc98\ub9ac, \ud0a4 \uc785\ub825 \uc774\ubca4\ud2b8 \uadf8\ub798\ud504 \uae30\ub2a5, \ucd95 \ud45c\uc2dc \ubc0f \uc81c\uac70 \uac00\ub2a5 \uc0ac\uc6a9 \uc0ac\ub840 \uc601\uc0c1 \ucc98\ub9ac, \uc2e4\uc2dc\uac04 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub370\uc774\ud130 \ubd84\uc11d \ubc0f \uc2dc\uac01\ud654 \uc694\uc57d OpenCV\ub294 \uc2e4\uc2dc\uac04 \ucc98\ub9ac \ubc0f \ud0a4 \uc785\ub825 \ub300\uae30 \uae30\ub2a5\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. Matplotlib\ub294 \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubc0f \ubd84\uc11d\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \ub450 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc0c9\uc0c1 \ud3ec\ub9f7\uc774 \ub2e4\ub974\ubbc0\ub85c \ubcc0\ud658( cv2.cvtColor )\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c \ud2b9\uc815 \ud65c\uc6a9 \uc0ac\ub840\ub098 \uc9c8\ubb38\uc774 \uc788\ub2e4\uba74 \ub9d0\uc500\ud574\uc8fc\uc138\uc694! \ud83d\ude0a","title":"opencv \uc774\ubbf8\uc9c0\ucd9c\ub825"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#opencv","text":"\uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud558\ub294 \ubc29\ubc95\uc740 OpenCV\uc640 Matplotlib\ub97c \uc0ac\uc6a9\ud558\ub294 \ub450 \uac00\uc9c0 \uc8fc\uc694 \ubc29\uc2dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub450 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc11c\ub85c \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud558\uba70, \uc0c1\ud638 \ub370\uc774\ud130 \ubcc0\ud658\uc744 \ud1b5\ud574 \uac01 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc7a5\uc810\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"opencv \uc774\ubbf8\uc9c0\ucd9c\ub825"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#1-opencv","text":"OpenCV\uc758 imshow \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \ud654\uba74\uc5d0 \uc9c1\uc811 \ucd9c\ub825\ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"1. OpenCV\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#_1","text":"import cv2 # \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # OpenCV\ub294 \uc774\ubbf8\uc9c0\ub97c \uae30\ubcf8\uc801\uc73c\ub85c BGR \ud615\uc2dd\uc73c\ub85c \uc77d\uc74c. # OpenCV\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825 cv2 . imshow ( \"OpenCV Image\" , image ) # \ud0a4 \uc785\ub825 \ub300\uae30 cv2 . waitKey ( 0 ) # 0\uc774\uba74 \ubb34\ud55c \ub300\uae30, \ud2b9\uc815 \uc2dc\uac04(ms)\uc744 \uc785\ub825\ud558\uba74 \uadf8 \uc2dc\uac04\ub9cc\ud07c \ub300\uae30. cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#_2","text":"BGR \ud3ec\ub9f7 \uc0ac\uc6a9 : OpenCV\ub294 \uc774\ubbf8\uc9c0\ub97c BGR \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc2e4\uc2dc\uac04 \ucd9c\ub825 : imshow \ub294 \ucc3d\uc744 \uc5f4\uc5b4 \uc2e4\uc2dc\uac04\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4. GUI \ucc3d \uc0ac\uc6a9 : \ub3c5\ub9bd\uc801\uc778 GUI \ucc3d\uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","title":"\ud2b9\uc9d5:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#2-matplotlib","text":"Matplotlib\uc758 plt.imshow \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. Matplotlib\ub294 \uc774\ubbf8\uc9c0\ub97c \uae30\ubcf8\uc801\uc73c\ub85c RGB \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4.","title":"2. Matplotlib\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#_3","text":"import cv2 import matplotlib.pyplot as plt # \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # OpenCV\ub294 BGR \ud615\uc2dd\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uc74c. # BGR\uc744 RGB\ub85c \ubcc0\ud658 (Matplotlib\ub294 RGB \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac) image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # Matplotlib\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825 plt . imshow ( image_rgb ) plt . title ( \"Matplotlib Image\" ) plt . axis ( \"off\" ) # \ucd95 \uc81c\uac70 plt . show ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#_4","text":"RGB \ud3ec\ub9f7 \uc0ac\uc6a9 : Matplotlib\ub294 \uc774\ubbf8\uc9c0\ub97c RGB \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud558\ubbc0\ub85c \ubcc0\ud658\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ud1b5\ud569 \ud658\uacbd\uc5d0\uc11c \ucd9c\ub825 : Jupyter Notebook \ub4f1\uc5d0\uc11c \uc2dc\uac01\ud654\uc5d0 \uc720\ub9ac\ud569\ub2c8\ub2e4. \ucd95 \uc635\uc158 : \ucd95 \uc81c\uac70, \ub77c\ubca8\ub9c1 \ub4f1 \uadf8\ub798\ud504 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"\ud2b9\uc9d5:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#3-opencv-matplotlib","text":"OpenCV\uc640 Matplotlib\ub294 \uc11c\ub85c \ub2e4\ub978 \uc0c9\uc0c1 \ud615\uc2dd\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud560 \ub54c \uc801\uc808\ud55c \uc0c9\uc0c1 \ubcc0\ud658\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","title":"3. OpenCV\uc640 Matplotlib \uac04 \ub370\uc774\ud130 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#_5","text":"OpenCV (BGR) \u2192 Matplotlib (RGB) : image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) Matplotlib (RGB) \u2192 OpenCV (BGR) : image_bgr = cv2 . cvtColor ( image , cv2 . COLOR_RGB2BGR )","title":"\ubcc0\ud658 \ubc29\ubc95:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#4","text":"","title":"4. \uc0c1\ud638 \ucd9c\ub825 \uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#opencv-matplotlib","text":"import cv2 import matplotlib.pyplot as plt # OpenCV\ub85c \uc774\ubbf8\uc9c0 \uc77d\uae30 image = cv2 . imread ( \"sample.jpg\" ) # BGR \ud615\uc2dd # BGR \u2192 RGB \ubcc0\ud658 image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # Matplotlib\ub85c \ucd9c\ub825 plt . imshow ( image_rgb ) plt . title ( \"Image in RGB (Matplotlib)\" ) plt . axis ( \"off\" ) plt . show ()","title":"OpenCV\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 Matplotlib\ub85c \ucd9c\ub825"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#matplotlib-opencv","text":"import cv2 import matplotlib.pyplot as plt import numpy as np # \uac00\uc0c1 \uc774\ubbf8\uc9c0 \uc0dd\uc131 (Matplotlib\uc5d0\uc11c \ucc98\ub9ac) image_rgb = np . zeros (( 300 , 300 , 3 ), dtype = np . uint8 ) image_rgb [:, : 150 ] = [ 255 , 0 , 0 ] # \uc67c\ucabd\uc740 \ube68\uac04\uc0c9 image_rgb [:, 150 :] = [ 0 , 255 , 0 ] # \uc624\ub978\ucabd\uc740 \ucd08\ub85d\uc0c9 # RGB \u2192 BGR \ubcc0\ud658 image_bgr = cv2 . cvtColor ( image_rgb , cv2 . COLOR_RGB2BGR ) # OpenCV\ub85c \ucd9c\ub825 cv2 . imshow ( \"Image in BGR (OpenCV)\" , image_bgr ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"Matplotlib\ub85c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud558\uace0 OpenCV\ub85c \ucd9c\ub825"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#5-opencv-matplotlib","text":"\ud2b9\uc9d5 OpenCV Matplotlib \uc0c9\uc0c1 \ud3ec\ub9f7 BGR RGB \ucc3d \uad00\ub9ac \ub3c5\ub9bd\uc801\uc778 GUI \ucc3d Jupyter Notebook, \ud1b5\ud569 \ud658\uacbd \uc801\ud569 \ucd94\uac00 \uae30\ub2a5 \uc2e4\uc2dc\uac04 \ucc98\ub9ac, \ud0a4 \uc785\ub825 \uc774\ubca4\ud2b8 \uadf8\ub798\ud504 \uae30\ub2a5, \ucd95 \ud45c\uc2dc \ubc0f \uc81c\uac70 \uac00\ub2a5 \uc0ac\uc6a9 \uc0ac\ub840 \uc601\uc0c1 \ucc98\ub9ac, \uc2e4\uc2dc\uac04 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub370\uc774\ud130 \ubd84\uc11d \ubc0f \uc2dc\uac01\ud654","title":"5. OpenCV\uc640 Matplotlib\uc758 \ucd9c\ub825 \ucc28\uc774"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_imgout/#_6","text":"OpenCV\ub294 \uc2e4\uc2dc\uac04 \ucc98\ub9ac \ubc0f \ud0a4 \uc785\ub825 \ub300\uae30 \uae30\ub2a5\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. Matplotlib\ub294 \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubc0f \ubd84\uc11d\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \ub450 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc0c9\uc0c1 \ud3ec\ub9f7\uc774 \ub2e4\ub974\ubbc0\ub85c \ubcc0\ud658( cv2.cvtColor )\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c \ud2b9\uc815 \ud65c\uc6a9 \uc0ac\ub840\ub098 \uc9c8\ubb38\uc774 \uc788\ub2e4\uba74 \ub9d0\uc500\ud574\uc8fc\uc138\uc694! \ud83d\ude0a","title":"\uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/","text":"jetson Orin Nano \ubcf4\ub4dc opencv \uc124\uce58 \uc77c\ubc18\uc124\uce58 OpenCV\ub97c \ucef4\ud30c\uc77c\ud558\uc9c0 \uc54a\uace0 \uc77c\ubc18\uc801\uc73c\ub85c \uc124\uce58\ud558\ub824\uba74, Jetson Orin Nano\uc5d0\uc11c **APT \ud328\ud0a4\uc9c0 \uad00\ub9ac\uc790\ub97c \ud1b5\ud574 \uc0ac\uc804 \ucef4\ud30c\uc77c\ub41c OpenCV \ud328\ud0a4\uc9c0**\ub97c \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. NVIDIA\ub294 Jetson \ubcf4\ub4dc\ub97c \uc704\ud574 \ucd5c\uc801\ud654\ub41c OpenCV \ubc84\uc804\uc744 \ubbf8\ub9ac \uc81c\uacf5\ud558\ubbc0\ub85c, \uc774 \ubc29\ubc95\uc740 \uac04\ud3b8\ud558\uace0 \uc2dc\uac04\uc744 \uc808\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1. \uc2dc\uc2a4\ud15c \uc5c5\ub370\uc774\ud2b8 \uc124\uce58\ub97c \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc2dc\uc2a4\ud15c \ud328\ud0a4\uc9c0\ub97c \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. sudo apt-get update sudo apt-get upgrade 2. OpenCV \uc124\uce58 Jetson Orin Nano\ub294 JetPack SDK\uc5d0 OpenCV\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c, \ud328\ud0a4\uc9c0 \uad00\ub9ac\uc790\ub97c \ud1b5\ud574 \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Python 3\uc6a9 OpenCV \uc124\uce58 sudo apt-get install python3-opencv \uc124\uce58 \ud655\uc778 Python\uc5d0\uc11c OpenCV\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.__version__)\" \ucd94\uac00 \ud655\uc778 (GStreamer \uc9c0\uc6d0) python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0 **GStreamer**\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 Jetson\uc758 GStreamer \ud50c\ub7ec\uadf8\uc778\uc774 \uc815\uc0c1\uc801\uc73c\ub85c \ud65c\uc131\ud654\ub41c \uac83\uc785\ub2c8\ub2e4. 3. \uc124\uce58\ub41c OpenCV \ubc84\uc804 \ud655\uc778 APT\ub97c \ud1b5\ud574 \uc124\uce58\ub41c OpenCV\uc758 \ubc84\uc804\uc744 \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. dpkg -l | grep libopencv 4. OpenCV\uc640 CUDA \uac00\uc18d \uc5ec\ubd80 \ud655\uc778 APT \ud328\ud0a4\uc9c0\ub97c \ud1b5\ud574 \uc124\uce58\ub41c OpenCV\ub294 Jetson \ud658\uacbd\uc5d0\uc11c \uae30\ubcf8\uc801\uc73c\ub85c **CUDA \uac00\uc18d**\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0\uc11c CUDA \ud56d\ubaa9\uc774 **YES**\ub85c \ud45c\uc2dc\ub418\uba74 CUDA \uac00\uc18d\uc774 \ud65c\uc131\ud654\ub41c \uc0c1\ud0dc\uc785\ub2c8\ub2e4. 5. \uc124\uce58\ub41c OpenCV \ud65c\uc6a9\ud558\uae30 APT\ub85c \uc124\uce58\ud55c OpenCV\ub294 Python\uacfc \ud568\uaed8 \ubc14\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uce74\uba54\ub77c \ud14c\uc2a4\ud2b8\uc640 \uac19\uc740 \uae30\ubcf8 \uc791\uc5c5\uc744 \uc2e4\ud589\ud558\uc5ec \uc124\uce58\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. \uac04\ub2e8\ud55c \uce74\uba54\ub77c \ud14c\uc2a4\ud2b8 \ucf54\ub4dc: import cv2 cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) exit () while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break cv2 . imshow ( \"Camera Feed\" , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () APT\ub85c \uc124\uce58\ud55c OpenCV\uc758 \uc7a5\uc810 \uac04\ub2e8\ud558\uace0 \ube60\ub984 : \uc18c\uc2a4 \ucef4\ud30c\uc77c \uacfc\uc815 \uc5c6\uc774 \uc124\uce58\ud560 \uc218 \uc788\uc5b4 \uc2dc\uac04\uc774 \uc808\uc57d\ub429\ub2c8\ub2e4. Jetson \ud658\uacbd\uc5d0 \ucd5c\uc801\ud654 : NVIDIA\uac00 \uc81c\uacf5\ud558\ub294 \ud328\ud0a4\uc9c0\ub294 \uae30\ubcf8\uc801\uc73c\ub85c CUDA \uac00\uc18d \ubc0f GStreamer\uc640 \ud638\ud658\ub429\ub2c8\ub2e4. \uc81c\ud55c \uc0ac\ud56d APT \ud328\ud0a4\uc9c0\ub294 OpenCV\uc758 \ucd5c\uc2e0 \ubc84\uc804\uc774 \uc544\ub2d0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. OpenCV\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc740 \uc77c\ubd80 \ucd94\uac00 \ubaa8\ub4c8(OpenCV Contrib \ubaa8\ub4c8 \ub4f1)\uc740 \uc0ac\uc6a9\uc774 \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\uc124\uce58(\uc7ac\ucef4\ud30c\uc77c) Jetson Orin Nano\uc5d0\uc11c OpenCV\ub97c \uc124\uce58\ud558\ub294 \ubc29\ubc95\uc740 Jetson Nano\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, Jetson Orin Nano\uc758 \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud558\ub824\uba74 NVIDIA\uc758 **CUDA \uac00\uc18d**\uc744 \ud3ec\ud568\ud558\ub3c4\ub85d OpenCV\ub97c \ube4c\ub4dc\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc544\ub798\ub294 Jetson Orin Nano\uc5d0 OpenCV\ub97c \uc124\uce58\ud558\ub294 \ub2e8\uacc4\ubcc4 \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4. 1. Jetson Orin Nano \uc2dc\uc2a4\ud15c \uc5c5\ub370\uc774\ud2b8 Jetson Orin Nano\ub97c \ucd5c\uc2e0 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ud558\uae30 \uc704\ud574 \uba3c\uc800 \uc2dc\uc2a4\ud15c\uc744 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. sudo apt-get update sudo apt-get upgrade 2. \ud544\uc218 \ud328\ud0a4\uc9c0 \uc124\uce58 OpenCV \uc124\uce58\ub97c \uc704\ud574 \ud544\uc694\ud55c \ud544\uc218 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install -y python3-dev python3-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev sudo apt-get install -y gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev 3. CUDA \ubc0f cuDNN \ud655\uc778 Jetson Orin Nano\uc5d0\ub294 CUDA\uc640 cuDNN\uc774 \uae30\ubcf8 \uc124\uce58\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uba85\ub839\uc73c\ub85c \ubc84\uc804\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. nvcc --version 4. OpenCV \uc18c\uc2a4 \ucf54\ub4dc \ub2e4\uc6b4\ub85c\ub4dc OpenCV\uc640 \ucd94\uac00 \ubaa8\ub4c8(OpenCV Contrib)\uc744 GitHub\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc\ud569\ub2c8\ub2e4. cd ~ git clone https://github.com/opencv/opencv.git git clone https://github.com/opencv/opencv_contrib.git 5. CMake\ub85c OpenCV \ube4c\ub4dc \uc124\uc815 \ube4c\ub4dc \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud558\uace0 OpenCV\ub97c CUDA \uc9c0\uc6d0\uc73c\ub85c \uad6c\uc131\ud569\ub2c8\ub2e4. cd ~/opencv mkdir build cd build cmake \\ -D CMAKE_BUILD_TYPE = Release \\ -D CMAKE_INSTALL_PREFIX = /usr/local \\ -D OPENCV_EXTRA_MODULES_PATH = ~/opencv_contrib/modules \\ -D WITH_CUDA = ON \\ -D ENABLE_FAST_MATH = 1 \\ -D CUDA_FAST_MATH = 1 \\ -D WITH_CUDNN = ON \\ -D OPENCV_DNN_CUDA = ON \\ -D BUILD_opencv_python3 = ON \\ -D PYTHON3_EXECUTABLE = $( which python3 ) \\ -D BUILD_EXAMPLES = ON .. 6. OpenCV \ube4c\ub4dc \ubc0f \uc124\uce58 Jetson Orin Nano\ub294 \uba40\ud2f0\ucf54\uc5b4 \ud504\ub85c\uc138\uc11c\ub97c \uc9c0\uc6d0\ud558\ubbc0\ub85c -j \uc635\uc158\uc73c\ub85c \ube4c\ub4dc \uc18d\ub3c4\ub97c \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. make -j $( nproc ) sudo make install sudo ldconfig 7. \uc124\uce58 \ud655\uc778 Python \ud658\uacbd\uc5d0\uc11c OpenCV\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.__version__)\" 8. GStreamer \ud50c\ub7ec\uadf8\uc778 \ud65c\uc131\ud654 (\uc120\ud0dd \uc0ac\ud56d) Jetson Orin Nano\uc5d0\uc11c \uce74\uba54\ub77c\uc640 GStreamer\ub97c \ud65c\uc6a9\ud558\ub824\uba74 OpenCV\uac00 GStreamer\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0 **GStreamer**\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 \uc131\uacf5\uc801\uc73c\ub85c \uc124\uce58\ub41c \uac83\uc785\ub2c8\ub2e4. \ud3ec\ud568\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ube4c\ub4dc \ub2e8\uacc4\uc5d0\uc11c -D WITH_GSTREAMER=ON \uc744 \ucd94\uac00\ud558\uace0 \ub2e4\uc2dc \ube4c\ub4dc\ud558\uc138\uc694. 9. CUDA \uc9c0\uc6d0 \ud655\uc778 (\uc120\ud0dd \uc0ac\ud56d) OpenCV\uac00 CUDA\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0 **CUDA YES**\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 CUDA \uc9c0\uc6d0\uc774 \ud65c\uc131\ud654\ub41c \uc0c1\ud0dc\uc785\ub2c8\ub2e4. \ucc38\uace0 \uc0ac\ud56d OpenCV \ube4c\ub4dc \ubc0f \uc124\uce58\ub294 \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58 \uc911 Jetson Orin Nano\uc758 CPU\uc640 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc774 \uc99d\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Jetson Orin Nano\ub294 \ub192\uc740 \uc131\ub2a5\uc758 GPU\ub97c \uc81c\uacf5\ud558\ubbc0\ub85c CUDA \uac00\uc18d\uc744 \uc0ac\uc6a9\ud558\ub294 OpenCV \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubc1c\ud718\ud569\ub2c8\ub2e4.","title":"\uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#jetson-orin-nano-opencv","text":"","title":"jetson Orin Nano \ubcf4\ub4dc opencv \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#_1","text":"OpenCV\ub97c \ucef4\ud30c\uc77c\ud558\uc9c0 \uc54a\uace0 \uc77c\ubc18\uc801\uc73c\ub85c \uc124\uce58\ud558\ub824\uba74, Jetson Orin Nano\uc5d0\uc11c **APT \ud328\ud0a4\uc9c0 \uad00\ub9ac\uc790\ub97c \ud1b5\ud574 \uc0ac\uc804 \ucef4\ud30c\uc77c\ub41c OpenCV \ud328\ud0a4\uc9c0**\ub97c \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. NVIDIA\ub294 Jetson \ubcf4\ub4dc\ub97c \uc704\ud574 \ucd5c\uc801\ud654\ub41c OpenCV \ubc84\uc804\uc744 \ubbf8\ub9ac \uc81c\uacf5\ud558\ubbc0\ub85c, \uc774 \ubc29\ubc95\uc740 \uac04\ud3b8\ud558\uace0 \uc2dc\uac04\uc744 \uc808\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc77c\ubc18\uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#1","text":"\uc124\uce58\ub97c \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc2dc\uc2a4\ud15c \ud328\ud0a4\uc9c0\ub97c \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. sudo apt-get update sudo apt-get upgrade","title":"1. \uc2dc\uc2a4\ud15c \uc5c5\ub370\uc774\ud2b8"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#2-opencv","text":"Jetson Orin Nano\ub294 JetPack SDK\uc5d0 OpenCV\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c, \ud328\ud0a4\uc9c0 \uad00\ub9ac\uc790\ub97c \ud1b5\ud574 \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"2. OpenCV \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#python-3-opencv","text":"sudo apt-get install python3-opencv","title":"Python 3\uc6a9 OpenCV \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#_2","text":"Python\uc5d0\uc11c OpenCV\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.__version__)\"","title":"\uc124\uce58 \ud655\uc778"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#gstreamer","text":"python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0 **GStreamer**\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 Jetson\uc758 GStreamer \ud50c\ub7ec\uadf8\uc778\uc774 \uc815\uc0c1\uc801\uc73c\ub85c \ud65c\uc131\ud654\ub41c \uac83\uc785\ub2c8\ub2e4.","title":"\ucd94\uac00 \ud655\uc778 (GStreamer \uc9c0\uc6d0)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#3-opencv","text":"APT\ub97c \ud1b5\ud574 \uc124\uce58\ub41c OpenCV\uc758 \ubc84\uc804\uc744 \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. dpkg -l | grep libopencv","title":"3. \uc124\uce58\ub41c OpenCV \ubc84\uc804 \ud655\uc778"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#4-opencv-cuda","text":"APT \ud328\ud0a4\uc9c0\ub97c \ud1b5\ud574 \uc124\uce58\ub41c OpenCV\ub294 Jetson \ud658\uacbd\uc5d0\uc11c \uae30\ubcf8\uc801\uc73c\ub85c **CUDA \uac00\uc18d**\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0\uc11c CUDA \ud56d\ubaa9\uc774 **YES**\ub85c \ud45c\uc2dc\ub418\uba74 CUDA \uac00\uc18d\uc774 \ud65c\uc131\ud654\ub41c \uc0c1\ud0dc\uc785\ub2c8\ub2e4.","title":"4. OpenCV\uc640 CUDA \uac00\uc18d \uc5ec\ubd80 \ud655\uc778"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#5-opencv","text":"APT\ub85c \uc124\uce58\ud55c OpenCV\ub294 Python\uacfc \ud568\uaed8 \ubc14\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uce74\uba54\ub77c \ud14c\uc2a4\ud2b8\uc640 \uac19\uc740 \uae30\ubcf8 \uc791\uc5c5\uc744 \uc2e4\ud589\ud558\uc5ec \uc124\uce58\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","title":"5. \uc124\uce58\ub41c OpenCV \ud65c\uc6a9\ud558\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#_3","text":"import cv2 cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) exit () while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break cv2 . imshow ( \"Camera Feed\" , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows ()","title":"\uac04\ub2e8\ud55c \uce74\uba54\ub77c \ud14c\uc2a4\ud2b8 \ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#apt-opencv","text":"\uac04\ub2e8\ud558\uace0 \ube60\ub984 : \uc18c\uc2a4 \ucef4\ud30c\uc77c \uacfc\uc815 \uc5c6\uc774 \uc124\uce58\ud560 \uc218 \uc788\uc5b4 \uc2dc\uac04\uc774 \uc808\uc57d\ub429\ub2c8\ub2e4. Jetson \ud658\uacbd\uc5d0 \ucd5c\uc801\ud654 : NVIDIA\uac00 \uc81c\uacf5\ud558\ub294 \ud328\ud0a4\uc9c0\ub294 \uae30\ubcf8\uc801\uc73c\ub85c CUDA \uac00\uc18d \ubc0f GStreamer\uc640 \ud638\ud658\ub429\ub2c8\ub2e4.","title":"APT\ub85c \uc124\uce58\ud55c OpenCV\uc758 \uc7a5\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#_4","text":"APT \ud328\ud0a4\uc9c0\ub294 OpenCV\uc758 \ucd5c\uc2e0 \ubc84\uc804\uc774 \uc544\ub2d0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. OpenCV\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc740 \uc77c\ubd80 \ucd94\uac00 \ubaa8\ub4c8(OpenCV Contrib \ubaa8\ub4c8 \ub4f1)\uc740 \uc0ac\uc6a9\uc774 \uc81c\ud55c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc81c\ud55c \uc0ac\ud56d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#_5","text":"Jetson Orin Nano\uc5d0\uc11c OpenCV\ub97c \uc124\uce58\ud558\ub294 \ubc29\ubc95\uc740 Jetson Nano\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, Jetson Orin Nano\uc758 \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud558\ub824\uba74 NVIDIA\uc758 **CUDA \uac00\uc18d**\uc744 \ud3ec\ud568\ud558\ub3c4\ub85d OpenCV\ub97c \ube4c\ub4dc\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc544\ub798\ub294 Jetson Orin Nano\uc5d0 OpenCV\ub97c \uc124\uce58\ud558\ub294 \ub2e8\uacc4\ubcc4 \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4.","title":"\uc0ac\uc6a9\uc790\uc124\uce58(\uc7ac\ucef4\ud30c\uc77c)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#1-jetson-orin-nano","text":"Jetson Orin Nano\ub97c \ucd5c\uc2e0 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ud558\uae30 \uc704\ud574 \uba3c\uc800 \uc2dc\uc2a4\ud15c\uc744 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. sudo apt-get update sudo apt-get upgrade","title":"1. Jetson Orin Nano \uc2dc\uc2a4\ud15c \uc5c5\ub370\uc774\ud2b8"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#2","text":"OpenCV \uc124\uce58\ub97c \uc704\ud574 \ud544\uc694\ud55c \ud544\uc218 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install -y python3-dev python3-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev sudo apt-get install -y gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev","title":"2. \ud544\uc218 \ud328\ud0a4\uc9c0 \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#3-cuda-cudnn","text":"Jetson Orin Nano\uc5d0\ub294 CUDA\uc640 cuDNN\uc774 \uae30\ubcf8 \uc124\uce58\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uba85\ub839\uc73c\ub85c \ubc84\uc804\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. nvcc --version","title":"3. CUDA \ubc0f cuDNN \ud655\uc778"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#4-opencv","text":"OpenCV\uc640 \ucd94\uac00 \ubaa8\ub4c8(OpenCV Contrib)\uc744 GitHub\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc\ud569\ub2c8\ub2e4. cd ~ git clone https://github.com/opencv/opencv.git git clone https://github.com/opencv/opencv_contrib.git","title":"4. OpenCV \uc18c\uc2a4 \ucf54\ub4dc \ub2e4\uc6b4\ub85c\ub4dc"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#5-cmake-opencv","text":"\ube4c\ub4dc \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud558\uace0 OpenCV\ub97c CUDA \uc9c0\uc6d0\uc73c\ub85c \uad6c\uc131\ud569\ub2c8\ub2e4. cd ~/opencv mkdir build cd build cmake \\ -D CMAKE_BUILD_TYPE = Release \\ -D CMAKE_INSTALL_PREFIX = /usr/local \\ -D OPENCV_EXTRA_MODULES_PATH = ~/opencv_contrib/modules \\ -D WITH_CUDA = ON \\ -D ENABLE_FAST_MATH = 1 \\ -D CUDA_FAST_MATH = 1 \\ -D WITH_CUDNN = ON \\ -D OPENCV_DNN_CUDA = ON \\ -D BUILD_opencv_python3 = ON \\ -D PYTHON3_EXECUTABLE = $( which python3 ) \\ -D BUILD_EXAMPLES = ON ..","title":"5. CMake\ub85c OpenCV \ube4c\ub4dc \uc124\uc815"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#6-opencv","text":"Jetson Orin Nano\ub294 \uba40\ud2f0\ucf54\uc5b4 \ud504\ub85c\uc138\uc11c\ub97c \uc9c0\uc6d0\ud558\ubbc0\ub85c -j \uc635\uc158\uc73c\ub85c \ube4c\ub4dc \uc18d\ub3c4\ub97c \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. make -j $( nproc ) sudo make install sudo ldconfig","title":"6. OpenCV \ube4c\ub4dc \ubc0f \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#7","text":"Python \ud658\uacbd\uc5d0\uc11c OpenCV\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.__version__)\"","title":"7. \uc124\uce58 \ud655\uc778"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#8-gstreamer","text":"Jetson Orin Nano\uc5d0\uc11c \uce74\uba54\ub77c\uc640 GStreamer\ub97c \ud65c\uc6a9\ud558\ub824\uba74 OpenCV\uac00 GStreamer\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0 **GStreamer**\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 \uc131\uacf5\uc801\uc73c\ub85c \uc124\uce58\ub41c \uac83\uc785\ub2c8\ub2e4. \ud3ec\ud568\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ube4c\ub4dc \ub2e8\uacc4\uc5d0\uc11c -D WITH_GSTREAMER=ON \uc744 \ucd94\uac00\ud558\uace0 \ub2e4\uc2dc \ube4c\ub4dc\ud558\uc138\uc694.","title":"8. GStreamer \ud50c\ub7ec\uadf8\uc778 \ud65c\uc131\ud654 (\uc120\ud0dd \uc0ac\ud56d)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#9-cuda","text":"OpenCV\uac00 CUDA\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. python3 -c \"import cv2; print(cv2.getBuildInformation())\" \ucd9c\ub825\uc5d0 **CUDA YES**\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 CUDA \uc9c0\uc6d0\uc774 \ud65c\uc131\ud654\ub41c \uc0c1\ud0dc\uc785\ub2c8\ub2e4.","title":"9. CUDA \uc9c0\uc6d0 \ud655\uc778 (\uc120\ud0dd \uc0ac\ud56d)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_install/#_6","text":"OpenCV \ube4c\ub4dc \ubc0f \uc124\uce58\ub294 \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58 \uc911 Jetson Orin Nano\uc758 CPU\uc640 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc774 \uc99d\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Jetson Orin Nano\ub294 \ub192\uc740 \uc131\ub2a5\uc758 GPU\ub97c \uc81c\uacf5\ud558\ubbc0\ub85c CUDA \uac00\uc18d\uc744 \uc0ac\uc6a9\ud558\ub294 OpenCV \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubc1c\ud718\ud569\ub2c8\ub2e4.","title":"\ucc38\uace0 \uc0ac\ud56d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/","text":"Jetson Nano Board \uc801\uc6a9\uc608\uc81c Jetson Nano\uc5d0\uc11c OpenCV\ub97c \ud65c\uc6a9\ud55c \ub2e4\uc591\ud55c \uc608\uc81c \ud504\ub85c\uadf8\ub7a8\uc744 \uc18c\uac1c\ud569\ub2c8\ub2e4. \uc544\ub798\ub294 Jetson Nano\uc5d0\uc11c \uc2e4\ud589 \uac00\ub2a5\ud55c \uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8 \uc608\uc81c\uc785\ub2c8\ub2e4. 1. \uce74\uba54\ub77c \ucea1\ucc98 \ubc0f \ub514\uc2a4\ud50c\ub808\uc774 Jetson Nano\uc758 CSI \uce74\uba54\ub77c \ub610\ub294 USB \uce74\uba54\ub77c\ub85c \uc601\uc0c1\uc744 \uc2e4\uc2dc\uac04\uc73c\ub85c \ucea1\ucc98\ud558\uace0 \ub514\uc2a4\ud50c\ub808\uc774\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 def main (): cap = cv2 . VideoCapture ( 0 ) # \uce74\uba54\ub77c \uc778\ub371\uc2a4 (CSI \uce74\uba54\ub77c \uc0ac\uc6a9 \uc2dc: 0) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break cv2 . imshow ( \"Camera Feed\" , frame ) # 'q'\ub97c \ub204\ub974\uba74 \uc885\ub8cc if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () 2. \uc5bc\uad74 \uc778\uc2dd Haarcascade\ub97c \uc0ac\uc6a9\ud558\uc5ec Jetson Nano\uc5d0\uc11c \uce74\uba54\ub77c \uc785\ub825\uc73c\ub85c \uc5bc\uad74\uc744 \uac10\uc9c0\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 def main (): face_cascade = cv2 . CascadeClassifier ( cv2 . data . haarcascades + \"haarcascade_frontalface_default.xml\" ) cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break gray = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2GRAY ) # \uadf8\ub808\uc774\uc2a4\ucf00\uc77c \ubcc0\ud658 faces = face_cascade . detectMultiScale ( gray , 1.3 , 5 ) # \uc5bc\uad74 \ud0d0\uc9c0 for ( x , y , w , h ) in faces : cv2 . rectangle ( frame , ( x , y ), ( x + w , y + h ), ( 255 , 0 , 0 ), 2 ) cv2 . imshow ( \"Face Detection\" , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () 3. \uac1d\uccb4 \ucd94\uc801 (HSV \uc0c9\uc0c1 \uae30\ubc18) HSV \uc0c9\uc0c1 \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud2b9\uc815 \uc0c9\uc0c1\uc758 \uac1d\uccb4\ub97c \ucd94\uc801\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 import numpy as np def main (): cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break hsv = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2HSV ) # \ube68\uac04\uc0c9 \ubc94\uc704 \uc815\uc758 lower_red = np . array ([ 0 , 120 , 70 ]) upper_red = np . array ([ 10 , 255 , 255 ]) mask = cv2 . inRange ( hsv , lower_red , upper_red ) # \ub9c8\uc2a4\ud06c\ub97c \uc6d0\ubcf8 \uc601\uc0c1\uc5d0 \uc801\uc6a9 result = cv2 . bitwise_and ( frame , frame , mask = mask ) cv2 . imshow ( \"Original Frame\" , frame ) cv2 . imshow ( \"Tracked Object\" , result ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () 4. \uc5e3\uc9c0 \uac80\ucd9c Canny \uc5e3\uc9c0 \uac80\ucd9c\uae30\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\uc758 \uac00\uc7a5\uc790\ub9ac\ub9cc \ud45c\uc2dc\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 def main (): image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return edges = cv2 . Canny ( image , 100 , 200 ) cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Edge Detection\" , edges ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () 5. \ubaa8\uc158 \uac10\uc9c0 \ud504\ub808\uc784 \uac04 \ucc28\uc774\ub97c \uacc4\uc0b0\ud558\uc5ec \uc6c0\uc9c1\uc784\uc744 \uac10\uc9c0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 def main (): cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return ret , frame1 = cap . read () ret , frame2 = cap . read () while ret : diff = cv2 . absdiff ( frame1 , frame2 ) gray = cv2 . cvtColor ( diff , cv2 . COLOR_BGR2GRAY ) blur = cv2 . GaussianBlur ( gray , ( 5 , 5 ), 0 ) _ , thresh = cv2 . threshold ( blur , 20 , 255 , cv2 . THRESH_BINARY ) dilated = cv2 . dilate ( thresh , None , iterations = 3 ) contours , _ = cv2 . findContours ( dilated , cv2 . RETR_TREE , cv2 . CHAIN_APPROX_SIMPLE ) for contour in contours : if cv2 . contourArea ( contour ) < 500 : continue x , y , w , h = cv2 . boundingRect ( contour ) cv2 . rectangle ( frame1 , ( x , y ), ( x + w , y + h ), ( 0 , 255 , 0 ), 2 ) cv2 . imshow ( \"Motion Detection\" , frame1 ) frame1 = frame2 ret , frame2 = cap . read () if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main () \ucd94\uac00 \ud301 Jetson Nano\uc5d0\uc11c OpenCV \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud558\ub824\uba74 CUDA\ub97c \ud65c\uc131\ud654\ud558\uace0 GPU \uac00\uc18d\uc744 \ud65c\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uc124\uce58\ub41c OpenCV\uac00 CUDA\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 \uc544\ub798 \uba85\ub839\uc744 \uc2e4\ud589\ud558\uc138\uc694: import cv2 print ( cv2 . getBuildInformation ()) \uc774 \ucf54\ub4dc\ub97c Jetson Nano\uc5d0\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4. \ud83d\ude0a","title":"\uc82f\uc2a8\ubcf4\ub4dc\uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#jetson-nano-board","text":"Jetson Nano\uc5d0\uc11c OpenCV\ub97c \ud65c\uc6a9\ud55c \ub2e4\uc591\ud55c \uc608\uc81c \ud504\ub85c\uadf8\ub7a8\uc744 \uc18c\uac1c\ud569\ub2c8\ub2e4. \uc544\ub798\ub294 Jetson Nano\uc5d0\uc11c \uc2e4\ud589 \uac00\ub2a5\ud55c \uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"Jetson Nano Board \uc801\uc6a9\uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#1","text":"Jetson Nano\uc758 CSI \uce74\uba54\ub77c \ub610\ub294 USB \uce74\uba54\ub77c\ub85c \uc601\uc0c1\uc744 \uc2e4\uc2dc\uac04\uc73c\ub85c \ucea1\ucc98\ud558\uace0 \ub514\uc2a4\ud50c\ub808\uc774\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4.","title":"1. \uce74\uba54\ub77c \ucea1\ucc98 \ubc0f \ub514\uc2a4\ud50c\ub808\uc774"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#_1","text":"import cv2 def main (): cap = cv2 . VideoCapture ( 0 ) # \uce74\uba54\ub77c \uc778\ub371\uc2a4 (CSI \uce74\uba54\ub77c \uc0ac\uc6a9 \uc2dc: 0) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break cv2 . imshow ( \"Camera Feed\" , frame ) # 'q'\ub97c \ub204\ub974\uba74 \uc885\ub8cc if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#2","text":"Haarcascade\ub97c \uc0ac\uc6a9\ud558\uc5ec Jetson Nano\uc5d0\uc11c \uce74\uba54\ub77c \uc785\ub825\uc73c\ub85c \uc5bc\uad74\uc744 \uac10\uc9c0\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"2. \uc5bc\uad74 \uc778\uc2dd"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#_2","text":"import cv2 def main (): face_cascade = cv2 . CascadeClassifier ( cv2 . data . haarcascades + \"haarcascade_frontalface_default.xml\" ) cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break gray = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2GRAY ) # \uadf8\ub808\uc774\uc2a4\ucf00\uc77c \ubcc0\ud658 faces = face_cascade . detectMultiScale ( gray , 1.3 , 5 ) # \uc5bc\uad74 \ud0d0\uc9c0 for ( x , y , w , h ) in faces : cv2 . rectangle ( frame , ( x , y ), ( x + w , y + h ), ( 255 , 0 , 0 ), 2 ) cv2 . imshow ( \"Face Detection\" , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#3-hsv","text":"HSV \uc0c9\uc0c1 \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud2b9\uc815 \uc0c9\uc0c1\uc758 \uac1d\uccb4\ub97c \ucd94\uc801\ud569\ub2c8\ub2e4.","title":"3. \uac1d\uccb4 \ucd94\uc801 (HSV \uc0c9\uc0c1 \uae30\ubc18)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#_3","text":"import cv2 import numpy as np def main (): cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return while True : ret , frame = cap . read () if not ret : print ( \"\ud504\ub808\uc784\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) break hsv = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2HSV ) # \ube68\uac04\uc0c9 \ubc94\uc704 \uc815\uc758 lower_red = np . array ([ 0 , 120 , 70 ]) upper_red = np . array ([ 10 , 255 , 255 ]) mask = cv2 . inRange ( hsv , lower_red , upper_red ) # \ub9c8\uc2a4\ud06c\ub97c \uc6d0\ubcf8 \uc601\uc0c1\uc5d0 \uc801\uc6a9 result = cv2 . bitwise_and ( frame , frame , mask = mask ) cv2 . imshow ( \"Original Frame\" , frame ) cv2 . imshow ( \"Tracked Object\" , result ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#4","text":"Canny \uc5e3\uc9c0 \uac80\ucd9c\uae30\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\uc758 \uac00\uc7a5\uc790\ub9ac\ub9cc \ud45c\uc2dc\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"4. \uc5e3\uc9c0 \uac80\ucd9c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#_4","text":"import cv2 def main (): image = cv2 . imread ( \"sample.jpg\" , cv2 . IMREAD_GRAYSCALE ) if image is None : print ( \"\uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return edges = cv2 . Canny ( image , 100 , 200 ) cv2 . imshow ( \"Original Image\" , image ) cv2 . imshow ( \"Edge Detection\" , edges ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#5","text":"\ud504\ub808\uc784 \uac04 \ucc28\uc774\ub97c \uacc4\uc0b0\ud558\uc5ec \uc6c0\uc9c1\uc784\uc744 \uac10\uc9c0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4.","title":"5. \ubaa8\uc158 \uac10\uc9c0"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#_5","text":"import cv2 def main (): cap = cv2 . VideoCapture ( 0 ) if not cap . isOpened (): print ( \"\uce74\uba54\ub77c\ub97c \uc5f4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\" ) return ret , frame1 = cap . read () ret , frame2 = cap . read () while ret : diff = cv2 . absdiff ( frame1 , frame2 ) gray = cv2 . cvtColor ( diff , cv2 . COLOR_BGR2GRAY ) blur = cv2 . GaussianBlur ( gray , ( 5 , 5 ), 0 ) _ , thresh = cv2 . threshold ( blur , 20 , 255 , cv2 . THRESH_BINARY ) dilated = cv2 . dilate ( thresh , None , iterations = 3 ) contours , _ = cv2 . findContours ( dilated , cv2 . RETR_TREE , cv2 . CHAIN_APPROX_SIMPLE ) for contour in contours : if cv2 . contourArea ( contour ) < 500 : continue x , y , w , h = cv2 . boundingRect ( contour ) cv2 . rectangle ( frame1 , ( x , y ), ( x + w , y + h ), ( 0 , 255 , 0 ), 2 ) cv2 . imshow ( \"Motion Detection\" , frame1 ) frame1 = frame2 ret , frame2 = cap . read () if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cap . release () cv2 . destroyAllWindows () if __name__ == \"__main__\" : main ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_jetson/#_6","text":"Jetson Nano\uc5d0\uc11c OpenCV \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud558\ub824\uba74 CUDA\ub97c \ud65c\uc131\ud654\ud558\uace0 GPU \uac00\uc18d\uc744 \ud65c\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uc124\uce58\ub41c OpenCV\uac00 CUDA\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 \uc544\ub798 \uba85\ub839\uc744 \uc2e4\ud589\ud558\uc138\uc694: import cv2 print ( cv2 . getBuildInformation ()) \uc774 \ucf54\ub4dc\ub97c Jetson Nano\uc5d0\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4. \ud83d\ude0a","title":"\ucd94\uac00 \ud301"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/","text":"NumPy (Numerical Python) NumPy\ub294 Python\uc5d0\uc11c \uc218\uce58 \uc5f0\uc0b0\uacfc \uacfc\ud559 \uacc4\uc0b0\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 **\uc624\ud508\uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac**\uc785\ub2c8\ub2e4. \ud2b9\ud788 **\ub2e4\ucc28\uc6d0 \ubc30\uc5f4(NumPy Array)**\uacfc \uc774\ub97c \uae30\ubc18\uc73c\ub85c \ud558\ub294 \ub2e4\uc591\ud55c \uc5f0\uc0b0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uc5ec \ub370\uc774\ud130 \ucc98\ub9ac\uc640 \ubd84\uc11d\uc5d0\uc11c \ud575\uc2ec\uc801\uc778 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. NumPy\uc758 \uc8fc\uc694 \ud2b9\uc9d5 \ub2e4\ucc28\uc6d0 \ubc30\uc5f4 \uac1d\uccb4 : NumPy\uc758 \ud575\uc2ec \ub370\uc774\ud130 \uad6c\uc870\ub294 ndarray \ub85c, \ub2e4\uc591\ud55c \ucc28\uc6d0\uc758 \ubc30\uc5f4(1D, 2D, 3D \ub4f1)\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ubc30\uc5f4\uc740 \uc77c\ubc18 Python \ub9ac\uc2a4\ud2b8\ubcf4\ub2e4 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc774\uace0 \uc5f0\uc0b0 \uc18d\ub3c4\uac00 \ube60\ub985\ub2c8\ub2e4. \ubca1\ud130\ud654 \uc5f0\uc0b0 (Vectorization) : \ubc18\ubcf5\ubb38 \uc5c6\uc774 \ubc30\uc5f4 \uc804\uccb4\uc5d0 \ub300\ud574 \uc5f0\uc0b0\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc5b4 \ucf54\ub4dc\uac00 \uac04\uacb0\ud558\uace0 \uc2e4\ud589 \uc18d\ub3c4\uac00 \ube60\ub985\ub2c8\ub2e4. \uc608: \ubc30\uc5f4\uc758 \ubaa8\ub4e0 \uc694\uc18c\uc5d0 2\ub97c \ub354\ud558\uae30, \uc694\uc18c\ubcc4 \uacf1\uc148 \ub4f1. \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305 : \ud06c\uae30\uac00 \ub2e4\ub978 \ubc30\uc5f4 \uac04\uc5d0\ub3c4 \uc5f0\uc0b0\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \uc790\ub3d9\uc73c\ub85c \ud06c\uae30\ub97c \ub9de\ucd94\ub294 \uae30\ub2a5. \uc608: (3,) \ubc30\uc5f4\uacfc (3, 3) \ubc30\uc5f4 \uac04 \uc5f0\uc0b0. \ub2e4\uc591\ud55c \ub0b4\uc7a5 \ud568\uc218 : \ubc30\uc5f4 \uc0dd\uc131, \uc870\uc791, \ubcc0\ud658. \uc120\ud615\ub300\uc218 \uc5f0\uc0b0(\ud589\ub82c \uacf1, \uc5ed\ud589\ub82c, \uace0\uc720\uac12 \ubd84\ud574 \ub4f1). \ud1b5\uacc4 \uc5f0\uc0b0(\ud3c9\uade0, \ubd84\uc0b0, \ud45c\uc900\ud3b8\ucc28 \ub4f1). \uace0\uc18d \ud478\ub9ac\uc5d0 \ubcc0\ud658(FFT). \ud655\uc7a5\uc131 : \ub2e4\ub978 \uacfc\ud559 \ubc0f \ub370\uc774\ud130 \ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac(Pandas, SciPy, TensorFlow \ub4f1)\uc758 \uae30\ubc18\uc73c\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. NumPy\uc758 \uc8fc\uc694 \uad6c\uc131 \uc694\uc18c \ubc30\uc5f4 \uc0dd\uc131 \ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uace0 \ucd08\uae30\ud654\ud558\ub294 \ub2e4\uc591\ud55c \ud568\uc218 \uc81c\uacf5. import numpy as np # 1D \ubc30\uc5f4 \uc0dd\uc131 arr = np . array ([ 1 , 2 , 3 ]) # 2D \ubc30\uc5f4 \uc0dd\uc131 arr2d = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) # \ud2b9\uc815 \uac12\uc73c\ub85c \ucc44\uc6b4 \ubc30\uc5f4 zeros = np . zeros (( 2 , 3 )) # 2x3 \ubc30\uc5f4, 0\uc73c\ub85c \ucd08\uae30\ud654 ones = np . ones (( 3 , 3 )) # 3x3 \ubc30\uc5f4, 1\ub85c \ucd08\uae30\ud654 rand = np . random . rand ( 3 , 2 ) # 3x2 \ubc30\uc5f4, \ub79c\ub364 \uac12 \ubc30\uc5f4 \uc5f0\uc0b0 NumPy\ub294 \ubc30\uc5f4 \uc694\uc18c\ubcc4 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) # \uc694\uc18c\ubcc4 \uc5f0\uc0b0 c = a + b # [5, 7, 9] d = a * b # [4, 10, 18] e = a ** 2 # [1, 4, 9] \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1 NumPy \ubc30\uc5f4\uc740 Python \ub9ac\uc2a4\ud2b8\uc640 \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c \uc694\uc18c\uc5d0 \uc811\uadfc\ud558\uac70\ub098 \uc2ac\ub77c\uc774\uc2f1 \uac00\ub2a5\ud569\ub2c8\ub2e4. arr = np . array ([ 1 , 2 , 3 , 4 , 5 ]) print ( arr [ 0 ]) # \uccab \ubc88\uc9f8 \uc694\uc18c: 1 print ( arr [ 1 : 4 ]) # \uc2ac\ub77c\uc774\uc2f1: [2, 3, 4] \ubc30\uc5f4 \ud615\ud0dc \ubcc0\uacbd \ubc30\uc5f4\uc758 \ud06c\uae30(shape)\ub97c \uc870\uc815\ud558\uac70\ub098 \uc804\uce58(transpose) \uac00\ub2a5\ud569\ub2c8\ub2e4. arr = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ]]) print ( arr . shape ) # (3, 2) reshaped = arr . reshape ( 2 , 3 ) # (2, 3) \ubc30\uc5f4\ub85c \ubcc0\ud658 print ( reshaped ) transposed = arr . T # \ubc30\uc5f4 \uc804\uce58 print ( transposed ) \uc720\uc6a9\ud55c \ud568\uc218 a = np . array ([ 1 , 2 , 3 , 4 , 5 ]) print ( np . sum ( a )) # \ud569\uacc4: 15 print ( np . mean ( a )) # \ud3c9\uade0: 3.0 print ( np . max ( a )) # \ucd5c\ub313\uac12: 5 print ( np . min ( a )) # \ucd5c\uc19f\uac12: 1 print ( np . sqrt ( a )) # \uc694\uc18c\ubcc4 \uc81c\uacf1\uadfc: [1., 1.41, 1.73, 2., 2.24] NumPy\uc758 \uc7a5\uc810 \ube60\ub978 \uc5f0\uc0b0 \uc18d\ub3c4 : NumPy\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c C\ub85c \uad6c\ud604\ub418\uc5b4, \uc77c\ubc18 Python \ucf54\ub4dc\ubcf4\ub2e4 \ud6e8\uc52c \ube60\ub974\uac8c \uc218\uce58 \uc5f0\uc0b0\uc744 \uc218\ud589. \uba54\ubaa8\ub9ac \ud6a8\uc728\uc131 : Python \ub9ac\uc2a4\ud2b8\uc5d0 \ube44\ud574 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc774 \uc801\uc74c. \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ucc98\ub9ac \uae30\ub2a5 : \uc774\ubbf8\uc9c0, \uc624\ub514\uc624, \ube44\ub514\uc624 \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud55c \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud3ec\ub9f7 \ucc98\ub9ac \uac00\ub2a5. \uad11\ubc94\uc704\ud55c \uc751\uc6a9 \ubd84\uc57c : \ub370\uc774\ud130 \uacfc\ud559, \uc778\uacf5\uc9c0\ub2a5, \uae30\uacc4 \ud559\uc2b5, \ubb3c\ub9ac\ud559 \uc2dc\ubbac\ub808\uc774\uc158 \ub4f1\uc5d0\uc11c \uc0ac\uc6a9. NumPy\uc640 \ub2e4\ub978 \ub3c4\uad6c\uc640\uc758 \uc5f0\uacc4 Pandas : Pandas\ub294 NumPy \uae30\ubc18\uc73c\ub85c \uad6c\ucd95\ub418\uc5c8\uc73c\uba70, \ub370\uc774\ud130 \ubd84\uc11d \ubc0f \ucc98\ub9ac\uc5d0 \ud2b9\ud654. OpenCV : OpenCV \uc774\ubbf8\uc9c0\ub294 NumPy \ubc30\uc5f4\ub85c \ud45c\ud604\ub418\uc5b4 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0 \ud65c\uc6a9. TensorFlow/PyTorch : \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\uc5d0\uc11c\ub3c4 NumPy \ubc30\uc5f4\uc744 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uc5d0 \uc0ac\uc6a9. \uc2e4\uc6a9 \uc608\uc81c 1. \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \ucc98\ub9ac OpenCV\ub85c \uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud558\uace0 NumPy\ub85c \ucc98\ub9ac: import cv2 import numpy as np # \uc774\ubbf8\uc9c0 \ub85c\ub4dc img = cv2 . imread ( 'example.jpg' ) # \uc774\ubbf8\uc9c0\uc758 \uc77c\ubd80\ub97c \uc2ac\ub77c\uc774\uc2f1 cropped = img [ 50 : 200 , 100 : 300 ] # \ubc1d\uae30 \uc870\uc815 (\ubaa8\ub4e0 \ud53d\uc140 \uac12\uc5d0 50 \ucd94\uac00) brightened = np . clip ( img + 50 , 0 , 255 ) cv2 . imshow ( 'Cropped' , cropped ) cv2 . imshow ( 'Brightened' , brightened ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 2. \ub370\uc774\ud130 \ubd84\uc11d NumPy\ub97c \uc774\uc6a9\ud55c \ud1b5\uacc4 \ubd84\uc11d: import numpy as np data = np . random . randn ( 1000 ) # 1000\uac1c\uc758 \ub09c\uc218 \uc0dd\uc131 mean = np . mean ( data ) std_dev = np . std ( data ) print ( f \"\ud3c9\uade0: { mean } , \ud45c\uc900\ud3b8\ucc28: { std_dev } \" ) NumPy\ub294 \uac04\ub2e8\ud55c \uc218\ud559 \uacc4\uc0b0\ubd80\ud130 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ubd84\uc11d\uae4c\uc9c0 \ub2e4\uc591\ud55c \uc791\uc5c5\uc744 \uc9c0\uc6d0\ud558\uba70, \ub370\uc774\ud130 \uacfc\ud559\uacfc \uba38\uc2e0\ub7ec\ub2dd\uc758 \ud544\uc218 \ub3c4\uad6c\ub85c \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"\ub118\ud30c\uc774"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#numpy-numerical-python","text":"NumPy\ub294 Python\uc5d0\uc11c \uc218\uce58 \uc5f0\uc0b0\uacfc \uacfc\ud559 \uacc4\uc0b0\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 **\uc624\ud508\uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac**\uc785\ub2c8\ub2e4. \ud2b9\ud788 **\ub2e4\ucc28\uc6d0 \ubc30\uc5f4(NumPy Array)**\uacfc \uc774\ub97c \uae30\ubc18\uc73c\ub85c \ud558\ub294 \ub2e4\uc591\ud55c \uc5f0\uc0b0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uc5ec \ub370\uc774\ud130 \ucc98\ub9ac\uc640 \ubd84\uc11d\uc5d0\uc11c \ud575\uc2ec\uc801\uc778 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.","title":"NumPy (Numerical Python)"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#numpy","text":"\ub2e4\ucc28\uc6d0 \ubc30\uc5f4 \uac1d\uccb4 : NumPy\uc758 \ud575\uc2ec \ub370\uc774\ud130 \uad6c\uc870\ub294 ndarray \ub85c, \ub2e4\uc591\ud55c \ucc28\uc6d0\uc758 \ubc30\uc5f4(1D, 2D, 3D \ub4f1)\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ubc30\uc5f4\uc740 \uc77c\ubc18 Python \ub9ac\uc2a4\ud2b8\ubcf4\ub2e4 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc774\uace0 \uc5f0\uc0b0 \uc18d\ub3c4\uac00 \ube60\ub985\ub2c8\ub2e4. \ubca1\ud130\ud654 \uc5f0\uc0b0 (Vectorization) : \ubc18\ubcf5\ubb38 \uc5c6\uc774 \ubc30\uc5f4 \uc804\uccb4\uc5d0 \ub300\ud574 \uc5f0\uc0b0\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc5b4 \ucf54\ub4dc\uac00 \uac04\uacb0\ud558\uace0 \uc2e4\ud589 \uc18d\ub3c4\uac00 \ube60\ub985\ub2c8\ub2e4. \uc608: \ubc30\uc5f4\uc758 \ubaa8\ub4e0 \uc694\uc18c\uc5d0 2\ub97c \ub354\ud558\uae30, \uc694\uc18c\ubcc4 \uacf1\uc148 \ub4f1. \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305 : \ud06c\uae30\uac00 \ub2e4\ub978 \ubc30\uc5f4 \uac04\uc5d0\ub3c4 \uc5f0\uc0b0\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \uc790\ub3d9\uc73c\ub85c \ud06c\uae30\ub97c \ub9de\ucd94\ub294 \uae30\ub2a5. \uc608: (3,) \ubc30\uc5f4\uacfc (3, 3) \ubc30\uc5f4 \uac04 \uc5f0\uc0b0. \ub2e4\uc591\ud55c \ub0b4\uc7a5 \ud568\uc218 : \ubc30\uc5f4 \uc0dd\uc131, \uc870\uc791, \ubcc0\ud658. \uc120\ud615\ub300\uc218 \uc5f0\uc0b0(\ud589\ub82c \uacf1, \uc5ed\ud589\ub82c, \uace0\uc720\uac12 \ubd84\ud574 \ub4f1). \ud1b5\uacc4 \uc5f0\uc0b0(\ud3c9\uade0, \ubd84\uc0b0, \ud45c\uc900\ud3b8\ucc28 \ub4f1). \uace0\uc18d \ud478\ub9ac\uc5d0 \ubcc0\ud658(FFT). \ud655\uc7a5\uc131 : \ub2e4\ub978 \uacfc\ud559 \ubc0f \ub370\uc774\ud130 \ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac(Pandas, SciPy, TensorFlow \ub4f1)\uc758 \uae30\ubc18\uc73c\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"NumPy\uc758 \uc8fc\uc694 \ud2b9\uc9d5"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#numpy_1","text":"\ubc30\uc5f4 \uc0dd\uc131 \ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uace0 \ucd08\uae30\ud654\ud558\ub294 \ub2e4\uc591\ud55c \ud568\uc218 \uc81c\uacf5. import numpy as np # 1D \ubc30\uc5f4 \uc0dd\uc131 arr = np . array ([ 1 , 2 , 3 ]) # 2D \ubc30\uc5f4 \uc0dd\uc131 arr2d = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) # \ud2b9\uc815 \uac12\uc73c\ub85c \ucc44\uc6b4 \ubc30\uc5f4 zeros = np . zeros (( 2 , 3 )) # 2x3 \ubc30\uc5f4, 0\uc73c\ub85c \ucd08\uae30\ud654 ones = np . ones (( 3 , 3 )) # 3x3 \ubc30\uc5f4, 1\ub85c \ucd08\uae30\ud654 rand = np . random . rand ( 3 , 2 ) # 3x2 \ubc30\uc5f4, \ub79c\ub364 \uac12 \ubc30\uc5f4 \uc5f0\uc0b0 NumPy\ub294 \ubc30\uc5f4 \uc694\uc18c\ubcc4 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) # \uc694\uc18c\ubcc4 \uc5f0\uc0b0 c = a + b # [5, 7, 9] d = a * b # [4, 10, 18] e = a ** 2 # [1, 4, 9] \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1 NumPy \ubc30\uc5f4\uc740 Python \ub9ac\uc2a4\ud2b8\uc640 \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c \uc694\uc18c\uc5d0 \uc811\uadfc\ud558\uac70\ub098 \uc2ac\ub77c\uc774\uc2f1 \uac00\ub2a5\ud569\ub2c8\ub2e4. arr = np . array ([ 1 , 2 , 3 , 4 , 5 ]) print ( arr [ 0 ]) # \uccab \ubc88\uc9f8 \uc694\uc18c: 1 print ( arr [ 1 : 4 ]) # \uc2ac\ub77c\uc774\uc2f1: [2, 3, 4] \ubc30\uc5f4 \ud615\ud0dc \ubcc0\uacbd \ubc30\uc5f4\uc758 \ud06c\uae30(shape)\ub97c \uc870\uc815\ud558\uac70\ub098 \uc804\uce58(transpose) \uac00\ub2a5\ud569\ub2c8\ub2e4. arr = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ]]) print ( arr . shape ) # (3, 2) reshaped = arr . reshape ( 2 , 3 ) # (2, 3) \ubc30\uc5f4\ub85c \ubcc0\ud658 print ( reshaped ) transposed = arr . T # \ubc30\uc5f4 \uc804\uce58 print ( transposed ) \uc720\uc6a9\ud55c \ud568\uc218 a = np . array ([ 1 , 2 , 3 , 4 , 5 ]) print ( np . sum ( a )) # \ud569\uacc4: 15 print ( np . mean ( a )) # \ud3c9\uade0: 3.0 print ( np . max ( a )) # \ucd5c\ub313\uac12: 5 print ( np . min ( a )) # \ucd5c\uc19f\uac12: 1 print ( np . sqrt ( a )) # \uc694\uc18c\ubcc4 \uc81c\uacf1\uadfc: [1., 1.41, 1.73, 2., 2.24]","title":"NumPy\uc758 \uc8fc\uc694 \uad6c\uc131 \uc694\uc18c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#numpy_2","text":"\ube60\ub978 \uc5f0\uc0b0 \uc18d\ub3c4 : NumPy\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c C\ub85c \uad6c\ud604\ub418\uc5b4, \uc77c\ubc18 Python \ucf54\ub4dc\ubcf4\ub2e4 \ud6e8\uc52c \ube60\ub974\uac8c \uc218\uce58 \uc5f0\uc0b0\uc744 \uc218\ud589. \uba54\ubaa8\ub9ac \ud6a8\uc728\uc131 : Python \ub9ac\uc2a4\ud2b8\uc5d0 \ube44\ud574 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc774 \uc801\uc74c. \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ucc98\ub9ac \uae30\ub2a5 : \uc774\ubbf8\uc9c0, \uc624\ub514\uc624, \ube44\ub514\uc624 \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud55c \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud3ec\ub9f7 \ucc98\ub9ac \uac00\ub2a5. \uad11\ubc94\uc704\ud55c \uc751\uc6a9 \ubd84\uc57c : \ub370\uc774\ud130 \uacfc\ud559, \uc778\uacf5\uc9c0\ub2a5, \uae30\uacc4 \ud559\uc2b5, \ubb3c\ub9ac\ud559 \uc2dc\ubbac\ub808\uc774\uc158 \ub4f1\uc5d0\uc11c \uc0ac\uc6a9.","title":"NumPy\uc758 \uc7a5\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#numpy_3","text":"Pandas : Pandas\ub294 NumPy \uae30\ubc18\uc73c\ub85c \uad6c\ucd95\ub418\uc5c8\uc73c\uba70, \ub370\uc774\ud130 \ubd84\uc11d \ubc0f \ucc98\ub9ac\uc5d0 \ud2b9\ud654. OpenCV : OpenCV \uc774\ubbf8\uc9c0\ub294 NumPy \ubc30\uc5f4\ub85c \ud45c\ud604\ub418\uc5b4 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0 \ud65c\uc6a9. TensorFlow/PyTorch : \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\uc5d0\uc11c\ub3c4 NumPy \ubc30\uc5f4\uc744 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uc5d0 \uc0ac\uc6a9.","title":"NumPy\uc640 \ub2e4\ub978 \ub3c4\uad6c\uc640\uc758 \uc5f0\uacc4"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#_1","text":"","title":"\uc2e4\uc6a9 \uc608\uc81c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#1","text":"OpenCV\ub85c \uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud558\uace0 NumPy\ub85c \ucc98\ub9ac: import cv2 import numpy as np # \uc774\ubbf8\uc9c0 \ub85c\ub4dc img = cv2 . imread ( 'example.jpg' ) # \uc774\ubbf8\uc9c0\uc758 \uc77c\ubd80\ub97c \uc2ac\ub77c\uc774\uc2f1 cropped = img [ 50 : 200 , 100 : 300 ] # \ubc1d\uae30 \uc870\uc815 (\ubaa8\ub4e0 \ud53d\uc140 \uac12\uc5d0 50 \ucd94\uac00) brightened = np . clip ( img + 50 , 0 , 255 ) cv2 . imshow ( 'Cropped' , cropped ) cv2 . imshow ( 'Brightened' , brightened ) cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"1. \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \ucc98\ub9ac"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_numpy/#2","text":"NumPy\ub97c \uc774\uc6a9\ud55c \ud1b5\uacc4 \ubd84\uc11d: import numpy as np data = np . random . randn ( 1000 ) # 1000\uac1c\uc758 \ub09c\uc218 \uc0dd\uc131 mean = np . mean ( data ) std_dev = np . std ( data ) print ( f \"\ud3c9\uade0: { mean } , \ud45c\uc900\ud3b8\ucc28: { std_dev } \" ) NumPy\ub294 \uac04\ub2e8\ud55c \uc218\ud559 \uacc4\uc0b0\ubd80\ud130 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ubd84\uc11d\uae4c\uc9c0 \ub2e4\uc591\ud55c \uc791\uc5c5\uc744 \uc9c0\uc6d0\ud558\uba70, \ub370\uc774\ud130 \uacfc\ud559\uacfc \uba38\uc2e0\ub7ec\ub2dd\uc758 \ud544\uc218 \ub3c4\uad6c\ub85c \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"2. \ub370\uc774\ud130 \ubd84\uc11d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/","text":"opencv \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \ubcc0\ud658 Python\uc758 Pillow \ub77c\uc774\ube0c\ub7ec\ub9ac(\uae30\ubcf8 Image \ubaa8\ub4c8)\ub97c \uc0ac\uc6a9\ud558\uc5ec OpenCV, Matplotlib, Pillow \uac04\uc758 \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\ub97c \uc0c1\ud638 \ubcc0\ud658\ud558\uace0 \ucd9c\ub825\ud558\ub294 \ubc29\ubc95\uc744 \ucd94\uac00\ub85c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4. 1. Pillow \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ubcf8 \uc18c\uac1c Pillow\ub294 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc640 \uc870\uc791\uc744 \uc704\ud55c Python \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Pillow\ub294 \ub2e4\uc591\ud55c \uc774\ubbf8\uc9c0 \ud615\uc2dd(BMP, PNG, JPEG \ub4f1)\uc744 \uc9c0\uc6d0\ud558\uba70, OpenCV \ubc0f Matplotlib\uacfc\ub3c4 \ub370\uc774\ud130\ub97c \uc0c1\ud638 \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pillow \uc124\uce58 pip install pillow 2. OpenCV \u2194 Pillow \ub370\uc774\ud130 \ubcc0\ud658 OpenCV \uc774\ubbf8\uc9c0 \u2192 Pillow \uc774\ubbf8\uc9c0 \ubcc0\ud658 OpenCV\ub294 NumPy \ubc30\uc5f4 \ud615\uc2dd\uc758 \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub97c Pillow\ub85c \ubcc0\ud658\ud558\ub824\uba74 Image.fromarray \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 from PIL import Image # OpenCV\ub85c \uc774\ubbf8\uc9c0 \uc77d\uae30 (BGR) image = cv2 . imread ( \"sample.jpg\" ) # OpenCV (BGR) \u2192 Pillow (RGB) image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # BGR \u2192 RGB \ubcc0\ud658 image_pillow = Image . fromarray ( image_rgb ) # NumPy \ubc30\uc5f4 \u2192 Pillow \uc774\ubbf8\uc9c0 image_pillow . show () # Pillow\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825 Pillow \uc774\ubbf8\uc9c0 \u2192 OpenCV \uc774\ubbf8\uc9c0 \ubcc0\ud658 Pillow \uc774\ubbf8\uc9c0\ub97c OpenCV \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub824\uba74 np.array \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucf54\ub4dc: import cv2 from PIL import Image import numpy as np # Pillow\ub85c \uc774\ubbf8\uc9c0 \uc5f4\uae30 image_pillow = Image . open ( \"sample.jpg\" ) # Pillow \u2192 OpenCV image_rgb = np . array ( image_pillow ) # Pillow \u2192 NumPy \ubc30\uc5f4 image_bgr = cv2 . cvtColor ( image_rgb , cv2 . COLOR_RGB2BGR ) # RGB \u2192 BGR \ubcc0\ud658 cv2 . imshow ( \"OpenCV Image\" , image_bgr ) # OpenCV\ub85c \ucd9c\ub825 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () 3. Matplotlib \u2194 Pillow \ub370\uc774\ud130 \ubcc0\ud658 Matplotlib\ub294 Pillow\uc640 \ub3d9\uc77c\ud558\uac8c RGB \ud615\uc2dd\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ubcc0\ud658\uc774 \uac04\ub2e8\ud569\ub2c8\ub2e4. Pillow \uc774\ubbf8\uc9c0 \u2192 Matplotlib Pillow \uc774\ubbf8\uc9c0\ub97c Matplotlib\ub85c \ubcc0\ud658\ud558\uc5ec \ucd9c\ub825\ud558\ub824\uba74 np.array \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucf54\ub4dc: from PIL import Image import matplotlib.pyplot as plt import numpy as np # Pillow\ub85c \uc774\ubbf8\uc9c0 \uc5f4\uae30 image_pillow = Image . open ( \"sample.jpg\" ) # Pillow \u2192 Matplotlib (NumPy \ubc30\uc5f4\ub85c \ubcc0\ud658) image_rgb = np . array ( image_pillow ) # Matplotlib\ub85c \ucd9c\ub825 plt . imshow ( image_rgb ) plt . title ( \"Image with Matplotlib\" ) plt . axis ( \"off\" ) plt . show () Matplotlib \uc774\ubbf8\uc9c0 \u2192 Pillow Matplotlib\ub294 NumPy \ubc30\uc5f4 \ud615\uc2dd\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub97c Pillow \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub824\uba74 Image.fromarray \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucf54\ub4dc: from PIL import Image import numpy as np # \uac00\uc0c1 NumPy \ubc30\uc5f4 \uc0dd\uc131 (Matplotlib\uc5d0\uc11c \ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub77c\uace0 \uac00\uc815) image_rgb = np . zeros (( 300 , 300 , 3 ), dtype = np . uint8 ) image_rgb [:, : 150 ] = [ 255 , 0 , 0 ] # \uc67c\ucabd\uc740 \ube68\uac04\uc0c9 image_rgb [:, 150 :] = [ 0 , 255 , 0 ] # \uc624\ub978\ucabd\uc740 \ucd08\ub85d\uc0c9 # Matplotlib (NumPy \ubc30\uc5f4) \u2192 Pillow image_pillow = Image . fromarray ( image_rgb ) image_pillow . show () # Pillow\ub85c \ucd9c\ub825 4. OpenCV \u2194 Matplotlib \u2194 Pillow \uac04 \ub370\uc774\ud130 \ud750\ub984 OpenCV \u2192 Pillow \u2192 Matplotlib import cv2 from PIL import Image import matplotlib.pyplot as plt import numpy as np # OpenCV\ub85c \uc774\ubbf8\uc9c0 \uc77d\uae30 (BGR) image = cv2 . imread ( \"sample.jpg\" ) # OpenCV (BGR) \u2192 Pillow (RGB) image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image_pillow = Image . fromarray ( image_rgb ) # Pillow \u2192 Matplotlib image_rgb_array = np . array ( image_pillow ) # Matplotlib\ub85c \ucd9c\ub825 plt . imshow ( image_rgb_array ) plt . title ( \"Image with Matplotlib\" ) plt . axis ( \"off\" ) plt . show () \ub370\uc774\ud130 \ud750\ub984 \uc694\uc57d \ub77c\uc774\ube0c\ub7ec\ub9ac \uc785\ub825 \ud615\uc2dd \ucd9c\ub825 \ud615\uc2dd \ubcc0\ud658 \uba54\uc11c\ub4dc OpenCV \u2192 Pillow NumPy \ubc30\uc5f4 (BGR) Pillow \uc774\ubbf8\uc9c0 (RGB) cv2.cvtColor + Image.fromarray Pillow \u2192 OpenCV Pillow \uc774\ubbf8\uc9c0 (RGB) NumPy \ubc30\uc5f4 (BGR) np.array + cv2.cvtColor Matplotlib \u2192 Pillow NumPy \ubc30\uc5f4 (RGB) Pillow \uc774\ubbf8\uc9c0 (RGB) Image.fromarray Pillow \u2192 Matplotlib Pillow \uc774\ubbf8\uc9c0 (RGB) NumPy \ubc30\uc5f4 (RGB) np.array 5. \uac01 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc774\ubbf8\uc9c0 \ucd9c\ub825 \ucc28\uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucd9c\ub825 \ubc29\uc2dd \uc7a5\uc810 \uc81c\ud55c\uc0ac\ud56d OpenCV \ub3c5\ub9bd GUI \ucc3d\uc5d0\uc11c \ucd9c\ub825 \uc2e4\uc2dc\uac04 \ucc98\ub9ac, \uc774\ubca4\ud2b8 \uae30\ubc18 \ucc98\ub9ac \uac00\ub2a5 BGR \ud615\uc2dd \uc0ac\uc6a9, Jupyter\uc5d0 \ubd80\uc801\ud569 Matplotlib \uadf8\ub798\ud504 \ub0b4\uc5d0\uc11c \uc2dc\uac01\ud654 \ucd9c\ub825 \ub370\uc774\ud130 \ubd84\uc11d \ubc0f \uc2dc\uac01\ud654\uc5d0 \uc720\ub9ac \uc2e4\uc2dc\uac04 \ucc98\ub9ac\uc5d0 \ubd80\uc801\ud569 Pillow OS \uae30\ubcf8 \uc774\ubbf8\uc9c0 \ubdf0\uc5b4\uc5d0\uc11c \ucd9c\ub825 \uc774\ubbf8\uc9c0 \ubcc0\ud658 \ubc0f \ud30c\uc77c \uc791\uc5c5\uc5d0 \uc720\ub9ac \ubcf5\uc7a1\ud55c \uc2dc\uac01\ud654\ub294 \uc81c\ud55c\uc801 \uc694\uc57d OpenCV, Matplotlib, Pillow\ub294 \uac01\uae30 \ub2e4\ub978 \uac15\uc810\uc744 \uac00\uc9c4 \uc774\ubbf8\uc9c0 \ucc98\ub9ac \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\ub97c \uc0c1\ud638 \ubcc0\ud658\ud558\uba74 \uac01 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc7a5\uc810\uc744 \uc870\ud569\ud558\uc5ec \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pillow\ub294 OpenCV\uc640 Matplotlib \uac04\uc758 \ub370\uc774\ud130 \ubcc0\ud658\uc5d0 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c \uad81\uae08\ud55c \uc810\uc774\ub098 \ud655\uc7a5 \uc694\uccad\uc774 \uc788\ub2e4\uba74 \ub9d0\uc500\ud574\uc8fc\uc138\uc694! \ud83d\ude0a","title":"opencv \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#opencv","text":"Python\uc758 Pillow \ub77c\uc774\ube0c\ub7ec\ub9ac(\uae30\ubcf8 Image \ubaa8\ub4c8)\ub97c \uc0ac\uc6a9\ud558\uc5ec OpenCV, Matplotlib, Pillow \uac04\uc758 \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\ub97c \uc0c1\ud638 \ubcc0\ud658\ud558\uace0 \ucd9c\ub825\ud558\ub294 \ubc29\ubc95\uc744 \ucd94\uac00\ub85c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"opencv \uc774\ubbf8\uc9c0 \ub370\uc774\ud130 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#1-pillow","text":"Pillow\ub294 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc640 \uc870\uc791\uc744 \uc704\ud55c Python \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Pillow\ub294 \ub2e4\uc591\ud55c \uc774\ubbf8\uc9c0 \ud615\uc2dd(BMP, PNG, JPEG \ub4f1)\uc744 \uc9c0\uc6d0\ud558\uba70, OpenCV \ubc0f Matplotlib\uacfc\ub3c4 \ub370\uc774\ud130\ub97c \uc0c1\ud638 \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1. Pillow \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ubcf8 \uc18c\uac1c"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#pillow","text":"pip install pillow","title":"Pillow \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#2-opencv-pillow","text":"","title":"2. OpenCV \u2194 Pillow \ub370\uc774\ud130 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#opencv-pillow","text":"OpenCV\ub294 NumPy \ubc30\uc5f4 \ud615\uc2dd\uc758 \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub97c Pillow\ub85c \ubcc0\ud658\ud558\ub824\uba74 Image.fromarray \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"OpenCV \uc774\ubbf8\uc9c0 \u2192 Pillow \uc774\ubbf8\uc9c0 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#_1","text":"import cv2 from PIL import Image # OpenCV\ub85c \uc774\ubbf8\uc9c0 \uc77d\uae30 (BGR) image = cv2 . imread ( \"sample.jpg\" ) # OpenCV (BGR) \u2192 Pillow (RGB) image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # BGR \u2192 RGB \ubcc0\ud658 image_pillow = Image . fromarray ( image_rgb ) # NumPy \ubc30\uc5f4 \u2192 Pillow \uc774\ubbf8\uc9c0 image_pillow . show () # Pillow\ub85c \uc774\ubbf8\uc9c0 \ucd9c\ub825","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#pillow-opencv","text":"Pillow \uc774\ubbf8\uc9c0\ub97c OpenCV \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub824\uba74 np.array \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"Pillow \uc774\ubbf8\uc9c0 \u2192 OpenCV \uc774\ubbf8\uc9c0 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#_2","text":"import cv2 from PIL import Image import numpy as np # Pillow\ub85c \uc774\ubbf8\uc9c0 \uc5f4\uae30 image_pillow = Image . open ( \"sample.jpg\" ) # Pillow \u2192 OpenCV image_rgb = np . array ( image_pillow ) # Pillow \u2192 NumPy \ubc30\uc5f4 image_bgr = cv2 . cvtColor ( image_rgb , cv2 . COLOR_RGB2BGR ) # RGB \u2192 BGR \ubcc0\ud658 cv2 . imshow ( \"OpenCV Image\" , image_bgr ) # OpenCV\ub85c \ucd9c\ub825 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#3-matplotlib-pillow","text":"Matplotlib\ub294 Pillow\uc640 \ub3d9\uc77c\ud558\uac8c RGB \ud615\uc2dd\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ubcc0\ud658\uc774 \uac04\ub2e8\ud569\ub2c8\ub2e4.","title":"3. Matplotlib \u2194 Pillow \ub370\uc774\ud130 \ubcc0\ud658"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#pillow-matplotlib","text":"Pillow \uc774\ubbf8\uc9c0\ub97c Matplotlib\ub85c \ubcc0\ud658\ud558\uc5ec \ucd9c\ub825\ud558\ub824\uba74 np.array \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"Pillow \uc774\ubbf8\uc9c0 \u2192 Matplotlib"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#_3","text":"from PIL import Image import matplotlib.pyplot as plt import numpy as np # Pillow\ub85c \uc774\ubbf8\uc9c0 \uc5f4\uae30 image_pillow = Image . open ( \"sample.jpg\" ) # Pillow \u2192 Matplotlib (NumPy \ubc30\uc5f4\ub85c \ubcc0\ud658) image_rgb = np . array ( image_pillow ) # Matplotlib\ub85c \ucd9c\ub825 plt . imshow ( image_rgb ) plt . title ( \"Image with Matplotlib\" ) plt . axis ( \"off\" ) plt . show ()","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#matplotlib-pillow","text":"Matplotlib\ub294 NumPy \ubc30\uc5f4 \ud615\uc2dd\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub97c Pillow \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud558\ub824\uba74 Image.fromarray \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"Matplotlib \uc774\ubbf8\uc9c0 \u2192 Pillow"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#_4","text":"from PIL import Image import numpy as np # \uac00\uc0c1 NumPy \ubc30\uc5f4 \uc0dd\uc131 (Matplotlib\uc5d0\uc11c \ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub77c\uace0 \uac00\uc815) image_rgb = np . zeros (( 300 , 300 , 3 ), dtype = np . uint8 ) image_rgb [:, : 150 ] = [ 255 , 0 , 0 ] # \uc67c\ucabd\uc740 \ube68\uac04\uc0c9 image_rgb [:, 150 :] = [ 0 , 255 , 0 ] # \uc624\ub978\ucabd\uc740 \ucd08\ub85d\uc0c9 # Matplotlib (NumPy \ubc30\uc5f4) \u2192 Pillow image_pillow = Image . fromarray ( image_rgb ) image_pillow . show () # Pillow\ub85c \ucd9c\ub825","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#4-opencv-matplotlib-pillow","text":"","title":"4. OpenCV \u2194 Matplotlib \u2194 Pillow \uac04 \ub370\uc774\ud130 \ud750\ub984"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#opencv-pillow-matplotlib","text":"import cv2 from PIL import Image import matplotlib.pyplot as plt import numpy as np # OpenCV\ub85c \uc774\ubbf8\uc9c0 \uc77d\uae30 (BGR) image = cv2 . imread ( \"sample.jpg\" ) # OpenCV (BGR) \u2192 Pillow (RGB) image_rgb = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image_pillow = Image . fromarray ( image_rgb ) # Pillow \u2192 Matplotlib image_rgb_array = np . array ( image_pillow ) # Matplotlib\ub85c \ucd9c\ub825 plt . imshow ( image_rgb_array ) plt . title ( \"Image with Matplotlib\" ) plt . axis ( \"off\" ) plt . show ()","title":"OpenCV \u2192 Pillow \u2192 Matplotlib"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#_5","text":"\ub77c\uc774\ube0c\ub7ec\ub9ac \uc785\ub825 \ud615\uc2dd \ucd9c\ub825 \ud615\uc2dd \ubcc0\ud658 \uba54\uc11c\ub4dc OpenCV \u2192 Pillow NumPy \ubc30\uc5f4 (BGR) Pillow \uc774\ubbf8\uc9c0 (RGB) cv2.cvtColor + Image.fromarray Pillow \u2192 OpenCV Pillow \uc774\ubbf8\uc9c0 (RGB) NumPy \ubc30\uc5f4 (BGR) np.array + cv2.cvtColor Matplotlib \u2192 Pillow NumPy \ubc30\uc5f4 (RGB) Pillow \uc774\ubbf8\uc9c0 (RGB) Image.fromarray Pillow \u2192 Matplotlib Pillow \uc774\ubbf8\uc9c0 (RGB) NumPy \ubc30\uc5f4 (RGB) np.array","title":"\ub370\uc774\ud130 \ud750\ub984 \uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#5","text":"\ub77c\uc774\ube0c\ub7ec\ub9ac \ucd9c\ub825 \ubc29\uc2dd \uc7a5\uc810 \uc81c\ud55c\uc0ac\ud56d OpenCV \ub3c5\ub9bd GUI \ucc3d\uc5d0\uc11c \ucd9c\ub825 \uc2e4\uc2dc\uac04 \ucc98\ub9ac, \uc774\ubca4\ud2b8 \uae30\ubc18 \ucc98\ub9ac \uac00\ub2a5 BGR \ud615\uc2dd \uc0ac\uc6a9, Jupyter\uc5d0 \ubd80\uc801\ud569 Matplotlib \uadf8\ub798\ud504 \ub0b4\uc5d0\uc11c \uc2dc\uac01\ud654 \ucd9c\ub825 \ub370\uc774\ud130 \ubd84\uc11d \ubc0f \uc2dc\uac01\ud654\uc5d0 \uc720\ub9ac \uc2e4\uc2dc\uac04 \ucc98\ub9ac\uc5d0 \ubd80\uc801\ud569 Pillow OS \uae30\ubcf8 \uc774\ubbf8\uc9c0 \ubdf0\uc5b4\uc5d0\uc11c \ucd9c\ub825 \uc774\ubbf8\uc9c0 \ubcc0\ud658 \ubc0f \ud30c\uc77c \uc791\uc5c5\uc5d0 \uc720\ub9ac \ubcf5\uc7a1\ud55c \uc2dc\uac01\ud654\ub294 \uc81c\ud55c\uc801","title":"5. \uac01 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc774\ubbf8\uc9c0 \ucd9c\ub825 \ucc28\uc774"},{"location":"%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%91%EC%9A%A9/opencv/opencv_pillow/#_6","text":"OpenCV, Matplotlib, Pillow\ub294 \uac01\uae30 \ub2e4\ub978 \uac15\uc810\uc744 \uac00\uc9c4 \uc774\ubbf8\uc9c0 \ucc98\ub9ac \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\ub97c \uc0c1\ud638 \ubcc0\ud658\ud558\uba74 \uac01 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc7a5\uc810\uc744 \uc870\ud569\ud558\uc5ec \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pillow\ub294 OpenCV\uc640 Matplotlib \uac04\uc758 \ub370\uc774\ud130 \ubcc0\ud658\uc5d0 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c \uad81\uae08\ud55c \uc810\uc774\ub098 \ud655\uc7a5 \uc694\uccad\uc774 \uc788\ub2e4\uba74 \ub9d0\uc500\ud574\uc8fc\uc138\uc694! \ud83d\ude0a","title":"\uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/","text":"CNN PyTorch\uc5d0\uc11c Convolutional Neural Network (CNN)\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \ub525\ub7ec\ub2dd\uc5d0\uc11c \uc774\ubbf8\uc9c0 \ucc98\ub9ac \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud55c \ud575\uc2ec \uae30\uc220\uc785\ub2c8\ub2e4. CNN\uc740 \ucee8\ubcfc\ub8e8\uc158 \ub808\uc774\uc5b4\uc640 \ud480\ub9c1 \ub808\uc774\uc5b4\ub97c \uc870\ud569\ud558\uc5ec \uc774\ubbf8\uc9c0\uc758 \uacf5\uac04\uc801 \ud2b9\uc9d5\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. \uc544\ub798\uc5d0 PyTorch\uc5d0\uc11c CNN\uc744 \uc0ac\uc6a9\ud55c \uae30\ubcf8\uc801\uc778 \uc124\uba85\uacfc \uc608\uc81c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. CNN \uae30\ubcf8 \uac1c\ub150 Convolution Layer : \uc785\ub825 \uc774\ubbf8\uc9c0\uc5d0 \ud544\ud130(\ucee4\ub110)\ub97c \uc801\uc6a9\ud558\uc5ec \ud2b9\uc9d5 \ub9f5\uc744 \uc0dd\uc131. \uc774\ubbf8\uc9c0\uc758 \uad6d\uc18c\uc801 \ud2b9\uc9d5(\ubaa8\uc11c\ub9ac, \uc724\uacfd \ub4f1)\uc744 \ud559\uc2b5. Activation Function : \ud65c\uc131\ud654 \ud568\uc218(ReLU \ub4f1)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube44\uc120\ud615\uc131\uc744 \ub3c4\uc785. Pooling Layer : \ud2b9\uc9d5 \ub9f5\uc758 \ud06c\uae30\ub97c \uc904\uc774\uace0 \uacc4\uc0b0 \ube44\uc6a9\uc744 \uac10\uc18c. MaxPooling, AveragePooling \ub4f1\uc774 \uc77c\ubc18\uc801. Fully Connected Layer : \ucee8\ubcfc\ub8e8\uc158\uacfc \ud480\ub9c1 \uacfc\uc815\uc744 \ud1b5\ud574 \ucd94\ucd9c\ub41c \ud2b9\uc9d5\uc744 \uae30\ubc18\uc73c\ub85c \ucd5c\uc885 \ubd84\ub958 \uc218\ud589. \uc785\ub825 \ucc44\ub110 PyTorch\uc758 nn.Conv2d \ub808\uc774\uc5b4\uc5d0\uc11c in_channels \ub9e4\uac1c\ubcc0\uc218\ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 \ucc44\ub110 \uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \uac12\uc740 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud615\uc2dd(\uc608: \ud751\ubc31 \ub610\ub294 \uceec\ub7ec \uc774\ubbf8\uc9c0)\uc5d0 \ub530\ub77c \uc124\uc815\ub429\ub2c8\ub2e4. 1. in_channels \uc640 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud615\uc2dd in_channels \ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 **\ucc44\ub110 \uc218**\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ud751\ubc31 \uc774\ubbf8\uc9c0 : \ud751\ubc31 \uc774\ubbf8\uc9c0\ub294 \ud53d\uc140\ub2f9 \ud558\ub098\uc758 \uac12(\uba85\ub3c4)\uc744 \uac00\uc9c0\ubbc0\ub85c **1\ucc44\ub110**\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c in_channels=1 \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \ud751\ubc31 \uc774\ubbf8\uc9c0\uc758 \ud615\ud0dc: (batch_size, 1, height, width) \uc608: (64, 1, 28, 28) (MNIST \ub370\uc774\ud130\uc14b) \uceec\ub7ec \uc774\ubbf8\uc9c0 : \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 RGB(\ube68\uac15, \ucd08\ub85d, \ud30c\ub791) \uac12\uc73c\ub85c \uad6c\uc131\ub418\ubbc0\ub85c **3\ucc44\ub110**\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c in_channels=3 \uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \ud615\ud0dc: (batch_size, 3, height, width) \uc608: (64, 3, 32, 32) (CIFAR-10 \ub370\uc774\ud130\uc14b) 2. Conv2d \uc758 \uc785\ub825 \uad6c\uc870 nn.Conv2d \uc758 \uc785\ub825\uc740 4\ucc28\uc6d0 \ud150\uc11c\uc5ec\uc57c \ud558\uba70, \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9d1\ub2c8\ub2e4: ( batch_size , in_channels , height , width ) batch_size : \ud55c \ubc88\uc5d0 \ucc98\ub9ac\ud560 \ub370\uc774\ud130\uc758 \uac1c\uc218. in_channels : \uc785\ub825 \ub370\uc774\ud130\uc758 \ucc44\ub110 \uc218. height, width : \uc785\ub825 \ub370\uc774\ud130\uc758 \uc138\ub85c \ubc0f \uac00\ub85c \ud06c\uae30. 3. \uc785\ub825 \ub370\uc774\ud130\uac00 2\ucc28\uc6d0\uc778 \uacbd\uc6b0 \ub9cc\uc57d \uc785\ub825 \ub370\uc774\ud130\uac00 **2\ucc28\uc6d0 \uc774\ubbf8\uc9c0(\ud751\ubc31)**\ub77c\uba74, \ucc44\ub110 \uc815\ubcf4\uac00 \ub204\ub77d\ub41c \ud615\ud0dc\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ucc98\ub9ac\ud558\ub824\uba74 \ucc44\ub110 \ucc28\uc6d0\uc744 \ucd94\uac00\ud574\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: # \uc785\ub825 \ub370\uc774\ud130 \ud615\ud0dc: (batch_size, height, width) input_2d = torch . rand ( 64 , 28 , 28 ) # 64\uac1c\uc758 \ud751\ubc31 \uc774\ubbf8\uc9c0 # \ucc44\ub110 \ucc28\uc6d0\uc744 \ucd94\uac00\ud558\uc5ec Conv2d\uc5d0 \ub9de\uac8c \ubcc0\ud658: (batch_size, in_channels, height, width) input_2d = input_2d . unsqueeze ( 1 ) # (64, 1, 28, 28) 4. \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \uacbd\uc6b0 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 \ucc44\ub110 \uc815\ubcf4\uac00 \uc774\ubbf8 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c in_channels=3 \uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, CIFAR-10 \ub370\uc774\ud130\uc14b: # CIFAR-10 \uc774\ubbf8\uc9c0\ub294 3\ucc44\ub110 RGB input_rgb = torch . rand ( 64 , 3 , 32 , 32 ) # 64\uac1c\uc758 \uceec\ub7ec \uc774\ubbf8\uc9c0 conv = nn . Conv2d ( in_channels = 3 , out_channels = 32 , kernel_size = 3 , stride = 1 , padding = 1 ) output = conv ( input_rgb ) # \ucd9c\ub825: (64, 32, 32, 32) 5. \uc694\uc57d \ud751\ubc31 \uc774\ubbf8\uc9c0 : in_channels=1 (\ub370\uc774\ud130 \ud615\ud0dc: (batch_size, 1, height, width) ) \uceec\ub7ec \uc774\ubbf8\uc9c0 : in_channels=3 (\ub370\uc774\ud130 \ud615\ud0dc: (batch_size, 3, height, width) ) \ub9cc\uc57d \ub370\uc774\ud130\uc758 \ucc28\uc6d0\uc774 \ub9de\uc9c0 \uc54a\ub294\ub2e4\uba74 unsqueeze \ub098 \ub370\uc774\ud130 \uc804\ucc98\ub9ac \uacfc\uc815\uc744 \ud1b5\ud574 \ucc44\ub110 \ucc28\uc6d0\uc744 \ucd94\uac00\ud558\uac70\ub098 \uc870\uc815\ud574\uc57c \ud569\ub2c8\ub2e4. PyTorch\uc5d0\uc11c CNN \uad6c\ud604 \uc544\ub798\ub294 PyTorch\ub97c \uc0ac\uc6a9\ud558\uc5ec CNN\uc744 \uc124\uacc4\ud558\uace0 MNIST \ub370\uc774\ud130\uc14b\uc5d0 \uc801\uc6a9\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. 1. \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8 import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms from torch.utils.data import DataLoader 2. \ub370\uc774\ud130 \uc900\ube44 # \ub370\uc774\ud130 \ubcc0\ud658: Tensor \ubcc0\ud658 \ubc0f \uc815\uaddc\ud654 transform = transforms . Compose ([ transforms . ToTensor (), transforms . Normalize (( 0.5 ,), ( 0.5 ,)) ]) # \ub370\uc774\ud130\uc14b \ub85c\ub4dc train_dataset = datasets . MNIST ( root = './data' , train = True , transform = transform , download = True ) test_dataset = datasets . MNIST ( root = './data' , train = False , transform = transform , download = True ) # \ub370\uc774\ud130 \ub85c\ub354 \uc0dd\uc131 train_loader = DataLoader ( dataset = train_dataset , batch_size = 64 , shuffle = True ) test_loader = DataLoader ( dataset = test_dataset , batch_size = 64 , shuffle = False ) 3. CNN \ubaa8\ub378 \uc815\uc758 CNN \ubaa8\ub378\uc740 nn.Module \uc744 \uc0c1\uc18d\ubc1b\uc544 \uc815\uc758\ud558\uba70, \uc5ec\ub7ec \uacc4\uce35\uc744 \uc870\ud569\ud558\uc5ec \uc124\uacc4\ud569\ub2c8\ub2e4. class CNNModel ( nn . Module ): def __init__ ( self ): super ( CNNModel , self ) . __init__ () # Convolutional layers self . conv_layers = nn . Sequential ( nn . Conv2d ( 1 , 32 , kernel_size = 3 , stride = 1 , padding = 1 ), # 1\ucc44\ub110 \uc785\ub825 -> 32\ucc44\ub110 \ucd9c\ub825 nn . ReLU (), # \ud65c\uc131\ud654 \ud568\uc218 nn . MaxPool2d ( kernel_size = 2 , stride = 2 ), # \ud06c\uae30 \uac10\uc18c (28x28 -> 14x14) nn . Conv2d ( 32 , 64 , kernel_size = 3 , stride = 1 , padding = 1 ), # 32\ucc44\ub110 \uc785\ub825 -> 64\ucc44\ub110 \ucd9c\ub825 nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ) # \ud06c\uae30 \uac10\uc18c (14x14 -> 7x7) ) # Fully connected layers self . fc_layers = nn . Sequential ( nn . Flatten (), # 64x7x7 -> 3136 nn . Linear ( 64 * 7 * 7 , 128 ), # Fully connected layer nn . ReLU (), nn . Linear ( 128 , 10 ) # \ucd9c\ub825 10 (\ud074\ub798\uc2a4 \uac1c\uc218) ) def forward ( self , x ): x = self . conv_layers ( x ) # Convolutional layers \ud1b5\uacfc x = self . fc_layers ( x ) # Fully connected layers \ud1b5\uacfc return x # \ubaa8\ub378 \ucd08\uae30\ud654 device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) model = CNNModel () . to ( device ) 4. \uc190\uc2e4 \ud568\uc218 \ubc0f \ucd5c\uc801\ud654 \uae30\ubc95 # \uc190\uc2e4 \ud568\uc218: CrossEntropyLoss criterion = nn . CrossEntropyLoss () # \uc635\ud2f0\ub9c8\uc774\uc800: Adam optimizer = optim . Adam ( model . parameters (), lr = 0.001 ) 5. \ud559\uc2b5 \ub8e8\ud504 epochs = 5 for epoch in range ( epochs ): model . train () # \ud559\uc2b5 \ubaa8\ub4dc running_loss = 0.0 for images , labels in train_loader : images , labels = images . to ( device ), labels . to ( device ) # Forward pass outputs = model ( images ) loss = criterion ( outputs , labels ) # Backward pass and optimization optimizer . zero_grad () loss . backward () optimizer . step () running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { epochs } ], Loss: { running_loss / len ( train_loader ) : .4f } \" ) 6. \ubaa8\ub378 \ud3c9\uac00 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4. model . eval () # \ud3c9\uac00 \ubaa8\ub4dc correct = 0 total = 0 with torch . no_grad (): for images , labels in test_loader : images , labels = images . to ( device ), labels . to ( device ) outputs = model ( images ) _ , predicted = torch . max ( outputs , 1 ) total += labels . size ( 0 ) correct += ( predicted == labels ) . sum () . item () print ( f \"Test Accuracy: { 100 * correct / total : .2f } %\" ) 7. \ubaa8\ub378\uc758 \uc8fc\uc694 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 Conv2d Parameters : in_channels : \uc785\ub825 \ucc44\ub110 \uc218 (\ud751\ubc31 \uc774\ubbf8\uc9c0=1, \uceec\ub7ec \uc774\ubbf8\uc9c0=3). out_channels : \ucd9c\ub825 \ucc44\ub110 \uc218 (\ud544\ud130 \uc218). kernel_size : \ud544\ud130 \ud06c\uae30 (\ubcf4\ud1b5 3x3 \ub610\ub294 5x5 \uc0ac\uc6a9). stride : \ud544\ud130 \uc774\ub3d9 \uac04\uaca9 (\uae30\ubcf8\uac12=1). padding : \uc785\ub825\uc5d0 \ucd94\uac00\ub418\ub294 \ud53d\uc140 (\uc5e3\uc9c0 \ubcf4\uc874\uc6a9). MaxPool2d Parameters : kernel_size : \ud480\ub9c1 \uc601\uc5ed \ud06c\uae30. stride : \ud480\ub9c1 \uc774\ub3d9 \uac04\uaca9 (\uae30\ubcf8\uac12=kernel_size). Linear Parameters : \uc785\ub825 \ubc0f \ucd9c\ub825 \ub178\ub4dc\uc758 \uac1c\uc218. 8. \ud655\uc7a5: \ub354 \ubcf5\uc7a1\ud55c CNN \ubcf5\uc7a1\ud55c \ub370\uc774\ud130\uc14b(CIFAR-10, ImageNet \ub4f1)\uc744 \ucc98\ub9ac\ud558\ub824\uba74 \ub354 \ub9ce\uc740 \ucee8\ubcfc\ub8e8\uc158 \ub808\uc774\uc5b4\uc640 \ub4dc\ub86d\uc544\uc6c3(dropout)\uc744 \ucd94\uac00\ud558\uac70\ub098, ResNet, VGG\uc640 \uac19\uc740 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 9. \uacb0\uacfc \uc704 \ucf54\ub4dc\ub85c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uba74 \uc57d **98% \uc774\uc0c1\uc758 \ud14c\uc2a4\ud2b8 \uc815\ud655\ub3c4**\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CNN\uc740 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0\uc11c \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubc1c\ud718\ud558\uba70, PyTorch\ub97c \uc0ac\uc6a9\ud558\uba74 \uac04\ub2e8\ud788 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Jetson Orin Nano\uc640 \uac19\uc740 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c CNN\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \uc5e3\uc9c0 \ucef4\ud4e8\ud305 \ud658\uacbd\uc5d0\uc11c\ub3c4 \uac15\ub825\ud55c AI \ubaa8\ub378\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"5.3 CNN"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#cnn","text":"PyTorch\uc5d0\uc11c Convolutional Neural Network (CNN)\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \ub525\ub7ec\ub2dd\uc5d0\uc11c \uc774\ubbf8\uc9c0 \ucc98\ub9ac \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud55c \ud575\uc2ec \uae30\uc220\uc785\ub2c8\ub2e4. CNN\uc740 \ucee8\ubcfc\ub8e8\uc158 \ub808\uc774\uc5b4\uc640 \ud480\ub9c1 \ub808\uc774\uc5b4\ub97c \uc870\ud569\ud558\uc5ec \uc774\ubbf8\uc9c0\uc758 \uacf5\uac04\uc801 \ud2b9\uc9d5\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. \uc544\ub798\uc5d0 PyTorch\uc5d0\uc11c CNN\uc744 \uc0ac\uc6a9\ud55c \uae30\ubcf8\uc801\uc778 \uc124\uba85\uacfc \uc608\uc81c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"CNN"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#cnn_1","text":"Convolution Layer : \uc785\ub825 \uc774\ubbf8\uc9c0\uc5d0 \ud544\ud130(\ucee4\ub110)\ub97c \uc801\uc6a9\ud558\uc5ec \ud2b9\uc9d5 \ub9f5\uc744 \uc0dd\uc131. \uc774\ubbf8\uc9c0\uc758 \uad6d\uc18c\uc801 \ud2b9\uc9d5(\ubaa8\uc11c\ub9ac, \uc724\uacfd \ub4f1)\uc744 \ud559\uc2b5. Activation Function : \ud65c\uc131\ud654 \ud568\uc218(ReLU \ub4f1)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube44\uc120\ud615\uc131\uc744 \ub3c4\uc785. Pooling Layer : \ud2b9\uc9d5 \ub9f5\uc758 \ud06c\uae30\ub97c \uc904\uc774\uace0 \uacc4\uc0b0 \ube44\uc6a9\uc744 \uac10\uc18c. MaxPooling, AveragePooling \ub4f1\uc774 \uc77c\ubc18\uc801. Fully Connected Layer : \ucee8\ubcfc\ub8e8\uc158\uacfc \ud480\ub9c1 \uacfc\uc815\uc744 \ud1b5\ud574 \ucd94\ucd9c\ub41c \ud2b9\uc9d5\uc744 \uae30\ubc18\uc73c\ub85c \ucd5c\uc885 \ubd84\ub958 \uc218\ud589.","title":"CNN \uae30\ubcf8 \uac1c\ub150"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#_1","text":"PyTorch\uc758 nn.Conv2d \ub808\uc774\uc5b4\uc5d0\uc11c in_channels \ub9e4\uac1c\ubcc0\uc218\ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 \ucc44\ub110 \uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \uac12\uc740 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud615\uc2dd(\uc608: \ud751\ubc31 \ub610\ub294 \uceec\ub7ec \uc774\ubbf8\uc9c0)\uc5d0 \ub530\ub77c \uc124\uc815\ub429\ub2c8\ub2e4.","title":"\uc785\ub825 \ucc44\ub110"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#1-in_channels","text":"in_channels \ub294 \uc785\ub825 \ub370\uc774\ud130\uc758 **\ucc44\ub110 \uc218**\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ud751\ubc31 \uc774\ubbf8\uc9c0 : \ud751\ubc31 \uc774\ubbf8\uc9c0\ub294 \ud53d\uc140\ub2f9 \ud558\ub098\uc758 \uac12(\uba85\ub3c4)\uc744 \uac00\uc9c0\ubbc0\ub85c **1\ucc44\ub110**\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c in_channels=1 \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \ud751\ubc31 \uc774\ubbf8\uc9c0\uc758 \ud615\ud0dc: (batch_size, 1, height, width) \uc608: (64, 1, 28, 28) (MNIST \ub370\uc774\ud130\uc14b) \uceec\ub7ec \uc774\ubbf8\uc9c0 : \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 RGB(\ube68\uac15, \ucd08\ub85d, \ud30c\ub791) \uac12\uc73c\ub85c \uad6c\uc131\ub418\ubbc0\ub85c **3\ucc44\ub110**\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c in_channels=3 \uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \ud615\ud0dc: (batch_size, 3, height, width) \uc608: (64, 3, 32, 32) (CIFAR-10 \ub370\uc774\ud130\uc14b)","title":"1. in_channels\uc640 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud615\uc2dd"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#2-conv2d","text":"nn.Conv2d \uc758 \uc785\ub825\uc740 4\ucc28\uc6d0 \ud150\uc11c\uc5ec\uc57c \ud558\uba70, \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9d1\ub2c8\ub2e4: ( batch_size , in_channels , height , width ) batch_size : \ud55c \ubc88\uc5d0 \ucc98\ub9ac\ud560 \ub370\uc774\ud130\uc758 \uac1c\uc218. in_channels : \uc785\ub825 \ub370\uc774\ud130\uc758 \ucc44\ub110 \uc218. height, width : \uc785\ub825 \ub370\uc774\ud130\uc758 \uc138\ub85c \ubc0f \uac00\ub85c \ud06c\uae30.","title":"2. Conv2d\uc758 \uc785\ub825 \uad6c\uc870"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#3-2","text":"\ub9cc\uc57d \uc785\ub825 \ub370\uc774\ud130\uac00 **2\ucc28\uc6d0 \uc774\ubbf8\uc9c0(\ud751\ubc31)**\ub77c\uba74, \ucc44\ub110 \uc815\ubcf4\uac00 \ub204\ub77d\ub41c \ud615\ud0dc\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ucc98\ub9ac\ud558\ub824\uba74 \ucc44\ub110 \ucc28\uc6d0\uc744 \ucd94\uac00\ud574\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: # \uc785\ub825 \ub370\uc774\ud130 \ud615\ud0dc: (batch_size, height, width) input_2d = torch . rand ( 64 , 28 , 28 ) # 64\uac1c\uc758 \ud751\ubc31 \uc774\ubbf8\uc9c0 # \ucc44\ub110 \ucc28\uc6d0\uc744 \ucd94\uac00\ud558\uc5ec Conv2d\uc5d0 \ub9de\uac8c \ubcc0\ud658: (batch_size, in_channels, height, width) input_2d = input_2d . unsqueeze ( 1 ) # (64, 1, 28, 28)","title":"3. \uc785\ub825 \ub370\uc774\ud130\uac00 2\ucc28\uc6d0\uc778 \uacbd\uc6b0"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#4","text":"\uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 \ucc44\ub110 \uc815\ubcf4\uac00 \uc774\ubbf8 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c in_channels=3 \uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, CIFAR-10 \ub370\uc774\ud130\uc14b: # CIFAR-10 \uc774\ubbf8\uc9c0\ub294 3\ucc44\ub110 RGB input_rgb = torch . rand ( 64 , 3 , 32 , 32 ) # 64\uac1c\uc758 \uceec\ub7ec \uc774\ubbf8\uc9c0 conv = nn . Conv2d ( in_channels = 3 , out_channels = 32 , kernel_size = 3 , stride = 1 , padding = 1 ) output = conv ( input_rgb ) # \ucd9c\ub825: (64, 32, 32, 32)","title":"4. \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \uacbd\uc6b0"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#5","text":"\ud751\ubc31 \uc774\ubbf8\uc9c0 : in_channels=1 (\ub370\uc774\ud130 \ud615\ud0dc: (batch_size, 1, height, width) ) \uceec\ub7ec \uc774\ubbf8\uc9c0 : in_channels=3 (\ub370\uc774\ud130 \ud615\ud0dc: (batch_size, 3, height, width) ) \ub9cc\uc57d \ub370\uc774\ud130\uc758 \ucc28\uc6d0\uc774 \ub9de\uc9c0 \uc54a\ub294\ub2e4\uba74 unsqueeze \ub098 \ub370\uc774\ud130 \uc804\ucc98\ub9ac \uacfc\uc815\uc744 \ud1b5\ud574 \ucc44\ub110 \ucc28\uc6d0\uc744 \ucd94\uac00\ud558\uac70\ub098 \uc870\uc815\ud574\uc57c \ud569\ub2c8\ub2e4.","title":"5. \uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#pytorch-cnn","text":"\uc544\ub798\ub294 PyTorch\ub97c \uc0ac\uc6a9\ud558\uc5ec CNN\uc744 \uc124\uacc4\ud558\uace0 MNIST \ub370\uc774\ud130\uc14b\uc5d0 \uc801\uc6a9\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"PyTorch\uc5d0\uc11c CNN \uad6c\ud604"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#1","text":"import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms from torch.utils.data import DataLoader","title":"1. \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#2","text":"# \ub370\uc774\ud130 \ubcc0\ud658: Tensor \ubcc0\ud658 \ubc0f \uc815\uaddc\ud654 transform = transforms . Compose ([ transforms . ToTensor (), transforms . Normalize (( 0.5 ,), ( 0.5 ,)) ]) # \ub370\uc774\ud130\uc14b \ub85c\ub4dc train_dataset = datasets . MNIST ( root = './data' , train = True , transform = transform , download = True ) test_dataset = datasets . MNIST ( root = './data' , train = False , transform = transform , download = True ) # \ub370\uc774\ud130 \ub85c\ub354 \uc0dd\uc131 train_loader = DataLoader ( dataset = train_dataset , batch_size = 64 , shuffle = True ) test_loader = DataLoader ( dataset = test_dataset , batch_size = 64 , shuffle = False )","title":"2. \ub370\uc774\ud130 \uc900\ube44"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#3-cnn","text":"CNN \ubaa8\ub378\uc740 nn.Module \uc744 \uc0c1\uc18d\ubc1b\uc544 \uc815\uc758\ud558\uba70, \uc5ec\ub7ec \uacc4\uce35\uc744 \uc870\ud569\ud558\uc5ec \uc124\uacc4\ud569\ub2c8\ub2e4. class CNNModel ( nn . Module ): def __init__ ( self ): super ( CNNModel , self ) . __init__ () # Convolutional layers self . conv_layers = nn . Sequential ( nn . Conv2d ( 1 , 32 , kernel_size = 3 , stride = 1 , padding = 1 ), # 1\ucc44\ub110 \uc785\ub825 -> 32\ucc44\ub110 \ucd9c\ub825 nn . ReLU (), # \ud65c\uc131\ud654 \ud568\uc218 nn . MaxPool2d ( kernel_size = 2 , stride = 2 ), # \ud06c\uae30 \uac10\uc18c (28x28 -> 14x14) nn . Conv2d ( 32 , 64 , kernel_size = 3 , stride = 1 , padding = 1 ), # 32\ucc44\ub110 \uc785\ub825 -> 64\ucc44\ub110 \ucd9c\ub825 nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ) # \ud06c\uae30 \uac10\uc18c (14x14 -> 7x7) ) # Fully connected layers self . fc_layers = nn . Sequential ( nn . Flatten (), # 64x7x7 -> 3136 nn . Linear ( 64 * 7 * 7 , 128 ), # Fully connected layer nn . ReLU (), nn . Linear ( 128 , 10 ) # \ucd9c\ub825 10 (\ud074\ub798\uc2a4 \uac1c\uc218) ) def forward ( self , x ): x = self . conv_layers ( x ) # Convolutional layers \ud1b5\uacfc x = self . fc_layers ( x ) # Fully connected layers \ud1b5\uacfc return x # \ubaa8\ub378 \ucd08\uae30\ud654 device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) model = CNNModel () . to ( device )","title":"3. CNN \ubaa8\ub378 \uc815\uc758"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#4_1","text":"# \uc190\uc2e4 \ud568\uc218: CrossEntropyLoss criterion = nn . CrossEntropyLoss () # \uc635\ud2f0\ub9c8\uc774\uc800: Adam optimizer = optim . Adam ( model . parameters (), lr = 0.001 )","title":"4. \uc190\uc2e4 \ud568\uc218 \ubc0f \ucd5c\uc801\ud654 \uae30\ubc95"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#5_1","text":"epochs = 5 for epoch in range ( epochs ): model . train () # \ud559\uc2b5 \ubaa8\ub4dc running_loss = 0.0 for images , labels in train_loader : images , labels = images . to ( device ), labels . to ( device ) # Forward pass outputs = model ( images ) loss = criterion ( outputs , labels ) # Backward pass and optimization optimizer . zero_grad () loss . backward () optimizer . step () running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { epochs } ], Loss: { running_loss / len ( train_loader ) : .4f } \" )","title":"5. \ud559\uc2b5 \ub8e8\ud504"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#6","text":"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4. model . eval () # \ud3c9\uac00 \ubaa8\ub4dc correct = 0 total = 0 with torch . no_grad (): for images , labels in test_loader : images , labels = images . to ( device ), labels . to ( device ) outputs = model ( images ) _ , predicted = torch . max ( outputs , 1 ) total += labels . size ( 0 ) correct += ( predicted == labels ) . sum () . item () print ( f \"Test Accuracy: { 100 * correct / total : .2f } %\" )","title":"6. \ubaa8\ub378 \ud3c9\uac00"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#7","text":"Conv2d Parameters : in_channels : \uc785\ub825 \ucc44\ub110 \uc218 (\ud751\ubc31 \uc774\ubbf8\uc9c0=1, \uceec\ub7ec \uc774\ubbf8\uc9c0=3). out_channels : \ucd9c\ub825 \ucc44\ub110 \uc218 (\ud544\ud130 \uc218). kernel_size : \ud544\ud130 \ud06c\uae30 (\ubcf4\ud1b5 3x3 \ub610\ub294 5x5 \uc0ac\uc6a9). stride : \ud544\ud130 \uc774\ub3d9 \uac04\uaca9 (\uae30\ubcf8\uac12=1). padding : \uc785\ub825\uc5d0 \ucd94\uac00\ub418\ub294 \ud53d\uc140 (\uc5e3\uc9c0 \ubcf4\uc874\uc6a9). MaxPool2d Parameters : kernel_size : \ud480\ub9c1 \uc601\uc5ed \ud06c\uae30. stride : \ud480\ub9c1 \uc774\ub3d9 \uac04\uaca9 (\uae30\ubcf8\uac12=kernel_size). Linear Parameters : \uc785\ub825 \ubc0f \ucd9c\ub825 \ub178\ub4dc\uc758 \uac1c\uc218.","title":"7. \ubaa8\ub378\uc758 \uc8fc\uc694 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#8-cnn","text":"\ubcf5\uc7a1\ud55c \ub370\uc774\ud130\uc14b(CIFAR-10, ImageNet \ub4f1)\uc744 \ucc98\ub9ac\ud558\ub824\uba74 \ub354 \ub9ce\uc740 \ucee8\ubcfc\ub8e8\uc158 \ub808\uc774\uc5b4\uc640 \ub4dc\ub86d\uc544\uc6c3(dropout)\uc744 \ucd94\uac00\ud558\uac70\ub098, ResNet, VGG\uc640 \uac19\uc740 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"8. \ud655\uc7a5: \ub354 \ubcf5\uc7a1\ud55c CNN"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn/#9","text":"\uc704 \ucf54\ub4dc\ub85c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uba74 \uc57d **98% \uc774\uc0c1\uc758 \ud14c\uc2a4\ud2b8 \uc815\ud655\ub3c4**\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CNN\uc740 \uc774\ubbf8\uc9c0 \ucc98\ub9ac\uc5d0\uc11c \ub6f0\uc5b4\ub09c \uc131\ub2a5\uc744 \ubc1c\ud718\ud558\uba70, PyTorch\ub97c \uc0ac\uc6a9\ud558\uba74 \uac04\ub2e8\ud788 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Jetson Orin Nano\uc640 \uac19\uc740 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c CNN\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \uc5e3\uc9c0 \ucef4\ud4e8\ud305 \ud658\uacbd\uc5d0\uc11c\ub3c4 \uac15\ub825\ud55c AI \ubaa8\ub378\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"9. \uacb0\uacfc"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/","text":"Flatten \ub808\uc774\uc5b4 \uc790\ub3d9\uacc4\uc0b0 PyTorch\ub294 nn.Flatten() \uc774\ud6c4 nn.Linear \uacc4\uce35\uc744 \uc815\uc758\ud560 \ub54c, \uc785\ub825 \ud150\uc11c\uc758 \ucc28\uc6d0\uc744 \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c nn.Linear \uc758 \uc785\ub825 \ud06c\uae30\uc640 \ucd9c\ub825 \ud06c\uae30\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc9c0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 PyTorch\ub97c \uc0ac\uc6a9\ud558\uba74 \uc785\ub825 \ud06c\uae30\ub97c \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc744 \uac04\ub2e8\ud788 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc790\ub3d9\uc73c\ub85c \ud06c\uae30 \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95 1. Forward Pass\uc5d0\uc11c \ud150\uc11c \ud06c\uae30 \uacc4\uc0b0 \ubaa8\ub378\uc758 forward \uba54\uc11c\ub4dc\uc5d0\uc11c \uc785\ub825 \ub370\uc774\ud130\uac00 \ucee8\ubcfc\ub8e8\uc158\uacfc \ud480\ub9c1 \ub808\uc774\uc5b4\ub97c \uac70\uce5c \ud6c4 \ub0a8\uc740 \ud150\uc11c\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\uc5ec \ub3d9\uc801\uc73c\ub85c nn.Linear \ub97c \ucd08\uae30\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc784\uc2dc \ud150\uc11c\ub97c \uc0ac\uc6a9\ud574 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\ub294 \uc774\ub97c \uad6c\ud604\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4. import torch import torch.nn as nn class CNNModel ( nn . Module ): def __init__ ( self , input_channels = 1 , num_classes = 10 ): super ( CNNModel , self ) . __init__ () # Convolutional layers self . conv_layers = nn . Sequential ( nn . Conv2d ( input_channels , 32 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ), nn . Conv2d ( 32 , 64 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ) ) # Placeholder for fully connected layers self . fc_layers = None # \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc self . num_classes = num_classes def forward ( self , x ): # Convolutional layers forward pass x = self . conv_layers ( x ) # Fully connected layers (initialize dynamically if not already initialized) if self . fc_layers is None : num_features = x . shape [ 1 ] * x . shape [ 2 ] * x . shape [ 3 ] # \ucc44\ub110 * \ub192\uc774 * \ub108\ube44 self . fc_layers = nn . Sequential ( nn . Flatten (), nn . Linear ( num_features , 128 ), nn . ReLU (), nn . Linear ( 128 , self . num_classes ) ) . to ( x . device ) # GPU\ub85c \uc774\ub3d9 # Fully connected layers forward pass x = self . fc_layers ( x ) return x \ub3d9\uc791 \ubc29\uc2dd \ucd08\uae30 Conv \ub808\uc774\uc5b4 \uc2e4\ud589 : forward \uba54\uc11c\ub4dc\uc5d0\uc11c \uc785\ub825 \ub370\uc774\ud130\ub97c self.conv_layers \uc5d0 \ud1b5\uacfc\uc2dc\ucf1c \ud150\uc11c\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4. \ub3d9\uc801 Linear \ucd08\uae30\ud654 : \ud150\uc11c\uc758 \ucd9c\ub825 \ud06c\uae30\ub97c \uae30\ubc18\uc73c\ub85c nn.Linear \uacc4\uce35\uc744 \ub3d9\uc801\uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 nn.Linear \uacc4\uce35\uc758 \uc785\ub825 \ud06c\uae30\ub97c \ubbf8\ub9ac \uc54c \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud55c \ubc88\ub9cc \ucd08\uae30\ud654 : self.fc_layers \uac00 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0\ub9cc Linear \uacc4\uce35\uc744 \uc0dd\uc131\ud558\ubbc0\ub85c \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8 # \ubaa8\ub378 \uc0dd\uc131 model = CNNModel ( input_channels = 1 , num_classes = 10 ) # \uc784\uc758\uc758 \uc785\ub825 \ub370\uc774\ud130 (\ud751\ubc31 \uc774\ubbf8\uc9c0: 1\ucc44\ub110, 28x28) x = torch . rand ( 64 , 1 , 28 , 28 ) # \ubc30\uce58 \ud06c\uae30: 64 output = model ( x ) # \ucd9c\ub825 \ud06c\uae30 \ud655\uc778 print ( \"Output shape:\" , output . shape ) # (64, 10) \uc7a5\uc810 \ubaa8\ub378\uc758 \uc785\ub825 \ub370\uc774\ud130 \ud06c\uae30\uc5d0 \ub530\ub77c nn.Linear \ub97c \ub3d9\uc801\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\uc5b4 \uc7ac\uc0ac\uc6a9\uc131\uc774 \ub192\uc544\uc9d0. \ub370\uc774\ud130\uc14b\ub9c8\ub2e4 \ub2e4\ub978 \ud06c\uae30\uc758 \uc785\ub825 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud560 \ub54c \uc720\uc6a9. \uc8fc\uc758\uc810 Forward pass\ub97c \ud1b5\ud574 \uacc4\uc0b0\ud558\ubbc0\ub85c __init__ \uba54\uc11c\ub4dc\uc5d0\uc11c \uacc4\uce35 \uad6c\uc870\ub97c \uc644\uc804\ud788 \uc815\uc758\ud558\uc9c0 \ubabb\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc77c\ubd80 \ubaa8\ub378 \ub514\ubc84\uae45 \ub3c4\uad6c\uc5d0\uc11c \ubd88\ud3b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c\ub294 \ud06c\uae30\ub97c \uc815\ud655\ud788 \uacc4\uc0b0\ud558\uc5ec __init__ \uc5d0\uc11c \ubaa8\ub4e0 \uacc4\uce35\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc124\uc815\ud558\ub294 \uac83\uc774 \ub354 \uba85\ud655\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"5.3 CNN+"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/#flatten","text":"PyTorch\ub294 nn.Flatten() \uc774\ud6c4 nn.Linear \uacc4\uce35\uc744 \uc815\uc758\ud560 \ub54c, \uc785\ub825 \ud150\uc11c\uc758 \ucc28\uc6d0\uc744 \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c nn.Linear \uc758 \uc785\ub825 \ud06c\uae30\uc640 \ucd9c\ub825 \ud06c\uae30\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc9c0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 PyTorch\ub97c \uc0ac\uc6a9\ud558\uba74 \uc785\ub825 \ud06c\uae30\ub97c \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc744 \uac04\ub2e8\ud788 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Flatten \ub808\uc774\uc5b4 \uc790\ub3d9\uacc4\uc0b0"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/#_1","text":"","title":"\uc790\ub3d9\uc73c\ub85c \ud06c\uae30 \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/#1-forward-pass","text":"\ubaa8\ub378\uc758 forward \uba54\uc11c\ub4dc\uc5d0\uc11c \uc785\ub825 \ub370\uc774\ud130\uac00 \ucee8\ubcfc\ub8e8\uc158\uacfc \ud480\ub9c1 \ub808\uc774\uc5b4\ub97c \uac70\uce5c \ud6c4 \ub0a8\uc740 \ud150\uc11c\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\uc5ec \ub3d9\uc801\uc73c\ub85c nn.Linear \ub97c \ucd08\uae30\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc784\uc2dc \ud150\uc11c\ub97c \uc0ac\uc6a9\ud574 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\ub294 \uc774\ub97c \uad6c\ud604\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4. import torch import torch.nn as nn class CNNModel ( nn . Module ): def __init__ ( self , input_channels = 1 , num_classes = 10 ): super ( CNNModel , self ) . __init__ () # Convolutional layers self . conv_layers = nn . Sequential ( nn . Conv2d ( input_channels , 32 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ), nn . Conv2d ( 32 , 64 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ) ) # Placeholder for fully connected layers self . fc_layers = None # \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc self . num_classes = num_classes def forward ( self , x ): # Convolutional layers forward pass x = self . conv_layers ( x ) # Fully connected layers (initialize dynamically if not already initialized) if self . fc_layers is None : num_features = x . shape [ 1 ] * x . shape [ 2 ] * x . shape [ 3 ] # \ucc44\ub110 * \ub192\uc774 * \ub108\ube44 self . fc_layers = nn . Sequential ( nn . Flatten (), nn . Linear ( num_features , 128 ), nn . ReLU (), nn . Linear ( 128 , self . num_classes ) ) . to ( x . device ) # GPU\ub85c \uc774\ub3d9 # Fully connected layers forward pass x = self . fc_layers ( x ) return x","title":"1. Forward Pass\uc5d0\uc11c \ud150\uc11c \ud06c\uae30 \uacc4\uc0b0"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/#_2","text":"\ucd08\uae30 Conv \ub808\uc774\uc5b4 \uc2e4\ud589 : forward \uba54\uc11c\ub4dc\uc5d0\uc11c \uc785\ub825 \ub370\uc774\ud130\ub97c self.conv_layers \uc5d0 \ud1b5\uacfc\uc2dc\ucf1c \ud150\uc11c\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4. \ub3d9\uc801 Linear \ucd08\uae30\ud654 : \ud150\uc11c\uc758 \ucd9c\ub825 \ud06c\uae30\ub97c \uae30\ubc18\uc73c\ub85c nn.Linear \uacc4\uce35\uc744 \ub3d9\uc801\uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 nn.Linear \uacc4\uce35\uc758 \uc785\ub825 \ud06c\uae30\ub97c \ubbf8\ub9ac \uc54c \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud55c \ubc88\ub9cc \ucd08\uae30\ud654 : self.fc_layers \uac00 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0\ub9cc Linear \uacc4\uce35\uc744 \uc0dd\uc131\ud558\ubbc0\ub85c \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.","title":"\ub3d9\uc791 \ubc29\uc2dd"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/#_3","text":"# \ubaa8\ub378 \uc0dd\uc131 model = CNNModel ( input_channels = 1 , num_classes = 10 ) # \uc784\uc758\uc758 \uc785\ub825 \ub370\uc774\ud130 (\ud751\ubc31 \uc774\ubbf8\uc9c0: 1\ucc44\ub110, 28x28) x = torch . rand ( 64 , 1 , 28 , 28 ) # \ubc30\uce58 \ud06c\uae30: 64 output = model ( x ) # \ucd9c\ub825 \ud06c\uae30 \ud655\uc778 print ( \"Output shape:\" , output . shape ) # (64, 10)","title":"\ud14c\uc2a4\ud2b8"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/#_4","text":"\ubaa8\ub378\uc758 \uc785\ub825 \ub370\uc774\ud130 \ud06c\uae30\uc5d0 \ub530\ub77c nn.Linear \ub97c \ub3d9\uc801\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\uc5b4 \uc7ac\uc0ac\uc6a9\uc131\uc774 \ub192\uc544\uc9d0. \ub370\uc774\ud130\uc14b\ub9c8\ub2e4 \ub2e4\ub978 \ud06c\uae30\uc758 \uc785\ub825 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud560 \ub54c \uc720\uc6a9.","title":"\uc7a5\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/cnn_a/#_5","text":"Forward pass\ub97c \ud1b5\ud574 \uacc4\uc0b0\ud558\ubbc0\ub85c __init__ \uba54\uc11c\ub4dc\uc5d0\uc11c \uacc4\uce35 \uad6c\uc870\ub97c \uc644\uc804\ud788 \uc815\uc758\ud558\uc9c0 \ubabb\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc77c\ubd80 \ubaa8\ub378 \ub514\ubc84\uae45 \ub3c4\uad6c\uc5d0\uc11c \ubd88\ud3b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c\ub294 \ud06c\uae30\ub97c \uc815\ud655\ud788 \uacc4\uc0b0\ud558\uc5ec __init__ \uc5d0\uc11c \ubaa8\ub4e0 \uacc4\uce35\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc124\uc815\ud558\ub294 \uac83\uc774 \ub354 \uba85\ud655\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc8fc\uc758\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/","text":"MNIST \ud559\uc2b5 PyTorch\uc5d0\uc11c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc740 \ub525\ub7ec\ub2dd\uc758 \uae30\ubcf8\uc801\uc778 \uc6cc\ud06c\ud50c\ub85c\uc6b0\ub97c \uc774\ud574\ud558\ub294 \uc88b\uc740 \uc2dc\uc791\uc810\uc785\ub2c8\ub2e4. MNIST\ub294 \uc190\uc73c\ub85c \uc4f4 \uc22b\uc790 \uc774\ubbf8\uc9c0(28x28 \ud53d\uc140, \ud751\ubc31)\ub97c \ubd84\ub958\ud558\ub294 \uc791\uc5c5\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, \ud074\ub798\uc2a4\ub294 0\ubd80\ud130 9\uae4c\uc9c0 \ucd1d 10\uac1c\uc785\ub2c8\ub2e4. \uc544\ub798\uc5d0 MNIST \ub370\uc774\ud130\uc14b\uc744 \ud65c\uc6a9\ud558\uc5ec PyTorch\ub85c \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \uad6c\ud604\ud558\ub294 \uc804\uccb4 \uacfc\uc815\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4. 1. PyTorch\uc758 \uae30\ubcf8 \uad6c\uc131 PyTorch\uc5d0\uc11c MNIST \uc791\uc5c5\uc740 \uc544\ub798\uc640 \uac19\uc740 \uc8fc\uc694 \ub2e8\uacc4\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4: 1. \ub370\uc774\ud130 \uc900\ube44 2. \ubaa8\ub378 \uc815\uc758 3. \ud559\uc2b5 \uc124\uc815 4. \ud559\uc2b5 \uc2e4\ud589 5. \ud3c9\uac00 2. \ub2e8\uacc4\ubcc4 \ucf54\ub4dc \uc124\uba85 2.1. \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8 import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms from torch.utils.data import DataLoader 2.2. \ub370\uc774\ud130 \uc900\ube44 torchvision.datasets \ub97c \uc0ac\uc6a9\ud558\uc5ec MNIST \ub370\uc774\ud130\uc14b\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 \ubcc0\ud658\ud569\ub2c8\ub2e4. # \ub370\uc774\ud130 \ubcc0\ud658: Tensor \ubcc0\ud658\uacfc \uc815\uaddc\ud654 transform = transforms . Compose ([ transforms . ToTensor (), # \uc774\ubbf8\uc9c0\ub97c Tensor\ub85c \ubcc0\ud658 transforms . Normalize (( 0.5 ,), ( 0.5 ,)) # \ud3c9\uade0 0.5, \ud45c\uc900\ud3b8\ucc28 0.5\ub85c \uc815\uaddc\ud654 ]) # \ud559\uc2b5 \ub370\uc774\ud130\uc14b\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b \ub85c\ub4dc train_dataset = datasets . MNIST ( root = './data' , train = True , transform = transform , download = True ) test_dataset = datasets . MNIST ( root = './data' , train = False , transform = transform , download = True ) # \ub370\uc774\ud130 \ub85c\ub354 \uc0dd\uc131 train_loader = DataLoader ( dataset = train_dataset , batch_size = 64 , shuffle = True ) test_loader = DataLoader ( dataset = test_dataset , batch_size = 64 , shuffle = False ) 2.3. \ubaa8\ub378 \uc815\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 PyTorch\uc758 nn.Module \uc744 \uc0c1\uc18d\ubc1b\uc544 \uc815\uc758\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud55c Fully Connected Neural Network\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. class MNISTModel ( nn . Module ): def __init__ ( self ): super ( MNISTModel , self ) . __init__ () self . fc = nn . Sequential ( nn . Flatten (), # 28x28 \uc774\ubbf8\uc9c0\ub97c 1\ucc28\uc6d0 \ubca1\ud130\ub85c \ubcc0\ud658 nn . Linear ( 28 * 28 , 128 ), # \uc785\ub825 \ud06c\uae30: 784, \ucd9c\ub825 \ud06c\uae30: 128 nn . ReLU (), # \ud65c\uc131\ud654 \ud568\uc218 nn . Linear ( 128 , 64 ), # 128 -> 64 nn . ReLU (), nn . Linear ( 64 , 10 ) # 64 -> 10 (\ud074\ub798\uc2a4 \uac1c\uc218) ) def forward ( self , x ): return self . fc ( x ) # \ubaa8\ub378 \ucd08\uae30\ud654 model = MNISTModel () device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) model . to ( device ) # GPU\ub85c \uc774\ub3d9 2.4. \uc190\uc2e4 \ud568\uc218 \ubc0f \ucd5c\uc801\ud654 \uc124\uc815 \uc190\uc2e4 \ud568\uc218 : \ubd84\ub958 \ubb38\uc81c\uc5d0\uc11c\ub294 CrossEntropyLoss \uc0ac\uc6a9. \ucd5c\uc801\ud654 \uae30\ubc95 : Adam \uc635\ud2f0\ub9c8\uc774\uc800 \uc0ac\uc6a9. criterion = nn . CrossEntropyLoss () # \uc190\uc2e4 \ud568\uc218 optimizer = optim . Adam ( model . parameters (), lr = 0.001 ) # Adam \uc635\ud2f0\ub9c8\uc774\uc800 2.5. \ud559\uc2b5 \ub8e8\ud504 MNIST \ub370\uc774\ud130\uc14b\uc744 \ubaa8\ub378\uc5d0 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4. \uac01 epoch\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uac00\uc838\uc640 \ud559\uc2b5\ud569\ub2c8\ub2e4. epochs = 5 for epoch in range ( epochs ): model . train () # \ubaa8\ub378\uc744 \ud559\uc2b5 \ubaa8\ub4dc\ub85c \uc804\ud658 running_loss = 0.0 for images , labels in train_loader : images , labels = images . to ( device ), labels . to ( device ) # GPU\ub85c \ub370\uc774\ud130 \uc774\ub3d9 # Forward pass outputs = model ( images ) loss = criterion ( outputs , labels ) # Backward pass and optimization optimizer . zero_grad () # Gradient \ucd08\uae30\ud654 loss . backward () # Backpropagation optimizer . step () # Optimizer \uc5c5\ub370\uc774\ud2b8 running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { epochs } ], Loss: { running_loss / len ( train_loader ) : .4f } \" ) 2.6. \ubaa8\ub378 \ud3c9\uac00 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ud3c9\uac00\ud569\ub2c8\ub2e4. model . eval () # \ud3c9\uac00 \ubaa8\ub4dc\ub85c \uc804\ud658 correct = 0 total = 0 with torch . no_grad (): # Gradient \uacc4\uc0b0 \ube44\ud65c\uc131\ud654 for images , labels in test_loader : images , labels = images . to ( device ), labels . to ( device ) outputs = model ( images ) _ , predicted = torch . max ( outputs , 1 ) # \uac00\uc7a5 \ub192\uc740 \ud655\ub960\uc758 \ud074\ub798\uc2a4 \uc608\uce21 total += labels . size ( 0 ) correct += ( predicted == labels ) . sum () . item () print ( f 'Accuracy: { 100 * correct / total : .2f } %' ) 3. \ud655\uc7a5 \ubc0f \ucd5c\uc801\ud654 3.1. CNN \uc801\uc6a9 Fully Connected Neural Network \ub300\uc2e0 Convolutional Neural Network(CNN)\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4. class CNNModel ( nn . Module ): def __init__ ( self ): super ( CNNModel , self ) . __init__ () self . conv_layers = nn . Sequential ( nn . Conv2d ( 1 , 32 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ), nn . Conv2d ( 32 , 64 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ) ) self . fc_layers = nn . Sequential ( nn . Flatten (), nn . Linear ( 64 * 7 * 7 , 128 ), nn . ReLU (), nn . Linear ( 128 , 10 ) ) def forward ( self , x ): x = self . conv_layers ( x ) x = self . fc_layers ( x ) return x # CNN \ubaa8\ub378 \uc0dd\uc131 model = CNNModel () . to ( device ) 3.2. Mixed Precision Training Automatic Mixed Precision(AMP)\ub97c \uc801\uc6a9\ud558\uc5ec GPU \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc744 \uc904\uc774\uace0 \uc5f0\uc0b0 \uc18d\ub3c4\ub97c \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. 4. \uacb0\uacfc \uc704 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\uba74 5 epoch \uae30\uc900 \uc57d 98% \uc774\uc0c1\uc758 \uc815\ud655\ub3c4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. MNIST \ub370\uc774\ud130\uc14b\uc740 PyTorch\ub85c \ub525\ub7ec\ub2dd\uc744 \ud559\uc2b5\ud558\uace0, \ubaa8\ub378 \uc124\uacc4 \ubc0f \ucd5c\uc801\ud654\ub97c \uc2e4\uc2b5\ud558\uae30\uc5d0 \uc801\ud569\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4. Jetson Orin Nano \uac19\uc740 \uc5e3\uc9c0 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c\ub3c4 \ud6a8\uc728\uc801\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"5.2 MNIST"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#mnist","text":"PyTorch\uc5d0\uc11c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc740 \ub525\ub7ec\ub2dd\uc758 \uae30\ubcf8\uc801\uc778 \uc6cc\ud06c\ud50c\ub85c\uc6b0\ub97c \uc774\ud574\ud558\ub294 \uc88b\uc740 \uc2dc\uc791\uc810\uc785\ub2c8\ub2e4. MNIST\ub294 \uc190\uc73c\ub85c \uc4f4 \uc22b\uc790 \uc774\ubbf8\uc9c0(28x28 \ud53d\uc140, \ud751\ubc31)\ub97c \ubd84\ub958\ud558\ub294 \uc791\uc5c5\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, \ud074\ub798\uc2a4\ub294 0\ubd80\ud130 9\uae4c\uc9c0 \ucd1d 10\uac1c\uc785\ub2c8\ub2e4. \uc544\ub798\uc5d0 MNIST \ub370\uc774\ud130\uc14b\uc744 \ud65c\uc6a9\ud558\uc5ec PyTorch\ub85c \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \uad6c\ud604\ud558\ub294 \uc804\uccb4 \uacfc\uc815\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"MNIST \ud559\uc2b5"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#1-pytorch","text":"PyTorch\uc5d0\uc11c MNIST \uc791\uc5c5\uc740 \uc544\ub798\uc640 \uac19\uc740 \uc8fc\uc694 \ub2e8\uacc4\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4: 1. \ub370\uc774\ud130 \uc900\ube44 2. \ubaa8\ub378 \uc815\uc758 3. \ud559\uc2b5 \uc124\uc815 4. \ud559\uc2b5 \uc2e4\ud589 5. \ud3c9\uac00","title":"1. PyTorch\uc758 \uae30\ubcf8 \uad6c\uc131"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#2","text":"","title":"2. \ub2e8\uacc4\ubcc4 \ucf54\ub4dc \uc124\uba85"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#21","text":"import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms from torch.utils.data import DataLoader","title":"2.1. \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#22","text":"torchvision.datasets \ub97c \uc0ac\uc6a9\ud558\uc5ec MNIST \ub370\uc774\ud130\uc14b\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 \ubcc0\ud658\ud569\ub2c8\ub2e4. # \ub370\uc774\ud130 \ubcc0\ud658: Tensor \ubcc0\ud658\uacfc \uc815\uaddc\ud654 transform = transforms . Compose ([ transforms . ToTensor (), # \uc774\ubbf8\uc9c0\ub97c Tensor\ub85c \ubcc0\ud658 transforms . Normalize (( 0.5 ,), ( 0.5 ,)) # \ud3c9\uade0 0.5, \ud45c\uc900\ud3b8\ucc28 0.5\ub85c \uc815\uaddc\ud654 ]) # \ud559\uc2b5 \ub370\uc774\ud130\uc14b\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b \ub85c\ub4dc train_dataset = datasets . MNIST ( root = './data' , train = True , transform = transform , download = True ) test_dataset = datasets . MNIST ( root = './data' , train = False , transform = transform , download = True ) # \ub370\uc774\ud130 \ub85c\ub354 \uc0dd\uc131 train_loader = DataLoader ( dataset = train_dataset , batch_size = 64 , shuffle = True ) test_loader = DataLoader ( dataset = test_dataset , batch_size = 64 , shuffle = False )","title":"2.2. \ub370\uc774\ud130 \uc900\ube44"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#23","text":"\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 PyTorch\uc758 nn.Module \uc744 \uc0c1\uc18d\ubc1b\uc544 \uc815\uc758\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud55c Fully Connected Neural Network\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. class MNISTModel ( nn . Module ): def __init__ ( self ): super ( MNISTModel , self ) . __init__ () self . fc = nn . Sequential ( nn . Flatten (), # 28x28 \uc774\ubbf8\uc9c0\ub97c 1\ucc28\uc6d0 \ubca1\ud130\ub85c \ubcc0\ud658 nn . Linear ( 28 * 28 , 128 ), # \uc785\ub825 \ud06c\uae30: 784, \ucd9c\ub825 \ud06c\uae30: 128 nn . ReLU (), # \ud65c\uc131\ud654 \ud568\uc218 nn . Linear ( 128 , 64 ), # 128 -> 64 nn . ReLU (), nn . Linear ( 64 , 10 ) # 64 -> 10 (\ud074\ub798\uc2a4 \uac1c\uc218) ) def forward ( self , x ): return self . fc ( x ) # \ubaa8\ub378 \ucd08\uae30\ud654 model = MNISTModel () device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) model . to ( device ) # GPU\ub85c \uc774\ub3d9","title":"2.3. \ubaa8\ub378 \uc815\uc758"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#24","text":"\uc190\uc2e4 \ud568\uc218 : \ubd84\ub958 \ubb38\uc81c\uc5d0\uc11c\ub294 CrossEntropyLoss \uc0ac\uc6a9. \ucd5c\uc801\ud654 \uae30\ubc95 : Adam \uc635\ud2f0\ub9c8\uc774\uc800 \uc0ac\uc6a9. criterion = nn . CrossEntropyLoss () # \uc190\uc2e4 \ud568\uc218 optimizer = optim . Adam ( model . parameters (), lr = 0.001 ) # Adam \uc635\ud2f0\ub9c8\uc774\uc800","title":"2.4. \uc190\uc2e4 \ud568\uc218 \ubc0f \ucd5c\uc801\ud654 \uc124\uc815"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#25","text":"MNIST \ub370\uc774\ud130\uc14b\uc744 \ubaa8\ub378\uc5d0 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4. \uac01 epoch\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uac00\uc838\uc640 \ud559\uc2b5\ud569\ub2c8\ub2e4. epochs = 5 for epoch in range ( epochs ): model . train () # \ubaa8\ub378\uc744 \ud559\uc2b5 \ubaa8\ub4dc\ub85c \uc804\ud658 running_loss = 0.0 for images , labels in train_loader : images , labels = images . to ( device ), labels . to ( device ) # GPU\ub85c \ub370\uc774\ud130 \uc774\ub3d9 # Forward pass outputs = model ( images ) loss = criterion ( outputs , labels ) # Backward pass and optimization optimizer . zero_grad () # Gradient \ucd08\uae30\ud654 loss . backward () # Backpropagation optimizer . step () # Optimizer \uc5c5\ub370\uc774\ud2b8 running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { epochs } ], Loss: { running_loss / len ( train_loader ) : .4f } \" )","title":"2.5. \ud559\uc2b5 \ub8e8\ud504"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#26","text":"\ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ud3c9\uac00\ud569\ub2c8\ub2e4. model . eval () # \ud3c9\uac00 \ubaa8\ub4dc\ub85c \uc804\ud658 correct = 0 total = 0 with torch . no_grad (): # Gradient \uacc4\uc0b0 \ube44\ud65c\uc131\ud654 for images , labels in test_loader : images , labels = images . to ( device ), labels . to ( device ) outputs = model ( images ) _ , predicted = torch . max ( outputs , 1 ) # \uac00\uc7a5 \ub192\uc740 \ud655\ub960\uc758 \ud074\ub798\uc2a4 \uc608\uce21 total += labels . size ( 0 ) correct += ( predicted == labels ) . sum () . item () print ( f 'Accuracy: { 100 * correct / total : .2f } %' )","title":"2.6. \ubaa8\ub378 \ud3c9\uac00"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#3","text":"","title":"3. \ud655\uc7a5 \ubc0f \ucd5c\uc801\ud654"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#31-cnn","text":"Fully Connected Neural Network \ub300\uc2e0 Convolutional Neural Network(CNN)\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4. class CNNModel ( nn . Module ): def __init__ ( self ): super ( CNNModel , self ) . __init__ () self . conv_layers = nn . Sequential ( nn . Conv2d ( 1 , 32 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ), nn . Conv2d ( 32 , 64 , kernel_size = 3 , stride = 1 , padding = 1 ), nn . ReLU (), nn . MaxPool2d ( kernel_size = 2 , stride = 2 ) ) self . fc_layers = nn . Sequential ( nn . Flatten (), nn . Linear ( 64 * 7 * 7 , 128 ), nn . ReLU (), nn . Linear ( 128 , 10 ) ) def forward ( self , x ): x = self . conv_layers ( x ) x = self . fc_layers ( x ) return x # CNN \ubaa8\ub378 \uc0dd\uc131 model = CNNModel () . to ( device )","title":"3.1. CNN \uc801\uc6a9"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#32-mixed-precision-training","text":"Automatic Mixed Precision(AMP)\ub97c \uc801\uc6a9\ud558\uc5ec GPU \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc744 \uc904\uc774\uace0 \uc5f0\uc0b0 \uc18d\ub3c4\ub97c \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"3.2. Mixed Precision Training"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/mnist/#4","text":"\uc704 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\uba74 5 epoch \uae30\uc900 \uc57d 98% \uc774\uc0c1\uc758 \uc815\ud655\ub3c4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. MNIST \ub370\uc774\ud130\uc14b\uc740 PyTorch\ub85c \ub525\ub7ec\ub2dd\uc744 \ud559\uc2b5\ud558\uace0, \ubaa8\ub378 \uc124\uacc4 \ubc0f \ucd5c\uc801\ud654\ub97c \uc2e4\uc2b5\ud558\uae30\uc5d0 \uc801\ud569\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4. Jetson Orin Nano \uac19\uc740 \uc5e3\uc9c0 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c\ub3c4 \ud6a8\uc728\uc801\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4. \uacb0\uacfc"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/rasnet18/","text":"RasNet18 \uad6c\ud604 \uc544\ub798\ub294 PyTorch\ub97c \uc0ac\uc6a9\ud558\uc5ec ResNet18\uc744 \ud65c\uc6a9\ud55c \uc804\uc774 \ud559\uc2b5 \uacfc\uc815\uc744 \uad6c\ud604\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 \uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud558\uace0, \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uacc4\uc0b0\ud558\uba70, \uc804\ucc98\ub9ac \ubc0f \uc804\uc774 \ud559\uc2b5\uc744 \uc218\ud589\ud55c \ud6c4 \uc774\ubbf8\uc9c0\ub97c -45\ub3c4 ~ +45\ub3c4 \uac01\ub3c4\ub85c \uc608\uce21\ud558\ub294 \ucf54\ub4dc\uc785\ub2c8\ub2e4. \uc8fc\uc694 \ub2e8\uacc4: \ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \ud3c9\uade0/\ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0. \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac (ResNet18 \uc694\uad6c \uc0ac\ud56d\uc5d0 \ub9de\uac8c). ResNet18 \ubaa8\ub378\uc744 \ud65c\uc6a9\ud55c \uc804\uc774 \ud559\uc2b5 \uc124\uc815. \ubaa8\ub378 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \uacb0\uacfc \ucd9c\ub825. \ucf54\ub4dc: import os import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms , models from torch.utils.data import DataLoader import numpy as np import matplotlib.pyplot as plt # 1. \ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \ud3c9\uade0/\ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 def compute_mean_std ( data_loader ): mean = 0.0 std = 0.0 total_images = 0 for images , _ in data_loader : batch_samples = images . size ( 0 ) # \ubc30\uce58 \ud06c\uae30 images = images . view ( batch_samples , images . size ( 1 ), - 1 ) # (N, C, H*W) mean += images . mean ( 2 ) . sum ( 0 ) std += images . std ( 2 ) . sum ( 0 ) total_images += batch_samples mean /= total_images std /= total_images return mean , std # 2. \ub370\uc774\ud130\uc14b \uc815\uc758 \ubc0f \ub85c\ub4dc data_dir = \"path_to_Rasnet18_directory\" # \ub370\uc774\ud130\uc14b \uacbd\ub85c transform = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # ResNet18\uc758 \uc785\ub825 \ud06c\uae30\uc5d0 \ub9de\ucda4 transforms . ToTensor () # Tensor\ub85c \ubcc0\ud658 ]) dataset = datasets . ImageFolder ( data_dir , transform = transform ) data_loader = DataLoader ( dataset , batch_size = 32 , shuffle = True ) # \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean , std = compute_mean_std ( data_loader ) print ( f \"Mean: { mean } , Std: { std } \" ) # \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130 \uc815\uaddc\ud654 transform_normalized = transforms . Compose ([ transforms . Resize (( 224 , 224 )), transforms . ToTensor (), transforms . Normalize ( mean , std ) ]) # \ub370\uc774\ud130 \ub85c\ub354 \uc5c5\ub370\uc774\ud2b8 dataset = datasets . ImageFolder ( data_dir , transform = transform_normalized ) data_loader = DataLoader ( dataset , batch_size = 32 , shuffle = True ) # 3. ResNet18 \ubaa8\ub378 \ub85c\ub4dc \ubc0f \uc218\uc815 device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) model = models . resnet18 ( pretrained = True ) # \uae30\uc874 \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\ub97c \uac01\ub3c4 \ud68c\uadc0\ub97c \uc704\ud55c \ucd9c\ub825 \ub808\uc774\uc5b4\ub85c \uc218\uc815 model . fc = nn . Linear ( model . fc . in_features , 1 ) model = model . to ( device ) # 4. \uc190\uc2e4 \ud568\uc218 \ubc0f \uc635\ud2f0\ub9c8\uc774\uc800 \uc124\uc815 criterion = nn . MSELoss () # \ud68c\uadc0 \ubb38\uc81c\uc5d0 \uc801\ud569\ud55c \uc190\uc2e4 \ud568\uc218 optimizer = optim . Adam ( model . parameters (), lr = 0.001 ) # 5. \ubaa8\ub378 \ud559\uc2b5 def train_model ( model , data_loader , criterion , optimizer , num_epochs = 5 ): model . train () for epoch in range ( num_epochs ): running_loss = 0.0 for images , labels in data_loader : # \ub77c\ubca8\uc744 -45\ub3c4 ~ 45\ub3c4 \ubc94\uc704\ub85c \ub9e4\ud551 (\uc784\uc758\ub85c \uc124\uc815) angles = torch . rand ( len ( labels )) * 90 - 45 angles = angles . view ( - 1 , 1 ) . to ( device ) # \ud68c\uadc0\uac12\uc5d0 \ub9de\uac8c reshape images = images . to ( device ) # Forward outputs = model ( images ) loss = criterion ( outputs , angles ) # Backward optimizer . zero_grad () loss . backward () optimizer . step () running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { num_epochs } ], Loss: { running_loss / len ( data_loader ) : .4f } \" ) # \ud559\uc2b5 \uc218\ud589 train_model ( model , data_loader , criterion , optimizer , num_epochs = 5 ) # 6. \uacb0\uacfc \ud655\uc778: -45\ub3c4 ~ 45\ub3c4 \uac01\ub3c4 \ucd9c\ub825 def test_model ( model , data_loader ): model . eval () with torch . no_grad (): for images , _ in data_loader : images = images . to ( device ) outputs = model ( images ) . cpu () . numpy () for i , output in enumerate ( outputs ): angle = output [ 0 ] print ( f \"Predicted Angle: { angle : .2f } degrees\" ) # \uccab \ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc608\uc81c\ub85c \ucd9c\ub825 if i == 0 : img = images [ i ] . cpu () . numpy () . transpose (( 1 , 2 , 0 )) * std . numpy () + mean . numpy () img = np . clip ( img , 0 , 1 ) plt . imshow ( img ) plt . title ( f \"Predicted Angle: { angle : .2f } \u00b0\" ) plt . axis ( \"off\" ) plt . show () break # \ud14c\uc2a4\ud2b8 \uc2e4\ud589 test_model ( model , data_loader ) \ucf54\ub4dc \uc124\uba85: \ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \uc804\ucc98\ub9ac : datasets.ImageFolder \ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud558\uba70, ResNet18\uc758 \uc785\ub825 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\uac8c \ud06c\uae30\ub97c \uc870\uc815\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\uc758 \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std)\ub97c \uacc4\uc0b0\ud558\uace0, \uc774\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uc815\uaddc\ud654\ud569\ub2c8\ub2e4. ResNet18 \uc218\uc815 : \uc0ac\uc804 \ud559\uc2b5\ub41c ResNet18 \ubaa8\ub378\uc744 \ubd88\ub7ec\uc628 \ub4a4 \ub9c8\uc9c0\ub9c9 Fully Connected Layer\ub97c 1\uac1c \ucd9c\ub825\uac12 \uc73c\ub85c \uc218\uc815\ud569\ub2c8\ub2e4. \uc774\ub294 \uac01\ub3c4\ub97c \uc608\uce21\ud558\uae30 \uc704\ud55c \ud68c\uadc0 \ubb38\uc81c\uc5d0 \ub9de\ucd98 \uc124\uc815\uc785\ub2c8\ub2e4. \ud559\uc2b5 : \ub79c\ub364\ud558\uac8c \uc0dd\uc131\ub41c \uac01\ub3c4\ub97c \uc815\ub2f5\uac12\uc73c\ub85c \uc124\uc815(-45\ub3c4 ~ +45\ub3c4). MSELoss\ub97c \uc190\uc2e4 \ud568\uc218\ub85c \uc0ac\uc6a9\ud558\uc5ec \ud559\uc2b5\ud569\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8 \ubc0f \ucd9c\ub825 : \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01\ub3c4\ub97c \uc608\uce21\ud558\uace0, \uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud558\uba70 \uc608\uce21 \uac01\ub3c4\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. \uc694\uad6c\uc0ac\ud56d \uc124\uce58: PyTorch torchvision matplotlib pip install torch torchvision matplotlib \uc774 \uc608\uc81c\ub294 \ub370\uc774\ud130 \ub514\ub809\ud1a0\ub9ac \uad6c\uc870\uc640 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac\uc5d0 \ub530\ub77c \uc218\uc815\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud544\uc694\ud558\uba74 \uad6c\uccb4\uc801\uc778 \ub370\uc774\ud130 \uad6c\uc870\uc5d0 \ub9de\uac8c \uc870\uc815\ud558\uc138\uc694! \ud83d\ude0a","title":"RasNet18 \uad6c\ud604"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/rasnet18/#rasnet18","text":"\uc544\ub798\ub294 PyTorch\ub97c \uc0ac\uc6a9\ud558\uc5ec ResNet18\uc744 \ud65c\uc6a9\ud55c \uc804\uc774 \ud559\uc2b5 \uacfc\uc815\uc744 \uad6c\ud604\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 \uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud558\uace0, \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uacc4\uc0b0\ud558\uba70, \uc804\ucc98\ub9ac \ubc0f \uc804\uc774 \ud559\uc2b5\uc744 \uc218\ud589\ud55c \ud6c4 \uc774\ubbf8\uc9c0\ub97c -45\ub3c4 ~ +45\ub3c4 \uac01\ub3c4\ub85c \uc608\uce21\ud558\ub294 \ucf54\ub4dc\uc785\ub2c8\ub2e4.","title":"RasNet18 \uad6c\ud604"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/rasnet18/#_1","text":"\ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \ud3c9\uade0/\ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0. \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac (ResNet18 \uc694\uad6c \uc0ac\ud56d\uc5d0 \ub9de\uac8c). ResNet18 \ubaa8\ub378\uc744 \ud65c\uc6a9\ud55c \uc804\uc774 \ud559\uc2b5 \uc124\uc815. \ubaa8\ub378 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \uacb0\uacfc \ucd9c\ub825.","title":"\uc8fc\uc694 \ub2e8\uacc4:"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/rasnet18/#_2","text":"import os import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms , models from torch.utils.data import DataLoader import numpy as np import matplotlib.pyplot as plt # 1. \ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \ud3c9\uade0/\ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 def compute_mean_std ( data_loader ): mean = 0.0 std = 0.0 total_images = 0 for images , _ in data_loader : batch_samples = images . size ( 0 ) # \ubc30\uce58 \ud06c\uae30 images = images . view ( batch_samples , images . size ( 1 ), - 1 ) # (N, C, H*W) mean += images . mean ( 2 ) . sum ( 0 ) std += images . std ( 2 ) . sum ( 0 ) total_images += batch_samples mean /= total_images std /= total_images return mean , std # 2. \ub370\uc774\ud130\uc14b \uc815\uc758 \ubc0f \ub85c\ub4dc data_dir = \"path_to_Rasnet18_directory\" # \ub370\uc774\ud130\uc14b \uacbd\ub85c transform = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # ResNet18\uc758 \uc785\ub825 \ud06c\uae30\uc5d0 \ub9de\ucda4 transforms . ToTensor () # Tensor\ub85c \ubcc0\ud658 ]) dataset = datasets . ImageFolder ( data_dir , transform = transform ) data_loader = DataLoader ( dataset , batch_size = 32 , shuffle = True ) # \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean , std = compute_mean_std ( data_loader ) print ( f \"Mean: { mean } , Std: { std } \" ) # \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130 \uc815\uaddc\ud654 transform_normalized = transforms . Compose ([ transforms . Resize (( 224 , 224 )), transforms . ToTensor (), transforms . Normalize ( mean , std ) ]) # \ub370\uc774\ud130 \ub85c\ub354 \uc5c5\ub370\uc774\ud2b8 dataset = datasets . ImageFolder ( data_dir , transform = transform_normalized ) data_loader = DataLoader ( dataset , batch_size = 32 , shuffle = True ) # 3. ResNet18 \ubaa8\ub378 \ub85c\ub4dc \ubc0f \uc218\uc815 device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) model = models . resnet18 ( pretrained = True ) # \uae30\uc874 \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\ub97c \uac01\ub3c4 \ud68c\uadc0\ub97c \uc704\ud55c \ucd9c\ub825 \ub808\uc774\uc5b4\ub85c \uc218\uc815 model . fc = nn . Linear ( model . fc . in_features , 1 ) model = model . to ( device ) # 4. \uc190\uc2e4 \ud568\uc218 \ubc0f \uc635\ud2f0\ub9c8\uc774\uc800 \uc124\uc815 criterion = nn . MSELoss () # \ud68c\uadc0 \ubb38\uc81c\uc5d0 \uc801\ud569\ud55c \uc190\uc2e4 \ud568\uc218 optimizer = optim . Adam ( model . parameters (), lr = 0.001 ) # 5. \ubaa8\ub378 \ud559\uc2b5 def train_model ( model , data_loader , criterion , optimizer , num_epochs = 5 ): model . train () for epoch in range ( num_epochs ): running_loss = 0.0 for images , labels in data_loader : # \ub77c\ubca8\uc744 -45\ub3c4 ~ 45\ub3c4 \ubc94\uc704\ub85c \ub9e4\ud551 (\uc784\uc758\ub85c \uc124\uc815) angles = torch . rand ( len ( labels )) * 90 - 45 angles = angles . view ( - 1 , 1 ) . to ( device ) # \ud68c\uadc0\uac12\uc5d0 \ub9de\uac8c reshape images = images . to ( device ) # Forward outputs = model ( images ) loss = criterion ( outputs , angles ) # Backward optimizer . zero_grad () loss . backward () optimizer . step () running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { num_epochs } ], Loss: { running_loss / len ( data_loader ) : .4f } \" ) # \ud559\uc2b5 \uc218\ud589 train_model ( model , data_loader , criterion , optimizer , num_epochs = 5 ) # 6. \uacb0\uacfc \ud655\uc778: -45\ub3c4 ~ 45\ub3c4 \uac01\ub3c4 \ucd9c\ub825 def test_model ( model , data_loader ): model . eval () with torch . no_grad (): for images , _ in data_loader : images = images . to ( device ) outputs = model ( images ) . cpu () . numpy () for i , output in enumerate ( outputs ): angle = output [ 0 ] print ( f \"Predicted Angle: { angle : .2f } degrees\" ) # \uccab \ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc608\uc81c\ub85c \ucd9c\ub825 if i == 0 : img = images [ i ] . cpu () . numpy () . transpose (( 1 , 2 , 0 )) * std . numpy () + mean . numpy () img = np . clip ( img , 0 , 1 ) plt . imshow ( img ) plt . title ( f \"Predicted Angle: { angle : .2f } \u00b0\" ) plt . axis ( \"off\" ) plt . show () break # \ud14c\uc2a4\ud2b8 \uc2e4\ud589 test_model ( model , data_loader )","title":"\ucf54\ub4dc:"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/rasnet18/#_3","text":"\ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \uc804\ucc98\ub9ac : datasets.ImageFolder \ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud558\uba70, ResNet18\uc758 \uc785\ub825 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\uac8c \ud06c\uae30\ub97c \uc870\uc815\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\uc758 \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std)\ub97c \uacc4\uc0b0\ud558\uace0, \uc774\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uc815\uaddc\ud654\ud569\ub2c8\ub2e4. ResNet18 \uc218\uc815 : \uc0ac\uc804 \ud559\uc2b5\ub41c ResNet18 \ubaa8\ub378\uc744 \ubd88\ub7ec\uc628 \ub4a4 \ub9c8\uc9c0\ub9c9 Fully Connected Layer\ub97c 1\uac1c \ucd9c\ub825\uac12 \uc73c\ub85c \uc218\uc815\ud569\ub2c8\ub2e4. \uc774\ub294 \uac01\ub3c4\ub97c \uc608\uce21\ud558\uae30 \uc704\ud55c \ud68c\uadc0 \ubb38\uc81c\uc5d0 \ub9de\ucd98 \uc124\uc815\uc785\ub2c8\ub2e4. \ud559\uc2b5 : \ub79c\ub364\ud558\uac8c \uc0dd\uc131\ub41c \uac01\ub3c4\ub97c \uc815\ub2f5\uac12\uc73c\ub85c \uc124\uc815(-45\ub3c4 ~ +45\ub3c4). MSELoss\ub97c \uc190\uc2e4 \ud568\uc218\ub85c \uc0ac\uc6a9\ud558\uc5ec \ud559\uc2b5\ud569\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8 \ubc0f \ucd9c\ub825 : \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01\ub3c4\ub97c \uc608\uce21\ud558\uace0, \uc774\ubbf8\uc9c0\ub97c \ucd9c\ub825\ud558\uba70 \uc608\uce21 \uac01\ub3c4\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4.","title":"\ucf54\ub4dc \uc124\uba85:"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/rasnet18/#_4","text":"PyTorch torchvision matplotlib pip install torch torchvision matplotlib \uc774 \uc608\uc81c\ub294 \ub370\uc774\ud130 \ub514\ub809\ud1a0\ub9ac \uad6c\uc870\uc640 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac\uc5d0 \ub530\ub77c \uc218\uc815\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud544\uc694\ud558\uba74 \uad6c\uccb4\uc801\uc778 \ub370\uc774\ud130 \uad6c\uc870\uc5d0 \ub9de\uac8c \uc870\uc815\ud558\uc138\uc694! \ud83d\ude0a","title":"\uc694\uad6c\uc0ac\ud56d \uc124\uce58:"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/","text":"PyTorch \uc804\uc774 \ud559\uc2b5 (Transfer Learning) \uc804\uc774 \ud559\uc2b5(Transfer Learning)\uc740 \uae30\uc874\uc5d0 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \uc0c8\ub85c\uc6b4 \ubb38\uc81c\uc5d0 \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uc774\ubbf8\uc9c0 \ubd84\ub958, \uac1d\uccb4 \ud0d0\uc9c0 \ub4f1\uc5d0\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ub418\uba70, \ud2b9\ud788 \uc791\uc740 \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. PyTorch\uc5d0\uc11c\ub294 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc27d\uac8c \ud65c\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d torchvision.models \ubaa8\ub4c8\uc5d0\uc11c \ub2e4\uc591\ud55c \ubaa8\ub378\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. 1. \uc804\uc774 \ud559\uc2b5\uc758 \uac1c\ub150 \uc804\uc774 \ud559\uc2b5\uc740 \ub2e4\uc74c \ub450 \uac00\uc9c0 \ubc29\ubc95 \uc911 \ud558\ub098\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Feature Extraction (\ud2b9\uc9d5 \ucd94\ucd9c) : \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \uace0\uc815(freeze)\ud558\uace0, \ub9c8\uc9c0\ub9c9 \ubd84\ub958 \uacc4\uce35\ub9cc \uc0c8\ub86d\uac8c \ud559\uc2b5. \uc77c\ubc18\uc801\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\uc14b\uc758 \ud074\ub798\uc2a4\uc5d0 \ub9de\uac8c \ub9c8\uc9c0\ub9c9 fully connected \uacc4\uce35\ub9cc \uc218\uc815. Fine-tuning (\ubbf8\uc138 \uc870\uc815) : \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uc77c\ubd80 \ub610\ub294 \uc804\uccb4 \uac00\uc911\uce58\ub97c \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uace0 \ud559\uc2b5. \ud559\uc2b5\ub960(Learning Rate)\uc744 \uc870\uc815\ud558\uc5ec \uae30\uc874\uc758 \uac00\uc911\uce58\uc640 \uc0c8\ub85c \ud559\uc2b5\ud558\ub294 \uac00\uc911\uce58\uac00 \uc798 \uc870\ud654\ub97c \uc774\ub8e8\ub3c4\ub85d \ud568. 2. PyTorch\uc5d0\uc11c \uc804\uc774 \ud559\uc2b5 \uad6c\ud604 2.1. \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8 import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms , models 2.2. \ub370\uc774\ud130 \uc900\ube44 \ub370\uc774\ud130\uc14b\uc744 \ubd88\ub7ec\uc624\uace0 \uc804\ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc608\uc81c\uc5d0\uc11c\ub294 CIFAR-10 \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. # \ub370\uc774\ud130 \ubcc0\ud658 \ubc0f \uc804\ucc98\ub9ac transform = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc740 \uc77c\ubc18\uc801\uc73c\ub85c 224x224 \ud06c\uae30\ub97c \uc0ac\uc6a9 transforms . ToTensor (), transforms . Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) # ImageNet \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28 ]) # CIFAR-10 \ub370\uc774\ud130\uc14b train_dataset = datasets . CIFAR10 ( root = './data' , train = True , transform = transform , download = True ) test_dataset = datasets . CIFAR10 ( root = './data' , train = False , transform = transform , download = True ) train_loader = torch . utils . data . DataLoader ( train_dataset , batch_size = 32 , shuffle = True ) test_loader = torch . utils . data . DataLoader ( test_dataset , batch_size = 32 , shuffle = False ) 2.3. \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378 \ubd88\ub7ec\uc624\uae30 torchvision.models \uc5d0\uc11c \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uac00\uc838\uc635\ub2c8\ub2e4. # Pre-trained ResNet18 \ubaa8\ub378 \ubd88\ub7ec\uc624\uae30 model = models . resnet18 ( pretrained = True ) # ImageNet\uc73c\ub85c \ud559\uc2b5\ub41c \uac00\uc911\uce58 2.4. Feature Extraction \ud2b9\uc9d5 \ucd94\ucd9c \ubc29\uc2dd\uc73c\ub85c \ud559\uc2b5\ud558\ub824\uba74 \ubaa8\ub378\uc758 \ubaa8\ub4e0 \uac00\uc911\uce58\ub97c \uace0\uc815\ud569\ub2c8\ub2e4. # \ubaa8\ub4e0 \uac00\uc911\uce58 \uace0\uc815 for param in model . parameters (): param . requires_grad = False # \ub9c8\uc9c0\ub9c9 \ubd84\ub958 \uacc4\uce35 \uc218\uc815 (CIFAR-10\uc740 \ud074\ub798\uc2a4\uac00 10\uac1c) num_features = model . fc . in_features # ResNet18\uc758 \ub9c8\uc9c0\ub9c9 \uacc4\uce35 \uc785\ub825 \ud06c\uae30 model . fc = nn . Linear ( num_features , 10 ) # \uc0c8\ub85c\uc6b4 \ubd84\ub958 \uacc4\uce35 \uc815\uc758 2.5. Fine-tuning Fine-tuning \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ud2b9\uc815 \uacc4\uce35\ub9cc \ud559\uc2b5 \uac00\ub2a5\ud558\ub3c4\ub85d \uc124\uc815\ud569\ub2c8\ub2e4. # Conv \ub808\uc774\uc5b4\ub294 \uace0\uc815\ud558\uc9c0 \uc54a\uace0, \ub9c8\uc9c0\ub9c9 \ubd84\ub958 \uacc4\uce35\ub9cc \ubcc0\uacbd num_features = model . fc . in_features model . fc = nn . Linear ( num_features , 10 ) # CIFAR-10 \ud074\ub798\uc2a4\uc5d0 \ub9de\uac8c \uc218\uc815 # \ud544\uc694\ud55c \ub808\uc774\uc5b4\ub9cc \ud559\uc2b5\ud560 \uc218 \uc788\ub3c4\ub85d requires_grad \uc124\uc815 for name , param in model . named_parameters (): if \"fc\" in name : # fc \uacc4\uce35\ub9cc \ud559\uc2b5 param . requires_grad = True else : param . requires_grad = False 2.6. \uc190\uc2e4 \ud568\uc218 \ubc0f \uc635\ud2f0\ub9c8\uc774\uc800 criterion = nn . CrossEntropyLoss () # \ubd84\ub958 \ubb38\uc81c optimizer = optim . Adam ( model . fc . parameters (), lr = 0.001 ) # \ub9c8\uc9c0\ub9c9 \uacc4\uce35\ub9cc \ud559\uc2b5 2.7. \ud559\uc2b5 \ub8e8\ud504 device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) model = model . to ( device ) epochs = 5 for epoch in range ( epochs ): model . train () running_loss = 0.0 for images , labels in train_loader : images , labels = images . to ( device ), labels . to ( device ) # Forward pass outputs = model ( images ) loss = criterion ( outputs , labels ) # Backward pass optimizer . zero_grad () loss . backward () optimizer . step () running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { epochs } ], Loss: { running_loss / len ( train_loader ) : .4f } \" ) 2.8. \ud3c9\uac00 model . eval () correct = 0 total = 0 with torch . no_grad (): for images , labels in test_loader : images , labels = images . to ( device ), labels . to ( device ) outputs = model ( images ) _ , predicted = torch . max ( outputs , 1 ) total += labels . size ( 0 ) correct += ( predicted == labels ) . sum () . item () print ( f \"Test Accuracy: { 100 * correct / total : .2f } %\" ) 3. \uc804\uc774 \ud559\uc2b5\uc758 \uc7a5\uc810 \uc801\uc740 \ub370\uc774\ud130\ub85c\ub3c4 \ud559\uc2b5 \uac00\ub2a5 : \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \ud65c\uc6a9\ud574 \ub370\uc774\ud130 \ubd80\uc871 \ubb38\uc81c\ub97c \ud574\uacb0. \ud6a8\uc728\uc801\uc778 \ud559\uc2b5 : \ucd08\uae30 \uac00\uc911\uce58\ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c \ud559\uc2b5 \uc18d\ub3c4\uac00 \ube60\ub984. \uc77c\ubc18\ud654 \ub2a5\ub825 \ud5a5\uc0c1 : ImageNet\uacfc \uac19\uc740 \ub300\uaddc\ubaa8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ud559\uc2b5\ub41c \ubaa8\ub378\uc740 \uc77c\ubc18\ud654 \uc131\ub2a5\uc774 \ub6f0\uc5b4\ub0a8. 4. \ud65c\uc6a9 \uac00\ub2a5\ud55c \uc0ac\uc804 \ud559\uc2b5 \ubaa8\ub378 PyTorch\ub294 \ub2e4\uc591\ud55c \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4: - ResNet : models.resnet18, models.resnet50 - VGG : models.vgg16, models.vgg19 - EfficientNet : models.efficientnet_b0 - DenseNet : models.densenet121 - MobileNet : models.mobilenet_v2 \uc774 \ubaa8\ub378\ub4e4\uc740 pretrained=True \uc635\uc158\uc73c\ub85c \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 5. \uc694\uc57d \uc804\uc774 \ud559\uc2b5\uc740 \uae30\uc874 \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \ud65c\uc6a9\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294 \uac15\ub825\ud55c \ubc29\ubc95. PyTorch\uc5d0\uc11c \uc804\uc774 \ud559\uc2b5\uc740 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378( torchvision.models )\uacfc \uac04\ub2e8\ud55c \ucf54\ub4dc\ub85c \uad6c\ud604 \uac00\ub2a5. Feature Extraction \ub610\ub294 Fine-tuning\uc744 \ud1b5\ud574 \ub370\uc774\ud130\uc14b \ud06c\uae30\uc640 \ubb38\uc81c \uc720\ud615\uc5d0 \ub530\ub77c \uc720\uc5f0\ud558\uac8c \uc801\uc6a9 \uac00\ub2a5.","title":"5.4 \uc804\uc774\ud559\uc2b5"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#pytorch-transfer-learning","text":"\uc804\uc774 \ud559\uc2b5(Transfer Learning)\uc740 \uae30\uc874\uc5d0 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \uc0c8\ub85c\uc6b4 \ubb38\uc81c\uc5d0 \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uc774\ubbf8\uc9c0 \ubd84\ub958, \uac1d\uccb4 \ud0d0\uc9c0 \ub4f1\uc5d0\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ub418\uba70, \ud2b9\ud788 \uc791\uc740 \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. PyTorch\uc5d0\uc11c\ub294 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc27d\uac8c \ud65c\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d torchvision.models \ubaa8\ub4c8\uc5d0\uc11c \ub2e4\uc591\ud55c \ubaa8\ub378\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"PyTorch \uc804\uc774 \ud559\uc2b5 (Transfer Learning)"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#1","text":"\uc804\uc774 \ud559\uc2b5\uc740 \ub2e4\uc74c \ub450 \uac00\uc9c0 \ubc29\ubc95 \uc911 \ud558\ub098\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Feature Extraction (\ud2b9\uc9d5 \ucd94\ucd9c) : \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \uace0\uc815(freeze)\ud558\uace0, \ub9c8\uc9c0\ub9c9 \ubd84\ub958 \uacc4\uce35\ub9cc \uc0c8\ub86d\uac8c \ud559\uc2b5. \uc77c\ubc18\uc801\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\uc14b\uc758 \ud074\ub798\uc2a4\uc5d0 \ub9de\uac8c \ub9c8\uc9c0\ub9c9 fully connected \uacc4\uce35\ub9cc \uc218\uc815. Fine-tuning (\ubbf8\uc138 \uc870\uc815) : \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uc77c\ubd80 \ub610\ub294 \uc804\uccb4 \uac00\uc911\uce58\ub97c \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uace0 \ud559\uc2b5. \ud559\uc2b5\ub960(Learning Rate)\uc744 \uc870\uc815\ud558\uc5ec \uae30\uc874\uc758 \uac00\uc911\uce58\uc640 \uc0c8\ub85c \ud559\uc2b5\ud558\ub294 \uac00\uc911\uce58\uac00 \uc798 \uc870\ud654\ub97c \uc774\ub8e8\ub3c4\ub85d \ud568.","title":"1. \uc804\uc774 \ud559\uc2b5\uc758 \uac1c\ub150"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#2-pytorch","text":"","title":"2. PyTorch\uc5d0\uc11c \uc804\uc774 \ud559\uc2b5 \uad6c\ud604"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#21","text":"import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets , transforms , models","title":"2.1. \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#22","text":"\ub370\uc774\ud130\uc14b\uc744 \ubd88\ub7ec\uc624\uace0 \uc804\ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc608\uc81c\uc5d0\uc11c\ub294 CIFAR-10 \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. # \ub370\uc774\ud130 \ubcc0\ud658 \ubc0f \uc804\ucc98\ub9ac transform = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc740 \uc77c\ubc18\uc801\uc73c\ub85c 224x224 \ud06c\uae30\ub97c \uc0ac\uc6a9 transforms . ToTensor (), transforms . Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) # ImageNet \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28 ]) # CIFAR-10 \ub370\uc774\ud130\uc14b train_dataset = datasets . CIFAR10 ( root = './data' , train = True , transform = transform , download = True ) test_dataset = datasets . CIFAR10 ( root = './data' , train = False , transform = transform , download = True ) train_loader = torch . utils . data . DataLoader ( train_dataset , batch_size = 32 , shuffle = True ) test_loader = torch . utils . data . DataLoader ( test_dataset , batch_size = 32 , shuffle = False )","title":"2.2. \ub370\uc774\ud130 \uc900\ube44"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#23","text":"torchvision.models \uc5d0\uc11c \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uac00\uc838\uc635\ub2c8\ub2e4. # Pre-trained ResNet18 \ubaa8\ub378 \ubd88\ub7ec\uc624\uae30 model = models . resnet18 ( pretrained = True ) # ImageNet\uc73c\ub85c \ud559\uc2b5\ub41c \uac00\uc911\uce58","title":"2.3. \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378 \ubd88\ub7ec\uc624\uae30"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#24-feature-extraction","text":"\ud2b9\uc9d5 \ucd94\ucd9c \ubc29\uc2dd\uc73c\ub85c \ud559\uc2b5\ud558\ub824\uba74 \ubaa8\ub378\uc758 \ubaa8\ub4e0 \uac00\uc911\uce58\ub97c \uace0\uc815\ud569\ub2c8\ub2e4. # \ubaa8\ub4e0 \uac00\uc911\uce58 \uace0\uc815 for param in model . parameters (): param . requires_grad = False # \ub9c8\uc9c0\ub9c9 \ubd84\ub958 \uacc4\uce35 \uc218\uc815 (CIFAR-10\uc740 \ud074\ub798\uc2a4\uac00 10\uac1c) num_features = model . fc . in_features # ResNet18\uc758 \ub9c8\uc9c0\ub9c9 \uacc4\uce35 \uc785\ub825 \ud06c\uae30 model . fc = nn . Linear ( num_features , 10 ) # \uc0c8\ub85c\uc6b4 \ubd84\ub958 \uacc4\uce35 \uc815\uc758","title":"2.4. Feature Extraction"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#25-fine-tuning","text":"Fine-tuning \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ud2b9\uc815 \uacc4\uce35\ub9cc \ud559\uc2b5 \uac00\ub2a5\ud558\ub3c4\ub85d \uc124\uc815\ud569\ub2c8\ub2e4. # Conv \ub808\uc774\uc5b4\ub294 \uace0\uc815\ud558\uc9c0 \uc54a\uace0, \ub9c8\uc9c0\ub9c9 \ubd84\ub958 \uacc4\uce35\ub9cc \ubcc0\uacbd num_features = model . fc . in_features model . fc = nn . Linear ( num_features , 10 ) # CIFAR-10 \ud074\ub798\uc2a4\uc5d0 \ub9de\uac8c \uc218\uc815 # \ud544\uc694\ud55c \ub808\uc774\uc5b4\ub9cc \ud559\uc2b5\ud560 \uc218 \uc788\ub3c4\ub85d requires_grad \uc124\uc815 for name , param in model . named_parameters (): if \"fc\" in name : # fc \uacc4\uce35\ub9cc \ud559\uc2b5 param . requires_grad = True else : param . requires_grad = False","title":"2.5. Fine-tuning"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#26","text":"criterion = nn . CrossEntropyLoss () # \ubd84\ub958 \ubb38\uc81c optimizer = optim . Adam ( model . fc . parameters (), lr = 0.001 ) # \ub9c8\uc9c0\ub9c9 \uacc4\uce35\ub9cc \ud559\uc2b5","title":"2.6. \uc190\uc2e4 \ud568\uc218 \ubc0f \uc635\ud2f0\ub9c8\uc774\uc800"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#27","text":"device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) model = model . to ( device ) epochs = 5 for epoch in range ( epochs ): model . train () running_loss = 0.0 for images , labels in train_loader : images , labels = images . to ( device ), labels . to ( device ) # Forward pass outputs = model ( images ) loss = criterion ( outputs , labels ) # Backward pass optimizer . zero_grad () loss . backward () optimizer . step () running_loss += loss . item () print ( f \"Epoch [ { epoch + 1 } / { epochs } ], Loss: { running_loss / len ( train_loader ) : .4f } \" )","title":"2.7. \ud559\uc2b5 \ub8e8\ud504"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#28","text":"model . eval () correct = 0 total = 0 with torch . no_grad (): for images , labels in test_loader : images , labels = images . to ( device ), labels . to ( device ) outputs = model ( images ) _ , predicted = torch . max ( outputs , 1 ) total += labels . size ( 0 ) correct += ( predicted == labels ) . sum () . item () print ( f \"Test Accuracy: { 100 * correct / total : .2f } %\" )","title":"2.8. \ud3c9\uac00"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#3","text":"\uc801\uc740 \ub370\uc774\ud130\ub85c\ub3c4 \ud559\uc2b5 \uac00\ub2a5 : \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \ud65c\uc6a9\ud574 \ub370\uc774\ud130 \ubd80\uc871 \ubb38\uc81c\ub97c \ud574\uacb0. \ud6a8\uc728\uc801\uc778 \ud559\uc2b5 : \ucd08\uae30 \uac00\uc911\uce58\ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c \ud559\uc2b5 \uc18d\ub3c4\uac00 \ube60\ub984. \uc77c\ubc18\ud654 \ub2a5\ub825 \ud5a5\uc0c1 : ImageNet\uacfc \uac19\uc740 \ub300\uaddc\ubaa8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ud559\uc2b5\ub41c \ubaa8\ub378\uc740 \uc77c\ubc18\ud654 \uc131\ub2a5\uc774 \ub6f0\uc5b4\ub0a8.","title":"3. \uc804\uc774 \ud559\uc2b5\uc758 \uc7a5\uc810"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#4","text":"PyTorch\ub294 \ub2e4\uc591\ud55c \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4: - ResNet : models.resnet18, models.resnet50 - VGG : models.vgg16, models.vgg19 - EfficientNet : models.efficientnet_b0 - DenseNet : models.densenet121 - MobileNet : models.mobilenet_v2 \uc774 \ubaa8\ub378\ub4e4\uc740 pretrained=True \uc635\uc158\uc73c\ub85c \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4. \ud65c\uc6a9 \uac00\ub2a5\ud55c \uc0ac\uc804 \ud559\uc2b5 \ubaa8\ub378"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/tran/#5","text":"\uc804\uc774 \ud559\uc2b5\uc740 \uae30\uc874 \ubaa8\ub378\uc758 \uac00\uc911\uce58\ub97c \ud65c\uc6a9\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294 \uac15\ub825\ud55c \ubc29\ubc95. PyTorch\uc5d0\uc11c \uc804\uc774 \ud559\uc2b5\uc740 \uc0ac\uc804 \ud559\uc2b5\ub41c \ubaa8\ub378( torchvision.models )\uacfc \uac04\ub2e8\ud55c \ucf54\ub4dc\ub85c \uad6c\ud604 \uac00\ub2a5. Feature Extraction \ub610\ub294 Fine-tuning\uc744 \ud1b5\ud574 \ub370\uc774\ud130\uc14b \ud06c\uae30\uc640 \ubb38\uc81c \uc720\ud615\uc5d0 \ub530\ub77c \uc720\uc5f0\ud558\uac8c \uc801\uc6a9 \uac00\ub2a5.","title":"5. \uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/","text":"\ud30c\uc774\ud1a0\uce58 \uc124\uce58 Jetson Orin Nano\uc5d0 PyTorch\ub97c \uc124\uce58\ud558\ub294 \uacfc\uc815\uc740 Jetson\uc758 ARM \uc544\ud0a4\ud14d\ucc98\uc640 NVIDIA JetPack \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc5d0 \ub9de\ucd98 PyTorch \ube4c\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud575\uc2ec\uc785\ub2c8\ub2e4. \uc544\ub798\ub294 \uc0c1\uc138\ud55c \uc124\uce58 \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4. 1. JetPack \ud655\uc778 Jetson Orin Nano\uc5d0\ub294 NVIDIA\uc758 JetPack SDK\uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. JetPack\uc5d0\ub294 CUDA, cuDNN, TensorRT\uc640 \uac19\uc740 AI \uac00\uc18d \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ucd5c\uc2e0 \ubc84\uc804\uc758 JetPack\uc740 Jetson \uac1c\ubc1c\uc790 \ud3ec\ud138\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58\uac00 \ub418\uc5b4 \uc788\ub2e4\uba74 \uc544\ub798 \uba85\ub839\uc73c\ub85c CUDA \ubc84\uc804\uc744 \ud655\uc778\ud569\ub2c8\ub2e4: nvcc --version 2. PyTorch \uc124\uce58 Jetson Orin Nano\ub294 ARM \uc544\ud0a4\ud14d\ucc98 \uae30\ubc18\uc774\ubbc0\ub85c, NVIDIA\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 PyTorch \ube4c\ub4dc\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. 2.1. NVIDIA PyTorch \ub9c1\ud06c NVIDIA\ub294 Jetson \ubcf4\ub4dc\ub97c \uc704\ud55c PyTorch\uc640 \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ube4c\ub4dc\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. NVIDIA PyTorch \uc800\uc7a5\uc18c\ub294 NVIDIA GitHub \ud398\uc774\uc9c0 \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 2.2. \uc124\uce58 \uba85\ub839 PyTorch\uc640 torchvision\uc744 \uc124\uce58\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc0ac\uc6a9\ud558\uc138\uc694: sudo apt-get update pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/jetson 2.3. \uc124\uce58 \ud655\uc778 PyTorch\uac00 \uc81c\ub300\ub85c \uc124\uce58\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 Python \uc778\ud130\ud504\ub9ac\ud130\uc5d0\uc11c \uc544\ub798 \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: import torch print ( torch . __version__ ) print ( torch . cuda . is_available ()) # True\uac00 \ucd9c\ub825\ub418\uc5b4\uc57c \ud568 3. Optional: Jupyter Notebook\uc5d0\uc11c PyTorch \uc0ac\uc6a9 Jetson Orin Nano\uc5d0\uc11c PyTorch\ub97c \uc2e4\ud5d8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub824\uba74 Jupyter Notebook\uc744 \uc124\uce58\ud574 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 3.1. Jupyter \uc124\uce58 pip install notebook 3.2. Jupyter \uc2e4\ud589 jupyter notebook --ip = 0 .0.0.0 --port = 8888 --allow-root Jetson Orin Nano\uc758 IP \uc8fc\uc18c\uc640 \ud3ec\ud2b8\ub97c \ud1b5\ud574 \ub2e4\ub978 \ucef4\ud4e8\ud130\uc5d0\uc11c \uc811\uadfc \uac00\ub2a5\ud569\ub2c8\ub2e4. 4. \ucd94\uac00 \ucd5c\uc801\ud654 Jetson Orin Nano\uc758 \uc131\ub2a5\uc744 \ucd5c\ub300\ud55c \ud65c\uc6a9\ud558\ub824\uba74 \uc544\ub798\uc640 \uac19\uc740 \ucd94\uac00 \uc124\uc815\uc744 \uace0\ub824\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 4.1. TensorRT \uc0ac\uc6a9 PyTorch \ubaa8\ub378\uc744 ONNX \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud55c \ud6c4 TensorRT\ub85c \ucd5c\uc801\ud654\ud558\uba74 \ucd94\ub860 \uc18d\ub3c4\uac00 \ud06c\uac8c \ud5a5\uc0c1\ub429\ub2c8\ub2e4. 4.2. Mixed Precision Training PyTorch\uc5d0\uc11c Automatic Mixed Precision(AMP)\uc744 \uc0ac\uc6a9\ud558\uba74 \ud559\uc2b5\uacfc \ucd94\ub860 \uc18d\ub3c4\ub97c \ub354\uc6b1 \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4: from torch.cuda.amp import GradScaler , autocast \uc774 \uacfc\uc815\uc744 \ub530\ub77c \ud558\uba74 Jetson Orin Nano\uc5d0\uc11c PyTorch\ub97c \uc124\uce58\ud558\uace0 \ud65c\uc6a9\ud560 \uc900\ube44\uac00 \uc644\ub8cc\ub429\ub2c8\ub2e4. Jetson \ud50c\ub7ab\ud3fc\uc740 \uc5d0\uc9c0 AI\uc640 \ub525\ub7ec\ub2dd \uac1c\ubc1c\uc744 \uc704\ud55c \uac15\ub825\ud55c \ud234\uc774\uba70, PyTorch\ub294 \uc9c1\uad00\uc801\uc774\uace0 \uac15\ub825\ud55c \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub85c Jetson\uc758 \uc7a0\uc7ac\ub825\uc744 \uadf9\ub300\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"5.1 \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#_1","text":"Jetson Orin Nano\uc5d0 PyTorch\ub97c \uc124\uce58\ud558\ub294 \uacfc\uc815\uc740 Jetson\uc758 ARM \uc544\ud0a4\ud14d\ucc98\uc640 NVIDIA JetPack \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc5d0 \ub9de\ucd98 PyTorch \ube4c\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud575\uc2ec\uc785\ub2c8\ub2e4. \uc544\ub798\ub294 \uc0c1\uc138\ud55c \uc124\uce58 \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4.","title":"\ud30c\uc774\ud1a0\uce58 \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#1-jetpack","text":"Jetson Orin Nano\uc5d0\ub294 NVIDIA\uc758 JetPack SDK\uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. JetPack\uc5d0\ub294 CUDA, cuDNN, TensorRT\uc640 \uac19\uc740 AI \uac00\uc18d \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ucd5c\uc2e0 \ubc84\uc804\uc758 JetPack\uc740 Jetson \uac1c\ubc1c\uc790 \ud3ec\ud138\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58\uac00 \ub418\uc5b4 \uc788\ub2e4\uba74 \uc544\ub798 \uba85\ub839\uc73c\ub85c CUDA \ubc84\uc804\uc744 \ud655\uc778\ud569\ub2c8\ub2e4: nvcc --version","title":"1. JetPack \ud655\uc778"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#2-pytorch","text":"Jetson Orin Nano\ub294 ARM \uc544\ud0a4\ud14d\ucc98 \uae30\ubc18\uc774\ubbc0\ub85c, NVIDIA\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 PyTorch \ube4c\ub4dc\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.","title":"2. PyTorch \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#21-nvidia-pytorch","text":"NVIDIA\ub294 Jetson \ubcf4\ub4dc\ub97c \uc704\ud55c PyTorch\uc640 \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ube4c\ub4dc\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. NVIDIA PyTorch \uc800\uc7a5\uc18c\ub294 NVIDIA GitHub \ud398\uc774\uc9c0 \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"2.1. NVIDIA PyTorch \ub9c1\ud06c"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#22","text":"PyTorch\uc640 torchvision\uc744 \uc124\uce58\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc0ac\uc6a9\ud558\uc138\uc694: sudo apt-get update pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/jetson","title":"2.2. \uc124\uce58 \uba85\ub839"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#23","text":"PyTorch\uac00 \uc81c\ub300\ub85c \uc124\uce58\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 Python \uc778\ud130\ud504\ub9ac\ud130\uc5d0\uc11c \uc544\ub798 \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: import torch print ( torch . __version__ ) print ( torch . cuda . is_available ()) # True\uac00 \ucd9c\ub825\ub418\uc5b4\uc57c \ud568","title":"2.3. \uc124\uce58 \ud655\uc778"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#3-optional-jupyter-notebook-pytorch","text":"Jetson Orin Nano\uc5d0\uc11c PyTorch\ub97c \uc2e4\ud5d8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub824\uba74 Jupyter Notebook\uc744 \uc124\uce58\ud574 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"3. Optional: Jupyter Notebook\uc5d0\uc11c PyTorch \uc0ac\uc6a9"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#31-jupyter","text":"pip install notebook","title":"3.1. Jupyter \uc124\uce58"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#32-jupyter","text":"jupyter notebook --ip = 0 .0.0.0 --port = 8888 --allow-root Jetson Orin Nano\uc758 IP \uc8fc\uc18c\uc640 \ud3ec\ud2b8\ub97c \ud1b5\ud574 \ub2e4\ub978 \ucef4\ud4e8\ud130\uc5d0\uc11c \uc811\uadfc \uac00\ub2a5\ud569\ub2c8\ub2e4.","title":"3.2. Jupyter \uc2e4\ud589"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#4","text":"Jetson Orin Nano\uc758 \uc131\ub2a5\uc744 \ucd5c\ub300\ud55c \ud65c\uc6a9\ud558\ub824\uba74 \uc544\ub798\uc640 \uac19\uc740 \ucd94\uac00 \uc124\uc815\uc744 \uace0\ub824\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4. \ucd94\uac00 \ucd5c\uc801\ud654"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#41-tensorrt","text":"PyTorch \ubaa8\ub378\uc744 ONNX \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud55c \ud6c4 TensorRT\ub85c \ucd5c\uc801\ud654\ud558\uba74 \ucd94\ub860 \uc18d\ub3c4\uac00 \ud06c\uac8c \ud5a5\uc0c1\ub429\ub2c8\ub2e4.","title":"4.1. TensorRT \uc0ac\uc6a9"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%84%A4%EC%B9%98/#42-mixed-precision-training","text":"PyTorch\uc5d0\uc11c Automatic Mixed Precision(AMP)\uc744 \uc0ac\uc6a9\ud558\uba74 \ud559\uc2b5\uacfc \ucd94\ub860 \uc18d\ub3c4\ub97c \ub354\uc6b1 \ub192\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4: from torch.cuda.amp import GradScaler , autocast \uc774 \uacfc\uc815\uc744 \ub530\ub77c \ud558\uba74 Jetson Orin Nano\uc5d0\uc11c PyTorch\ub97c \uc124\uce58\ud558\uace0 \ud65c\uc6a9\ud560 \uc900\ube44\uac00 \uc644\ub8cc\ub429\ub2c8\ub2e4. Jetson \ud50c\ub7ab\ud3fc\uc740 \uc5d0\uc9c0 AI\uc640 \ub525\ub7ec\ub2dd \uac1c\ubc1c\uc744 \uc704\ud55c \uac15\ub825\ud55c \ud234\uc774\uba70, PyTorch\ub294 \uc9c1\uad00\uc801\uc774\uace0 \uac15\ub825\ud55c \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub85c Jetson\uc758 \uc7a0\uc7ac\ub825\uc744 \uadf9\ub300\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4.2. Mixed Precision Training"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/","text":"\uc815\uaddc\ud654 \ud751\ubc31 \uc774\ubbf8\uc9c0\uc640 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c **\ub530\ub85c \uc815\uaddc\ud654**\ud558\ub824\uba74, \ub450 \ub370\uc774\ud130\uc14b\uc758 \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std)\ub97c **\uac01\uac01 \uacc4\uc0b0**\ud558\uace0, \ud559\uc2b5 \uc2dc \ubcc4\ub3c4\ub85c \ucc98\ub9ac\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uac01 \uc774\ubbf8\uc9c0 \uc720\ud615\uc5d0 \uc801\ud569\ud55c \uc815\uaddc\ud654\ub97c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1. \ud751\ubc31\uacfc \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ub530\ub85c \uc815\uaddc\ud654\ud558\ub294 \uc774\uc720 \ucc44\ub110 \uc218\uc758 \ucc28\uc774 : \ud751\ubc31 \uc774\ubbf8\uc9c0\ub294 \ub2e8\uc77c \ucc44\ub110, \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 3\ucc44\ub110(R, G, B)\uc774\ubbc0\ub85c \uc815\uaddc\ud654 \uae30\uc900\uc774 \ub2e4\ub985\ub2c8\ub2e4. \ubd84\ud3ec \ucc28\uc774 : \ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub294 \ud53d\uc140 \uac12 \ubd84\ud3ec\uac00 \ub2e4\ub97c \uc218 \uc788\uc73c\ubbc0\ub85c, \uac01 \ub370\uc774\ud130\uc14b\uc5d0 \ub9de\ub294 \uc815\uaddc\ud654\ub97c \uc801\uc6a9\ud574\uc57c \ud559\uc2b5 \uc548\uc815\uc131\uc774 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uc815\uaddc\ud654 \uacf5\uc2dd : \uc815\uaddc\ud654\ub294 \ub2e4\uc74c \uacf5\uc2dd\uc5d0 \ub530\ub77c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4: $$ x' = \\frac{x - \\text{mean}}{\\text{std}} $$ \uc774\ub54c, mean \uacfc std \ub294 \uac01 \ub370\uc774\ud130\uc14b\uc5d0 \ub530\ub77c \ubcc4\ub3c4\ub85c \uacc4\uc0b0\ub429\ub2c8\ub2e4. 2. \uad6c\ud604 \ubc29\ubc95 2.1. \ud751\ubc31 \ub370\uc774\ud130\uc640 \uceec\ub7ec \ub370\uc774\ud130 \ub85c\ub4dc \ub370\uc774\ud130\uc14b\uc744 \ud751\ubc31\uacfc \uceec\ub7ec\ub85c \ubd84\ub9ac\ud558\uc5ec \ub85c\ub4dc\ud569\ub2c8\ub2e4. from torchvision import datasets , transforms from torch.utils.data import DataLoader from PIL import Image # \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac transform_grayscale = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # \ud06c\uae30 \uc870\uc815 transforms . ToTensor () # \ud150\uc11c \ubcc0\ud658 ]) # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac transform_rgb = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # \ud06c\uae30 \uc870\uc815 transforms . ToTensor () # \ud150\uc11c \ubcc0\ud658 ]) # \ud751\ubc31\uacfc \uceec\ub7ec \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\uc14b \ub85c\ub4dc dataset_grayscale = datasets . ImageFolder ( root = './data_grayscale' , transform = transform_grayscale ) dataset_rgb = datasets . ImageFolder ( root = './data_rgb' , transform = transform_rgb ) loader_grayscale = DataLoader ( dataset_grayscale , batch_size = 32 , shuffle = False ) loader_rgb = DataLoader ( dataset_rgb , batch_size = 32 , shuffle = False ) 2.2. \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std) \uacc4\uc0b0 \ud751\ubc31 \ub370\uc774\ud130\uc14b def calculate_mean_std ( loader ): mean = 0.0 std = 0.0 total_samples = 0 for images , _ in loader : batch_samples = images . size ( 0 ) # \ubc30\uce58 \ud06c\uae30 images = images . view ( batch_samples , - 1 ) # (N, H*W) # \ubc30\uce58\ubcc4 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean += images . mean () * batch_samples std += images . std () * batch_samples total_samples += batch_samples mean /= total_samples std /= total_samples return mean . item (), std . item () # \ud751\ubc31 \ub370\uc774\ud130 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean_grayscale , std_grayscale = calculate_mean_std ( loader_grayscale ) print ( \"Grayscale Mean:\" , mean_grayscale ) print ( \"Grayscale Std:\" , std_grayscale ) \uceec\ub7ec \ub370\uc774\ud130\uc14b def calculate_mean_std_rgb ( loader ): mean = torch . zeros ( 3 ) # RGB \ucc44\ub110\ubcc4 \ud3c9\uade0 \ucd08\uae30\ud654 std = torch . zeros ( 3 ) # RGB \ucc44\ub110\ubcc4 \ud45c\uc900\ud3b8\ucc28 \ucd08\uae30\ud654 total_samples = 0 for images , _ in loader : batch_samples = images . size ( 0 ) # \ubc30\uce58 \ud06c\uae30 images = images . view ( batch_samples , images . size ( 1 ), - 1 ) # (N, C, H*W) # \ucc44\ub110\ubcc4 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean += images . mean ( dim = [ 0 , 2 ]) * batch_samples std += images . std ( dim = [ 0 , 2 ]) * batch_samples total_samples += batch_samples mean /= total_samples std /= total_samples return mean . tolist (), std . tolist () # \uceec\ub7ec \ub370\uc774\ud130 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean_rgb , std_rgb = calculate_mean_std_rgb ( loader_rgb ) print ( \"RGB Mean:\" , mean_rgb ) print ( \"RGB Std:\" , std_rgb ) 2.3. \uc815\uaddc\ud654 \uc804\ucc98\ub9ac \uacc4\uc0b0\ub41c mean \uacfc std \ub97c \uae30\ubc18\uc73c\ub85c \ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub97c \ubcc4\ub3c4\ub85c \uc815\uaddc\ud654\ud569\ub2c8\ub2e4. \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac transform_grayscale_with_normalize = transforms . Compose ([ transforms . Resize (( 224 , 224 )), transforms . ToTensor (), transforms . Normalize ( mean = [ mean_grayscale ], std = [ std_grayscale ]) # \uc815\uaddc\ud654 ]) dataset_grayscale_normalized = datasets . ImageFolder ( root = './data_grayscale' , transform = transform_grayscale_with_normalize ) \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac transform_rgb_with_normalize = transforms . Compose ([ transforms . Resize (( 224 , 224 )), transforms . ToTensor (), transforms . Normalize ( mean = mean_rgb , std = std_rgb ) # \uc815\uaddc\ud654 ]) dataset_rgb_normalized = datasets . ImageFolder ( root = './data_rgb' , transform = transform_rgb_with_normalize ) 3. \ud751\ubc31\uacfc \uceec\ub7ec\ub97c \ubcd1\ud569\ud558\uc5ec \ud559\uc2b5 \ud751\ubc31\uacfc \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c **\ub3d9\uc77c\ud55c \ubaa8\ub378**\uc5d0 \uc785\ub825\ud558\ub824\uba74 \ub450 \ub370\uc774\ud130\uc14b\uc744 \ubcd1\ud569\ud558\uac70\ub098 \uac19\uc740 \ub370\uc774\ud130 \ub85c\ub354\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \ubcd1\ud569: from torch.utils.data import ConcatDataset # \ubcd1\ud569\ub41c \ub370\uc774\ud130\uc14b \uc0dd\uc131 merged_dataset = ConcatDataset ([ dataset_grayscale_normalized , dataset_rgb_normalized ]) # \ubcd1\ud569\ub41c \ub370\uc774\ud130 \ub85c\ub354 merged_loader = DataLoader ( merged_dataset , batch_size = 32 , shuffle = True ) 4. \uc694\uc57d \ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud558\uc5ec \ub85c\ub4dc : \ud751\ubc31: \ub2e8\uc77c \ucc44\ub110(Grayscale) \uc815\uaddc\ud654. \uceec\ub7ec: 3\ucc44\ub110(RGB) \uc815\uaddc\ud654. \uac01 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std)\ub97c \ubcc4\ub3c4\ub85c \uacc4\uc0b0 : \ud751\ubc31: \ub2e8\uc77c \uac12. \uceec\ub7ec: 3\ucc44\ub110 \uac12. \uc815\uaddc\ud654\ub97c \uac01 \ub370\uc774\ud130\uc14b\uc5d0 \uc801\uc6a9 : Normalize(mean=[...], std=[...]) \ub85c \ub370\uc774\ud130\uc14b \ubcc4 \uc815\uaddc\ud654. \ubcd1\ud569\ud558\uc5ec \ud559\uc2b5 : \ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub97c \ubcd1\ud569\ud558\uac70\ub098, \ubaa8\ub378\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ub2e4\ub974\uac8c \ucc98\ub9ac\ud558\ub3c4\ub85d \uc124\uacc4 \uac00\ub2a5. \uc774 \ubc29\ubc95\uc744 \ud1b5\ud574 \ud751\ubc31 \uc774\ubbf8\uc9c0\uc640 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \uc801\uc808\ud788 \uc815\uaddc\ud654\ud558\uace0 \ubaa8\ub378\uc5d0 \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"5.5 \uc815\uaddc\ud654"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#_1","text":"\ud751\ubc31 \uc774\ubbf8\uc9c0\uc640 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c **\ub530\ub85c \uc815\uaddc\ud654**\ud558\ub824\uba74, \ub450 \ub370\uc774\ud130\uc14b\uc758 \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std)\ub97c **\uac01\uac01 \uacc4\uc0b0**\ud558\uace0, \ud559\uc2b5 \uc2dc \ubcc4\ub3c4\ub85c \ucc98\ub9ac\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uac01 \uc774\ubbf8\uc9c0 \uc720\ud615\uc5d0 \uc801\ud569\ud55c \uc815\uaddc\ud654\ub97c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc815\uaddc\ud654"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#1","text":"\ucc44\ub110 \uc218\uc758 \ucc28\uc774 : \ud751\ubc31 \uc774\ubbf8\uc9c0\ub294 \ub2e8\uc77c \ucc44\ub110, \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 3\ucc44\ub110(R, G, B)\uc774\ubbc0\ub85c \uc815\uaddc\ud654 \uae30\uc900\uc774 \ub2e4\ub985\ub2c8\ub2e4. \ubd84\ud3ec \ucc28\uc774 : \ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub294 \ud53d\uc140 \uac12 \ubd84\ud3ec\uac00 \ub2e4\ub97c \uc218 \uc788\uc73c\ubbc0\ub85c, \uac01 \ub370\uc774\ud130\uc14b\uc5d0 \ub9de\ub294 \uc815\uaddc\ud654\ub97c \uc801\uc6a9\ud574\uc57c \ud559\uc2b5 \uc548\uc815\uc131\uc774 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uc815\uaddc\ud654 \uacf5\uc2dd : \uc815\uaddc\ud654\ub294 \ub2e4\uc74c \uacf5\uc2dd\uc5d0 \ub530\ub77c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4: $$ x' = \\frac{x - \\text{mean}}{\\text{std}} $$ \uc774\ub54c, mean \uacfc std \ub294 \uac01 \ub370\uc774\ud130\uc14b\uc5d0 \ub530\ub77c \ubcc4\ub3c4\ub85c \uacc4\uc0b0\ub429\ub2c8\ub2e4.","title":"1. \ud751\ubc31\uacfc \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \ub530\ub85c \uc815\uaddc\ud654\ud558\ub294 \uc774\uc720"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#2","text":"","title":"2. \uad6c\ud604 \ubc29\ubc95"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#21","text":"\ub370\uc774\ud130\uc14b\uc744 \ud751\ubc31\uacfc \uceec\ub7ec\ub85c \ubd84\ub9ac\ud558\uc5ec \ub85c\ub4dc\ud569\ub2c8\ub2e4. from torchvision import datasets , transforms from torch.utils.data import DataLoader from PIL import Image # \ud751\ubc31 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac transform_grayscale = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # \ud06c\uae30 \uc870\uc815 transforms . ToTensor () # \ud150\uc11c \ubcc0\ud658 ]) # \uceec\ub7ec \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac transform_rgb = transforms . Compose ([ transforms . Resize (( 224 , 224 )), # \ud06c\uae30 \uc870\uc815 transforms . ToTensor () # \ud150\uc11c \ubcc0\ud658 ]) # \ud751\ubc31\uacfc \uceec\ub7ec \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\uc14b \ub85c\ub4dc dataset_grayscale = datasets . ImageFolder ( root = './data_grayscale' , transform = transform_grayscale ) dataset_rgb = datasets . ImageFolder ( root = './data_rgb' , transform = transform_rgb ) loader_grayscale = DataLoader ( dataset_grayscale , batch_size = 32 , shuffle = False ) loader_rgb = DataLoader ( dataset_rgb , batch_size = 32 , shuffle = False )","title":"2.1. \ud751\ubc31 \ub370\uc774\ud130\uc640 \uceec\ub7ec \ub370\uc774\ud130 \ub85c\ub4dc"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#22-mean-std","text":"","title":"2.2. \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std) \uacc4\uc0b0"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#_2","text":"def calculate_mean_std ( loader ): mean = 0.0 std = 0.0 total_samples = 0 for images , _ in loader : batch_samples = images . size ( 0 ) # \ubc30\uce58 \ud06c\uae30 images = images . view ( batch_samples , - 1 ) # (N, H*W) # \ubc30\uce58\ubcc4 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean += images . mean () * batch_samples std += images . std () * batch_samples total_samples += batch_samples mean /= total_samples std /= total_samples return mean . item (), std . item () # \ud751\ubc31 \ub370\uc774\ud130 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean_grayscale , std_grayscale = calculate_mean_std ( loader_grayscale ) print ( \"Grayscale Mean:\" , mean_grayscale ) print ( \"Grayscale Std:\" , std_grayscale )","title":"\ud751\ubc31 \ub370\uc774\ud130\uc14b"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#_3","text":"def calculate_mean_std_rgb ( loader ): mean = torch . zeros ( 3 ) # RGB \ucc44\ub110\ubcc4 \ud3c9\uade0 \ucd08\uae30\ud654 std = torch . zeros ( 3 ) # RGB \ucc44\ub110\ubcc4 \ud45c\uc900\ud3b8\ucc28 \ucd08\uae30\ud654 total_samples = 0 for images , _ in loader : batch_samples = images . size ( 0 ) # \ubc30\uce58 \ud06c\uae30 images = images . view ( batch_samples , images . size ( 1 ), - 1 ) # (N, C, H*W) # \ucc44\ub110\ubcc4 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean += images . mean ( dim = [ 0 , 2 ]) * batch_samples std += images . std ( dim = [ 0 , 2 ]) * batch_samples total_samples += batch_samples mean /= total_samples std /= total_samples return mean . tolist (), std . tolist () # \uceec\ub7ec \ub370\uc774\ud130 \ud3c9\uade0 \ubc0f \ud45c\uc900\ud3b8\ucc28 \uacc4\uc0b0 mean_rgb , std_rgb = calculate_mean_std_rgb ( loader_rgb ) print ( \"RGB Mean:\" , mean_rgb ) print ( \"RGB Std:\" , std_rgb )","title":"\uceec\ub7ec \ub370\uc774\ud130\uc14b"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#23","text":"\uacc4\uc0b0\ub41c mean \uacfc std \ub97c \uae30\ubc18\uc73c\ub85c \ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub97c \ubcc4\ub3c4\ub85c \uc815\uaddc\ud654\ud569\ub2c8\ub2e4.","title":"2.3. \uc815\uaddc\ud654 \uc804\ucc98\ub9ac"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#_4","text":"transform_grayscale_with_normalize = transforms . Compose ([ transforms . Resize (( 224 , 224 )), transforms . ToTensor (), transforms . Normalize ( mean = [ mean_grayscale ], std = [ std_grayscale ]) # \uc815\uaddc\ud654 ]) dataset_grayscale_normalized = datasets . ImageFolder ( root = './data_grayscale' , transform = transform_grayscale_with_normalize )","title":"\ud751\ubc31 \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#_5","text":"transform_rgb_with_normalize = transforms . Compose ([ transforms . Resize (( 224 , 224 )), transforms . ToTensor (), transforms . Normalize ( mean = mean_rgb , std = std_rgb ) # \uc815\uaddc\ud654 ]) dataset_rgb_normalized = datasets . ImageFolder ( root = './data_rgb' , transform = transform_rgb_with_normalize )","title":"\uceec\ub7ec \uc774\ubbf8\uc9c0 \uc804\ucc98\ub9ac"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#3","text":"\ud751\ubc31\uacfc \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c **\ub3d9\uc77c\ud55c \ubaa8\ub378**\uc5d0 \uc785\ub825\ud558\ub824\uba74 \ub450 \ub370\uc774\ud130\uc14b\uc744 \ubcd1\ud569\ud558\uac70\ub098 \uac19\uc740 \ub370\uc774\ud130 \ub85c\ub354\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"3. \ud751\ubc31\uacfc \uceec\ub7ec\ub97c \ubcd1\ud569\ud558\uc5ec \ud559\uc2b5"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#_6","text":"from torch.utils.data import ConcatDataset # \ubcd1\ud569\ub41c \ub370\uc774\ud130\uc14b \uc0dd\uc131 merged_dataset = ConcatDataset ([ dataset_grayscale_normalized , dataset_rgb_normalized ]) # \ubcd1\ud569\ub41c \ub370\uc774\ud130 \ub85c\ub354 merged_loader = DataLoader ( merged_dataset , batch_size = 32 , shuffle = True )","title":"\ub370\uc774\ud130 \ubcd1\ud569:"},{"location":"%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98/%EC%A0%95%EA%B7%9C%ED%99%94/#4","text":"\ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud558\uc5ec \ub85c\ub4dc : \ud751\ubc31: \ub2e8\uc77c \ucc44\ub110(Grayscale) \uc815\uaddc\ud654. \uceec\ub7ec: 3\ucc44\ub110(RGB) \uc815\uaddc\ud654. \uac01 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ud3c9\uade0(mean)\uacfc \ud45c\uc900\ud3b8\ucc28(std)\ub97c \ubcc4\ub3c4\ub85c \uacc4\uc0b0 : \ud751\ubc31: \ub2e8\uc77c \uac12. \uceec\ub7ec: 3\ucc44\ub110 \uac12. \uc815\uaddc\ud654\ub97c \uac01 \ub370\uc774\ud130\uc14b\uc5d0 \uc801\uc6a9 : Normalize(mean=[...], std=[...]) \ub85c \ub370\uc774\ud130\uc14b \ubcc4 \uc815\uaddc\ud654. \ubcd1\ud569\ud558\uc5ec \ud559\uc2b5 : \ud751\ubc31\uacfc \uceec\ub7ec \ub370\uc774\ud130\ub97c \ubcd1\ud569\ud558\uac70\ub098, \ubaa8\ub378\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ub2e4\ub974\uac8c \ucc98\ub9ac\ud558\ub3c4\ub85d \uc124\uacc4 \uac00\ub2a5. \uc774 \ubc29\ubc95\uc744 \ud1b5\ud574 \ud751\ubc31 \uc774\ubbf8\uc9c0\uc640 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub97c \uc801\uc808\ud788 \uc815\uaddc\ud654\ud558\uace0 \ubaa8\ub378\uc5d0 \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4. \uc694\uc57d"},{"location":"%ED%8C%8C%EC%9D%BC%EA%B3%B5%EC%9C%A0/samba_setting/","text":"\uc0bc\ubc14\uc124\uc815 Jetson Nano board \uc758 \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\ub97c \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac\ub85c \uc9c0\uc815\ud558\uace0, \ud574\ub2f9 \ub514\ub809\ud1a0\ub9ac\ub97c \uc678\ubd80 \ucef4\ud4e8\ud130\uc5d0\uc11c \ud30c\uc77c \uacf5\uc720 \ud615\ud0dc\ub85c \uc811\uadfc \uac00\ub2a5\ud558\ub3c4\ub85d \ud55c\ub2e4. 1.\uc0bc\ubc14\uc124\uce58 sudo apt-get install samba 2.\uacc4\uc815\ub4f1\ub85d sudo smbpasswd -a jetson 1) \uc2e4\ud589\uacfc\uc815 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc785\ub825 \uc694\uccad\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4: \uc0bc\ubc14 \uc0ac\uc6a9\uc790\uc758 \ube44\ubc00\ubc88\ud638\ub97c \uc785\ub825\ud558\uace0 \ud655\uc778\ud569\ub2c8\ub2e4. \uc774 \ube44\ubc00\ubc88\ud638\ub294 \uc0bc\ubc14\ub97c \ud1b5\ud574 \ub124\ud2b8\uc6cc\ud06c\ub85c \uc811\uadfc\ud560 \ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. New SMB password : Retype new SMB password : \ube44\ubc00\ubc88\ud638\ub97c \uc124\uc815\ud55c \ud6c4, jetson \uacc4\uc815\uc774 \uc0bc\ubc14 \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ub4f1\ub85d\ub429\ub2c8\ub2e4. \ube44\ubc00\ubc88\ud638\ub294 \"1111\" \ub124\uc790\ub9ac \uc22b\uc790\ub85c \uc9c0\uc815\ud55c\ub2e4. Note jetson\uc740 \uc0bc\ubc14\uc5d0 \ucd94\uac00\ud560 \uc0ac\uc6a9\uc790\uc758 \uc774\ub984\uc785\ub2c8\ub2e4. \uc774 \uc774\ub984\uc740 \ubc18\ub4dc\uc2dc \ub9ac\ub205\uc2a4 \uc2dc\uc2a4\ud15c\uc5d0 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uc0ac\uc6a9\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4. 3.\ud30c\uc77c \uc218\uc815 \uc0bc\ubc14(Samba)\ub294 \ub9ac\ub205\uc2a4 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc708\ub3c4\uc6b0\uc640 \ud30c\uc77c \ubc0f \ud504\ub9b0\ud130\ub97c \uacf5\uc720\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud558\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. \uc704\uc758 \uc124\uc815\uc740 \uc0bc\ubc14(Samba)\uc758 smb.conf \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ud558\ub098\uc758 \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uc815 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc544\ub798\uc5d0\uc11c \uac01 \ud56d\ubaa9\uc758 \uc758\ubbf8\ub97c \uc124\uba85\ud569\ub2c8\ub2e4: \uc0bc\ubc14(Samba) \uc124\uc815 \ud30c\uc77c\uc778 smb.conf \ud30c\uc77c\uc758 \uae30\ubcf8 \uc704\uce58\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4 vi /etc/samba/smb.conf [jetson] follow symlinks = yes wide links = yes comment = share dir path = /home/jetson/share valid users = jetson browseable = yes read only = no guest ok = no directory mask = 0755 1) [jetson] \uc124\uba85: \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac\uc758 \uc774\ub984\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \ud074\ub77c\uc774\uc5b8\ud2b8(Windows \ub4f1)\uc5d0\uc11c \uc0bc\ubc14 \uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\uba74 \uc774 \uc774\ub984\uc73c\ub85c \ub514\ub809\ud1a0\ub9ac\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. 2) follow symlinks = yes \uc124\uba85: \uc2ec\ubcfc\ub9ad \ub9c1\ud06c(\uc18c\ud504\ud2b8 \ub9c1\ud06c)\ub97c \ub530\ub77c\uac08 \uc218 \uc788\ub3c4\ub85d \uc124\uc815\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 \uc2ec\ubcfc\ub9ad \ub9c1\ud06c\ub97c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uc11c \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 3) wide links = yes \uc124\uba85: \uc2ec\ubcfc\ub9ad \ub9c1\ud06c\uac00 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c \ubc14\uae65\uc744 \uac00\ub9ac\ud0ac \uc218 \uc788\ub3c4\ub85d \ud5c8\uc6a9\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \uc2ec\ubcfc\ub9ad \ub9c1\ud06c\ub97c \ud1b5\ud574 \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac \uc678\ubd80\uc758 \uacbd\ub85c\ub3c4 \uc811\uadfc \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4. \uc8fc\uc758: \ubcf4\uc548\uc0c1 \uc704\ud5d8\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \uc2e0\uc911\ud788 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. 4) comment = share dir \uc124\uba85: \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85(\uc8fc\uc11d)\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub54c \uc124\uba85\uc774 \ud568\uaed8 \ud45c\uc2dc\ub429\ub2c8\ub2e4. 5) path = /home/jetson/share \uc124\uba85: \uc2e4\uc81c \uacf5\uc720\ub420 \ub514\ub809\ud1a0\ub9ac\uc758 \uacbd\ub85c\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \uc774 \ub514\ub809\ud1a0\ub9ac\uac00 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 \uacf5\uc720\ub429\ub2c8\ub2e4. 6) valid users = jetson \uc124\uba85: \uc774 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\ub294 \uc0ac\uc6a9\uc790\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ud6a8\uacfc: jetson \uc0ac\uc6a9\uc790\ub9cc \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 7) browseable = yes \uc124\uba85: \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uacf5\uc720 \ubaa9\ub85d\uc5d0\uc11c \uc774 \ub514\ub809\ud1a0\ub9ac\ub97c \ud0d0\uc0c9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \ub124\ud2b8\uc6cc\ud06c \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac \ubaa9\ub85d\uc5d0\uc11c \ubcf4\uc774\uac8c \ub429\ub2c8\ub2e4. 8) read only = no \uc124\uba85: \ub514\ub809\ud1a0\ub9ac\uc758 \uc4f0\uae30 \uad8c\ud55c\uc744 \uc124\uc815\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uac70\ub098 \ud30c\uc77c\uc744 \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 9) guest ok = no \uc124\uba85: \uac8c\uc2a4\ud2b8(\uc778\uc99d\ub418\uc9c0 \uc54a\uc740 \uc0ac\uc6a9\uc790)\uc758 \uc811\uadfc\uc744 \ud5c8\uc6a9 \uc5ec\ubd80\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. \ud6a8\uacfc: \uc778\uc99d\ub418\uc9c0 \uc54a\uc740 \uc0ac\uc6a9\uc790\ub294 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc811\uadfc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. 10) directory mask = 0755 \uc124\uba85: \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131 \uc2dc \uae30\ubcf8 \uad8c\ud55c\uc744 \uc124\uc815\ud569\ub2c8\ub2e4. 0755: \uc18c\uc720\uc790: \uc77d\uae30, \uc4f0\uae30, \uc2e4\ud589(7) \uadf8\ub8f9: \uc77d\uae30, \uc2e4\ud589(5) \uae30\ud0c0: \uc77d\uae30, \uc2e4\ud589(5) \ud6a8\uacfc: \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uad8c\ud55c \uc124\uc815\uc744 \uc81c\uc5b4\ud569\ub2c8\ub2e4. \uc774 \uc124\uc815\uc740 \uae30\ubcf8\uc801\uc73c\ub85c jetson \uc0ac\uc6a9\uc790\ub9cc \uc811\uadfc \uac00\ub2a5\ud558\uba70, \uc4f0\uae30 \uad8c\ud55c\uc744 \ud5c8\uc6a9\ud558\uace0, \uc2ec\ubcfc\ub9ad \ub9c1\ud06c\ub3c4 \ub530\ub77c\uac08 \uc218 \uc788\ub3c4\ub85d \uad6c\uc131\ub41c \uacf5\uc720 \ub514\ub809\ud1a0\ub9ac\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 4.\uc0bc\ubc14\uc2dc\uc791 sudo systemctl restart smbd","title":"1.1 \uc0bc\ubc14\uc124\uc815"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/jetson/","text":"\uc82f\uc2a8 \uba85\ub839\ud234 1. GPU \ud65c\uc6a9 \ud655\uc778 Jetson Nano\ub294 GPU \uac00\uc18d\uc774 \uac00\ub2a5\ud55c\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. CUDA \ubc84\uc804 \ud655\uc778: nvcc --version TensorFlow\uc5d0\uc11c GPU \ud655\uc778: import tensorflow as tf print ( \"Num GPUs Available: \" , len ( tf . config . list_physical_devices ( 'GPU' ))) PyTorch\uc5d0\uc11c GPU \ud655\uc778: import torch print ( \"CUDA available:\" , torch . cuda . is_available ()) 2. Jetson stats Jetson Top\uc740 NVIDIA Jetson \uc2dc\ub9ac\uc988\uc758 \uac1c\ubc1c \ubcf4\ub4dc\uc5d0\uc11c CPU, GPU, RAM, \uc804\ub825 \uc0ac\uc6a9\ub7c9, \uc628\ub3c4 \ub4f1\uc758 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uc0c1\ud0dc\ub97c \uc2e4\uc2dc\uac04\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\uc785\ub2c8\ub2e4. Jetson \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ud558\ub4dc\uc6e8\uc5b4 \ub9ac\uc18c\uc2a4\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uace0 \ucd5c\uc801\ud654\ub41c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\ub294 \ub370 \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc124\uce58: sudo pip3 install -U jetson-stats \uc0ac\uc6a9: jtop \ud45c\uc2dc\uc815\ubcf4: CPU \uc0ac\uc6a9\ub960: \uac01 \ucf54\uc5b4\ubcc4 \uc810\uc720\uc728 GPU \uc0ac\uc6a9\ub960: GPU \uc791\uc5c5\ub7c9 \ubc0f \uc810\uc720\uc728 \uba54\ubaa8\ub9ac \uc0c1\ud0dc: RAM \ubc0f SWAP \uc0ac\uc6a9\ub7c9 \uc628\ub3c4: \uc8fc\uc694 \ud558\ub4dc\uc6e8\uc5b4 \uad6c\uc131 \uc694\uc18c\uc758 \uc628\ub3c4 \uc804\ub825 \uc0ac\uc6a9\ub7c9: \uc18c\ube44 \uc804\ub825\uacfc \uad00\ub828 \ub370\uc774\ud130 \uc2dc\uc2a4\ud15c \uc815\ubcf4: JetPack \ubc84\uc804, \uc7a5\uce58 \ubaa8\ub378, \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub4dc\ub77c\uc774\ubc84 \ub4f1 3. Jetson Utilities Jetson Nano\uc5d0\uc11c \uc13c\uc11c\ub098 \ud558\ub4dc\uc6e8\uc5b4 \uad00\ub828 \uc791\uc5c5\uc744 \uc704\ud574 NVIDIA\uc758 jetson.utils\uc640 jetson.inference \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58: sudo apt-get install -y python3-jetson-inference python3-jetson-utils \uc608\uc81c: \uce74\uba54\ub77c \uc2a4\ud2b8\ub9ac\ubc0d import jetson.inference import jetson.utils camera = jetson . utils . videoSource ( \"/dev/video0\" ) # \uce74\uba54\ub77c \uc7a5\uce58 display = jetson . utils . videoOutput ( \"display://0\" ) # \ub514\uc2a4\ud50c\ub808\uc774 \ucd9c\ub825 while display . IsStreaming (): img = camera . Capture () display . Render ( img )","title":"1.2 \uc82f\uc2a8\ud234"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/jetson/#_1","text":"","title":"\uc82f\uc2a8 \uba85\ub839\ud234"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/jetson/#1-gpu","text":"Jetson Nano\ub294 GPU \uac00\uc18d\uc774 \uac00\ub2a5\ud55c\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. CUDA \ubc84\uc804 \ud655\uc778: nvcc --version TensorFlow\uc5d0\uc11c GPU \ud655\uc778: import tensorflow as tf print ( \"Num GPUs Available: \" , len ( tf . config . list_physical_devices ( 'GPU' ))) PyTorch\uc5d0\uc11c GPU \ud655\uc778: import torch print ( \"CUDA available:\" , torch . cuda . is_available ())","title":"1. GPU \ud65c\uc6a9 \ud655\uc778"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/jetson/#2-jetson-stats","text":"Jetson Top\uc740 NVIDIA Jetson \uc2dc\ub9ac\uc988\uc758 \uac1c\ubc1c \ubcf4\ub4dc\uc5d0\uc11c CPU, GPU, RAM, \uc804\ub825 \uc0ac\uc6a9\ub7c9, \uc628\ub3c4 \ub4f1\uc758 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uc0c1\ud0dc\ub97c \uc2e4\uc2dc\uac04\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\uc785\ub2c8\ub2e4. Jetson \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ud558\ub4dc\uc6e8\uc5b4 \ub9ac\uc18c\uc2a4\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uace0 \ucd5c\uc801\ud654\ub41c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\ub294 \ub370 \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc124\uce58: sudo pip3 install -U jetson-stats \uc0ac\uc6a9: jtop \ud45c\uc2dc\uc815\ubcf4: CPU \uc0ac\uc6a9\ub960: \uac01 \ucf54\uc5b4\ubcc4 \uc810\uc720\uc728 GPU \uc0ac\uc6a9\ub960: GPU \uc791\uc5c5\ub7c9 \ubc0f \uc810\uc720\uc728 \uba54\ubaa8\ub9ac \uc0c1\ud0dc: RAM \ubc0f SWAP \uc0ac\uc6a9\ub7c9 \uc628\ub3c4: \uc8fc\uc694 \ud558\ub4dc\uc6e8\uc5b4 \uad6c\uc131 \uc694\uc18c\uc758 \uc628\ub3c4 \uc804\ub825 \uc0ac\uc6a9\ub7c9: \uc18c\ube44 \uc804\ub825\uacfc \uad00\ub828 \ub370\uc774\ud130 \uc2dc\uc2a4\ud15c \uc815\ubcf4: JetPack \ubc84\uc804, \uc7a5\uce58 \ubaa8\ub378, \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub4dc\ub77c\uc774\ubc84 \ub4f1","title":"2. Jetson stats"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/jetson/#3-jetson-utilities","text":"Jetson Nano\uc5d0\uc11c \uc13c\uc11c\ub098 \ud558\ub4dc\uc6e8\uc5b4 \uad00\ub828 \uc791\uc5c5\uc744 \uc704\ud574 NVIDIA\uc758 jetson.utils\uc640 jetson.inference \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58: sudo apt-get install -y python3-jetson-inference python3-jetson-utils \uc608\uc81c: \uce74\uba54\ub77c \uc2a4\ud2b8\ub9ac\ubc0d import jetson.inference import jetson.utils camera = jetson . utils . videoSource ( \"/dev/video0\" ) # \uce74\uba54\ub77c \uc7a5\uce58 display = jetson . utils . videoOutput ( \"display://0\" ) # \ub514\uc2a4\ud50c\ub808\uc774 \ucd9c\ub825 while display . IsStreaming (): img = camera . Capture () display . Render ( img )","title":"3. Jetson Utilities"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/","text":"\uc258\uba85\ub839\uc5b4 Jetson Nano \ubcf4\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294\ub370, \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ub9ac\ub205\uc2a4 \uae30\ubcf8 \uba85\ub839\uc5b4\ub97c \uc774\ud574\ud558\uace0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\uba74, \ub9ac\ub205\uc2a4\ub97c \ub2e4\ub8e8\ub294 \ub370 \ud070 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4. \uc544\ub798\ub294 \ucd08\ubcf4\uc790\ub4e4\uc774 \uc54c\uc544\uc57c \ud560 \uc8fc\uc694 \ub9ac\ub205\uc2a4 \uba85\ub839\uc5b4\ub97c \uac04\ub2e8\ud788 \uc815\ub9ac\ud55c \ubaa9\ub85d\uc785\ub2c8\ub2e4. \ud30c\uc77c \ubc0f \ub514\ub809\ud1a0\ub9ac \uad00\ub9ac pwd (Print Working Directory) \ud604\uc7ac \uc791\uc5c5 \uc911\uc778 \ub514\ub809\ud1a0\ub9ac\uc758 \uacbd\ub85c\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. pwd ls (List) \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc758 \ud30c\uc77c \ubc0f \ub514\ub809\ud1a0\ub9ac \ubaa9\ub85d\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4. ls ls -l # \uc790\uc138\ud55c \uc815\ubcf4 \ud45c\uc2dc ls -a # \uc228\uae40 \ud30c\uc77c \ud3ec\ud568 cd (Change Directory) \ub514\ub809\ud1a0\ub9ac\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4. cd /path/to/directory # \ud2b9\uc815 \uacbd\ub85c\ub85c \uc774\ub3d9 cd .. # \uc0c1\uc704 \ub514\ub809\ud1a0\ub9ac\ub85c \uc774\ub3d9 cd ~ # \ud648 \ub514\ub809\ud1a0\ub9ac\ub85c \uc774\ub3d9 mkdir (Make Directory) \uc0c8 \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. mkdir new_folder rm (Remove) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4. rm file_name # \ud30c\uc77c \uc0ad\uc81c rm -r folder_name # \ub514\ub809\ud1a0\ub9ac\uc640 \ub0b4\uc6a9 \uc0ad\uc81c cp (Copy) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. cp source_file target_file cp -r source_folder target_folder mv (Move) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\ub97c \uc774\ub3d9\ud558\uac70\ub098 \uc774\ub984\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4. mv old_name new_name mv file_name /path/to/target_directory \ud30c\uc77c \ubcf4\uae30 \ubc0f \ud3b8\uc9d1 cat (Concatenate) \ud30c\uc77c \ub0b4\uc6a9\uc744 \ud45c\uc2dc\ud558\uac70\ub098 \ud30c\uc77c\uc744 \uc5f0\uacb0\ud569\ub2c8\ub2e4. cat file_name less / more \ud30c\uc77c \ub0b4\uc6a9\uc744 \ud398\uc774\uc9c0 \ub2e8\uc704\ub85c \ud655\uc778\ud569\ub2c8\ub2e4. less file_name more file_name nano / vi / vim \ud30c\uc77c\uc744 \ud3b8\uc9d1\ud569\ub2c8\ub2e4. (\ucd08\ubcf4\uc790\ub294 nano \ub97c \ucd94\ucc9c) nano file_name vi file_name vim file_name touch \uc0c8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uac70\ub098 \uae30\uc874 \ud30c\uc77c\uc758 \ub0a0\uc9dc/\uc2dc\uac04\uc744 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. touch new_file \uc2dc\uc2a4\ud15c \uc815\ubcf4 whoami \ud604\uc7ac \uc0ac\uc6a9\uc790\uc758 \uc774\ub984\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4. whoami uname \uc2dc\uc2a4\ud15c \uc815\ubcf4\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. uname uname -a # \uc790\uc138\ud55c \uc815\ubcf4 df (Disk Free) \ub514\uc2a4\ud06c \uacf5\uac04\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. df -h du (Disk Usage) \ub514\ub809\ud1a0\ub9ac \ub610\ub294 \ud30c\uc77c\uc758 \ud06c\uae30\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. du -h du -sh folder_name top / htop \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4\uc640 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. top htop # (htop\uc740 \uc124\uce58 \ud544\uc694) \uad8c\ud55c \ubc0f \uc18c\uc720\uad8c \uad00\ub9ac chmod (Change Mode) \ud30c\uc77c\uc758 \uad8c\ud55c\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4. chmod 755 file_name # \uc77d\uae30/\uc4f0\uae30/\uc2e4\ud589 \uad8c\ud55c chown (Change Ownership) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\uc758 \uc18c\uc720\uc790\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4. chown user:group file_name \ub124\ud2b8\uc6cc\ud06c ping \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 \uc0c1\ud0dc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. ping google.com curl / wget \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uac70\ub098 URL \uc694\uccad\uc744 \ubcf4\ub0c5\ub2c8\ub2e4. curl https://example.com wget https://example.com/file.zip \uae30\ud0c0 \uc720\uc6a9\ud55c \uba85\ub839\uc5b4 history \uc0ac\uc6a9\uc790\uac00 \uc2e4\ud589\ud55c \uba85\ub839\uc5b4 \ubaa9\ub85d\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. history clear \ud130\ubbf8\ub110 \ud654\uba74\uc744 \uc815\ub9ac\ud569\ub2c8\ub2e4. clear man (Manual) \uba85\ub839\uc5b4\uc758 \ub9e4\ub274\uc5bc\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4. man ls exit \ud130\ubbf8\ub110 \uc138\uc158\uc744 \uc885\ub8cc\ud569\ub2c8\ub2e4. exit","title":"1.1 \uc140\uba85\ub839"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/#_1","text":"Jetson Nano \ubcf4\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294\ub370, \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ub9ac\ub205\uc2a4 \uae30\ubcf8 \uba85\ub839\uc5b4\ub97c \uc774\ud574\ud558\uace0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\uba74, \ub9ac\ub205\uc2a4\ub97c \ub2e4\ub8e8\ub294 \ub370 \ud070 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4. \uc544\ub798\ub294 \ucd08\ubcf4\uc790\ub4e4\uc774 \uc54c\uc544\uc57c \ud560 \uc8fc\uc694 \ub9ac\ub205\uc2a4 \uba85\ub839\uc5b4\ub97c \uac04\ub2e8\ud788 \uc815\ub9ac\ud55c \ubaa9\ub85d\uc785\ub2c8\ub2e4.","title":"\uc258\uba85\ub839\uc5b4"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/#_2","text":"pwd (Print Working Directory) \ud604\uc7ac \uc791\uc5c5 \uc911\uc778 \ub514\ub809\ud1a0\ub9ac\uc758 \uacbd\ub85c\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. pwd ls (List) \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc758 \ud30c\uc77c \ubc0f \ub514\ub809\ud1a0\ub9ac \ubaa9\ub85d\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4. ls ls -l # \uc790\uc138\ud55c \uc815\ubcf4 \ud45c\uc2dc ls -a # \uc228\uae40 \ud30c\uc77c \ud3ec\ud568 cd (Change Directory) \ub514\ub809\ud1a0\ub9ac\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4. cd /path/to/directory # \ud2b9\uc815 \uacbd\ub85c\ub85c \uc774\ub3d9 cd .. # \uc0c1\uc704 \ub514\ub809\ud1a0\ub9ac\ub85c \uc774\ub3d9 cd ~ # \ud648 \ub514\ub809\ud1a0\ub9ac\ub85c \uc774\ub3d9 mkdir (Make Directory) \uc0c8 \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. mkdir new_folder rm (Remove) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4. rm file_name # \ud30c\uc77c \uc0ad\uc81c rm -r folder_name # \ub514\ub809\ud1a0\ub9ac\uc640 \ub0b4\uc6a9 \uc0ad\uc81c cp (Copy) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. cp source_file target_file cp -r source_folder target_folder mv (Move) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\ub97c \uc774\ub3d9\ud558\uac70\ub098 \uc774\ub984\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4. mv old_name new_name mv file_name /path/to/target_directory","title":"\ud30c\uc77c \ubc0f \ub514\ub809\ud1a0\ub9ac \uad00\ub9ac"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/#_3","text":"cat (Concatenate) \ud30c\uc77c \ub0b4\uc6a9\uc744 \ud45c\uc2dc\ud558\uac70\ub098 \ud30c\uc77c\uc744 \uc5f0\uacb0\ud569\ub2c8\ub2e4. cat file_name less / more \ud30c\uc77c \ub0b4\uc6a9\uc744 \ud398\uc774\uc9c0 \ub2e8\uc704\ub85c \ud655\uc778\ud569\ub2c8\ub2e4. less file_name more file_name nano / vi / vim \ud30c\uc77c\uc744 \ud3b8\uc9d1\ud569\ub2c8\ub2e4. (\ucd08\ubcf4\uc790\ub294 nano \ub97c \ucd94\ucc9c) nano file_name vi file_name vim file_name touch \uc0c8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uac70\ub098 \uae30\uc874 \ud30c\uc77c\uc758 \ub0a0\uc9dc/\uc2dc\uac04\uc744 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. touch new_file","title":"\ud30c\uc77c \ubcf4\uae30 \ubc0f \ud3b8\uc9d1"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/#_4","text":"whoami \ud604\uc7ac \uc0ac\uc6a9\uc790\uc758 \uc774\ub984\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4. whoami uname \uc2dc\uc2a4\ud15c \uc815\ubcf4\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. uname uname -a # \uc790\uc138\ud55c \uc815\ubcf4 df (Disk Free) \ub514\uc2a4\ud06c \uacf5\uac04\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. df -h du (Disk Usage) \ub514\ub809\ud1a0\ub9ac \ub610\ub294 \ud30c\uc77c\uc758 \ud06c\uae30\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. du -h du -sh folder_name top / htop \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4\uc640 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4. top htop # (htop\uc740 \uc124\uce58 \ud544\uc694)","title":"\uc2dc\uc2a4\ud15c \uc815\ubcf4"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/#_5","text":"chmod (Change Mode) \ud30c\uc77c\uc758 \uad8c\ud55c\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4. chmod 755 file_name # \uc77d\uae30/\uc4f0\uae30/\uc2e4\ud589 \uad8c\ud55c chown (Change Ownership) \ud30c\uc77c \ub610\ub294 \ub514\ub809\ud1a0\ub9ac\uc758 \uc18c\uc720\uc790\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4. chown user:group file_name","title":"\uad8c\ud55c \ubc0f \uc18c\uc720\uad8c \uad00\ub9ac"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/#_6","text":"ping \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 \uc0c1\ud0dc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. ping google.com curl / wget \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uac70\ub098 URL \uc694\uccad\uc744 \ubcf4\ub0c5\ub2c8\ub2e4. curl https://example.com wget https://example.com/file.zip","title":"\ub124\ud2b8\uc6cc\ud06c"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/linux_cmd/#_7","text":"history \uc0ac\uc6a9\uc790\uac00 \uc2e4\ud589\ud55c \uba85\ub839\uc5b4 \ubaa9\ub85d\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. history clear \ud130\ubbf8\ub110 \ud654\uba74\uc744 \uc815\ub9ac\ud569\ub2c8\ub2e4. clear man (Manual) \uba85\ub839\uc5b4\uc758 \ub9e4\ub274\uc5bc\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4. man ls exit \ud130\ubbf8\ub110 \uc138\uc158\uc744 \uc885\ub8cc\ud569\ub2c8\ub2e4. exit","title":"\uae30\ud0c0 \uc720\uc6a9\ud55c \uba85\ub839\uc5b4"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/pyenv/","text":"\uac00\uc0c1\ud658\uacbd \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 1. Python \uac00\uc0c1\ud658\uacbd \uc124\uc815 \uac00\uc0c1\ud658\uacbd\uc740 \ud504\ub85c\uc81d\ud2b8\ubcc4\ub85c \ub3c5\ub9bd\uc801\uc778 Python \ud658\uacbd\uc744 \uad00\ub9ac\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uac00\uc0c1\ud658\uacbd \uc124\uce58: sudo apt-get install -y python3-venv \uac00\uc0c1\ud658\uacbd \uc0dd\uc131 \ubc0f \ud65c\uc131\ud654: python3 -m venv myenv source myenv/bin/activate \uac00\uc0c1\ud658\uacbd \ube44\ud65c\uc131\ud654: deactivate 2. Python \uac00\uc0c1\ud658\uacbd \ud65c\uc131\ud654 \uac00\uc0c1\ud658\uacbd\uc744 \uba3c\uc800 \ud65c\uc131\ud654\ud55c \ud6c4 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud574\uc57c \ud569\ub2c8\ub2e4. \uba85\ub839\uc5b4: source /path/to/your/venv/bin/activate python /path/to/your/program.py deactivate \uc608\ub97c \ub4e4\uc5b4, \uac00\uc0c1\ud658\uacbd\uc774 /home/username/myenv\uc5d0 \uc788\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 /home/username/myproject/start.py\ub77c\uba74: source /home/username/myenv/bin/activate python /home/username/myproject/start.py deactivate 3. Shell \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc0ac\uc6a9\ud574 \uc2e4\ud589 \uc790\ub3d9\ud654\ud558\uac70\ub098, \ud3b8\ub9ac\ud558\uac8c \uc2e4\ud589\ud558\ub824\uba74 Shell \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. Shell \uc2a4\ud06c\ub9bd\ud2b8 \uc791\uc131: 1) \uc2a4\ud06c\ub9bd\ud2b8 \ud30c\uc77c \uc0dd\uc131: nano /home/username/run_program.sh 2) \ub0b4\uc6a9 \uc791\uc131: #!/bin/bash # \uac00\uc0c1\ud658\uacbd \ud65c\uc131\ud654 source /home/username/myenv/bin/activate # \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 python /home/username/myproject/start.py # \uac00\uc0c1\ud658\uacbd \ube44\ud65c\uc131\ud654 deactivate 3) \uc2e4\ud589 \uad8c\ud55c \ubd80\uc5ec: chmod +x /home/username/run_program.sh 4) \uc2e4\ud589: ./home/username/run_program.sh 4. \ubd80\ud305 \uc2dc \uc790\ub3d9 \uc2e4\ud589 Jetson Nano \ubd80\ud305 \ud6c4 \ud504\ub85c\uadf8\ub7a8\uc744 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ud558\ub824\uba74 crontab \ub610\ub294 **systemd**\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. crontab \ubc29\ubc95: 1) crontab \ud3b8\uc9d1: crontab -e 2) \ubd80\ud305 \uc2dc Shell \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud558\ub294 \ud56d\ubaa9 \ucd94\uac00: @reboot /home/username/run_program.sh >> /home/username/program_log.txt 2 > & 1 systemd \ubc29\ubc95: 1) \uc11c\ube44\uc2a4 \ud30c\uc77c \uc0dd\uc131: sudo nano /etc/systemd/system/myprogram.service 2) \uc11c\ube44\uc2a4 \ud30c\uc77c \ub0b4\uc6a9: [Unit] Description = Run My Python Program After = network.target [Service] ExecStart = /home/username/run_program.sh WorkingDirectory = /home/username User = username Restart = always [Install] WantedBy = multi-user.target 3) \uc11c\ube44\uc2a4 \ud65c\uc131\ud654 \ubc0f \uc2dc\uc791: sudo systemctl enable myprogram.service sudo systemctl start myprogram.service 4) \uc0c1\ud0dc \ud655\uc778: sudo systemctl status myprogram.service 5. \ub514\ubc84\uae45 \uc2e4\ud589 \uc911 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uba74 \ub85c\uadf8\ub97c \ud655\uc778\ud558\uc138\uc694. Shell \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589 \ub85c\uadf8: >> /home/username/program_log.txt 2>&1\uc73c\ub85c \ub85c\uadf8\ub97c \ud655\uc778. cat /home/username/program_log.txt systemd \uc11c\ube44\uc2a4 \ub85c\uadf8: journalctl -u myprogram.service \uc774 \ubc29\uc2dd\uc73c\ub85c \uac00\uc0c1\ud658\uacbd\uc5d0\uc11c \uc791\uc131\ub41c Python \ud504\ub85c\uadf8\ub7a8\uc744 Jetson Nano\uc5d0\uc11c \uc2e4\ud589\ud558\uace0, \ud544\uc694\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ud558\ub3c4\ub85d \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1.3 \uac00\uc0c1\ud658\uacbd\uc2e4\ud589"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/pyenv/#_1","text":"","title":"\uac00\uc0c1\ud658\uacbd \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/pyenv/#1-python","text":"\uac00\uc0c1\ud658\uacbd\uc740 \ud504\ub85c\uc81d\ud2b8\ubcc4\ub85c \ub3c5\ub9bd\uc801\uc778 Python \ud658\uacbd\uc744 \uad00\ub9ac\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uac00\uc0c1\ud658\uacbd \uc124\uce58: sudo apt-get install -y python3-venv \uac00\uc0c1\ud658\uacbd \uc0dd\uc131 \ubc0f \ud65c\uc131\ud654: python3 -m venv myenv source myenv/bin/activate \uac00\uc0c1\ud658\uacbd \ube44\ud65c\uc131\ud654: deactivate","title":"1. Python \uac00\uc0c1\ud658\uacbd \uc124\uc815"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/pyenv/#2-python","text":"\uac00\uc0c1\ud658\uacbd\uc744 \uba3c\uc800 \ud65c\uc131\ud654\ud55c \ud6c4 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud574\uc57c \ud569\ub2c8\ub2e4. \uba85\ub839\uc5b4: source /path/to/your/venv/bin/activate python /path/to/your/program.py deactivate \uc608\ub97c \ub4e4\uc5b4, \uac00\uc0c1\ud658\uacbd\uc774 /home/username/myenv\uc5d0 \uc788\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 /home/username/myproject/start.py\ub77c\uba74: source /home/username/myenv/bin/activate python /home/username/myproject/start.py deactivate","title":"2. Python \uac00\uc0c1\ud658\uacbd \ud65c\uc131\ud654"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/pyenv/#3-shell","text":"\uc790\ub3d9\ud654\ud558\uac70\ub098, \ud3b8\ub9ac\ud558\uac8c \uc2e4\ud589\ud558\ub824\uba74 Shell \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. Shell \uc2a4\ud06c\ub9bd\ud2b8 \uc791\uc131: 1) \uc2a4\ud06c\ub9bd\ud2b8 \ud30c\uc77c \uc0dd\uc131: nano /home/username/run_program.sh 2) \ub0b4\uc6a9 \uc791\uc131: #!/bin/bash # \uac00\uc0c1\ud658\uacbd \ud65c\uc131\ud654 source /home/username/myenv/bin/activate # \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 python /home/username/myproject/start.py # \uac00\uc0c1\ud658\uacbd \ube44\ud65c\uc131\ud654 deactivate 3) \uc2e4\ud589 \uad8c\ud55c \ubd80\uc5ec: chmod +x /home/username/run_program.sh 4) \uc2e4\ud589: ./home/username/run_program.sh","title":"3. Shell \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc0ac\uc6a9\ud574 \uc2e4\ud589"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/pyenv/#4","text":"Jetson Nano \ubd80\ud305 \ud6c4 \ud504\ub85c\uadf8\ub7a8\uc744 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ud558\ub824\uba74 crontab \ub610\ub294 **systemd**\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. crontab \ubc29\ubc95: 1) crontab \ud3b8\uc9d1: crontab -e 2) \ubd80\ud305 \uc2dc Shell \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud558\ub294 \ud56d\ubaa9 \ucd94\uac00: @reboot /home/username/run_program.sh >> /home/username/program_log.txt 2 > & 1 systemd \ubc29\ubc95: 1) \uc11c\ube44\uc2a4 \ud30c\uc77c \uc0dd\uc131: sudo nano /etc/systemd/system/myprogram.service 2) \uc11c\ube44\uc2a4 \ud30c\uc77c \ub0b4\uc6a9: [Unit] Description = Run My Python Program After = network.target [Service] ExecStart = /home/username/run_program.sh WorkingDirectory = /home/username User = username Restart = always [Install] WantedBy = multi-user.target 3) \uc11c\ube44\uc2a4 \ud65c\uc131\ud654 \ubc0f \uc2dc\uc791: sudo systemctl enable myprogram.service sudo systemctl start myprogram.service 4) \uc0c1\ud0dc \ud655\uc778: sudo systemctl status myprogram.service","title":"4. \ubd80\ud305 \uc2dc \uc790\ub3d9 \uc2e4\ud589"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/pyenv/#5","text":"\uc2e4\ud589 \uc911 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uba74 \ub85c\uadf8\ub97c \ud655\uc778\ud558\uc138\uc694. Shell \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589 \ub85c\uadf8: >> /home/username/program_log.txt 2>&1\uc73c\ub85c \ub85c\uadf8\ub97c \ud655\uc778. cat /home/username/program_log.txt systemd \uc11c\ube44\uc2a4 \ub85c\uadf8: journalctl -u myprogram.service \uc774 \ubc29\uc2dd\uc73c\ub85c \uac00\uc0c1\ud658\uacbd\uc5d0\uc11c \uc791\uc131\ub41c Python \ud504\ub85c\uadf8\ub7a8\uc744 Jetson Nano\uc5d0\uc11c \uc2e4\ud589\ud558\uace0, \ud544\uc694\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ud558\ub3c4\ub85d \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"5. \ub514\ubc84\uae45"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/run_env/","text":"\uc790\ub3d9\uc2e4\ud589 \ud504\ub85c\uadf8\ub7a8 \uacfc \ud658\uacbd\ubcc0\uc218 crontab \ub610\ub294 systemd\uc744 \ud1b5\ud558\uc5ec \ubd80\ud305 \ucd08\uae30\uc5d0 \uc790\ub3d9\uc2e4\ud589\ub418\ub3c4\ub85c\ub85d \uc124\uc815\ub41c \ud504\ub85c\uadf8\ub7a8\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc758 ~/.bashrc\ub098 ~/.profile \uac19\uc740 \ub85c\uadf8\uc778 \uc178 \ud658\uacbd \uc124\uc815 \ud30c\uc77c\uc740 \uc790\ub3d9\uc73c\ub85c \ub85c\ub4dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub294 crontab \uacfc systemd \uc11c\ube44\uc2a4\uac00 \ube44\ub85c\uadf8\uc778(non-login) \ubc0f \ube44\ub300\ud654\ud615(non-interactive) \uc178 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \ud658\uacbd\ubcc0\uc218\uc758 \uac12\ub4e4\uc774 \ud544\uc694\ud55c \uacbd\uc6b0 \ucd94\uac00\uc801\uc778 \uc124\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. 1.\uc0ac\uc6a9\uc790 \ub85c\uadf8\uc778 \ud658\uacbd \ubcc0\uc218\uac00 \uc801\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc774\uc720 systemd\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc258\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc258 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud560 \uacbd\uc6b0\uc5d0\ub3c4, \uc258 \uc790\uccb4\uac00 \ube44\ub85c\uadf8\uc778 \uc178\ub85c \uc2e4\ud589\ub418\ubbc0\ub85c ~/.bashrc, ~/.bash_profile \uac19\uc740 \ud30c\uc77c\uc774 \ub85c\ub4dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. 2. ~/.bashrc\ub97c \uc2e4\ud589\ud558\ub3c4\ub85d \uc124\uc815\ud558\ub824\uba74 ~/.bashrc\ub97c \uc218\ub3d9\uc73c\ub85c \ub85c\ub4dc\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc2e4\ud589 \uc2a4\ud06c\ub9bd\ud2b8(run_program.sh)\uc5d0 \ub2e4\uc74c\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1) \uc218\uc815\ub41c run_program.sh: #!/bin/bash # \uc0ac\uc6a9\uc790 \ud658\uacbd \ubcc0\uc218 \ub85c\ub4dc source /home/username/.bashrc # \uac00\uc0c1\ud658\uacbd \ud65c\uc131\ud654 source /home/username/myenv/bin/activate # \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 python /home/username/myproject/start.py # \uac00\uc0c1\ud658\uacbd \ube44\ud65c\uc131\ud654 deactivate 2) \uc11c\ube44\uc2a4 \ud30c\uc77c \uadf8\ub300\ub85c \uc720\uc9c0: ~/.bashrc\ub97c \ub85c\ub4dc\ud558\ub3c4\ub85d \uc124\uc815\ud588\uc73c\ubbc0\ub85c \uc11c\ube44\uc2a4 \ud30c\uc77c\uc740 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4 [Service] ExecStart = /home/username/run_program.sh WorkingDirectory = /home/username User = username Restart = always 3. \ub514\ubc84\uae45 \ubc0f \ud655\uc778 1) \ud658\uacbd\ubcc0\uc218 \ud655\uc778 Python \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \ud658\uacbd \ubcc0\uc218\ub97c \ucd9c\ub825\ud558\uc5ec \uc62c\ubc14\ub974\uac8c \ub85c\ub4dc\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4: import os print ( \"PATH:\" , os . environ . get ( \"PATH\" )) print ( \"MY_VARIABLE:\" , os . environ . get ( \"MY_VARIABLE\" )) 2) systemd \ub85c\uadf8 \ud655\uc778 \uc11c\ube44\uc2a4\uac00 \uc2e4\ud589 \uc911\uc5d0 \ud658\uacbd \ubcc0\uc218\uac00 \uc81c\ub300\ub85c \uc124\uc815\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 journalctl -u myprogram.service journalctl\uc740 Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c systemd\uc758 \ub85c\uadf8 \uad00\ub9ac\ub97c \uc704\ud55c \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. \uc2dc\uc2a4\ud15c\uc758 \ubaa8\ub4e0 \ub85c\uadf8 \uba54\uc2dc\uc9c0(\ubd80\ud305 \ub85c\uadf8, \uc11c\ube44\uc2a4 \uc0c1\ud0dc, \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ucd9c\ub825 \ub4f1)\ub97c \ud655\uc778\ud558\uace0 \uad00\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc804\ud1b5\uc801\uc778 \ub85c\uadf8 \ud30c\uc77c(/var/log) \ub300\uc2e0 systemd\uc758 journald \uc11c\ube44\uc2a4\uc5d0 \uc758\ud574 \uc800\uc7a5\ub41c \ubc14\uc774\ub108\ub9ac \ud615\uc2dd\uc758 \ub85c\uadf8 \ub370\uc774\ud130\ub97c \uc870\ud68c\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"1.4 \ud658\uacbd\ubcc0\uc218\uc801\uc6a9"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/run_env/#_1","text":"crontab \ub610\ub294 systemd\uc744 \ud1b5\ud558\uc5ec \ubd80\ud305 \ucd08\uae30\uc5d0 \uc790\ub3d9\uc2e4\ud589\ub418\ub3c4\ub85c\ub85d \uc124\uc815\ub41c \ud504\ub85c\uadf8\ub7a8\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc758 ~/.bashrc\ub098 ~/.profile \uac19\uc740 \ub85c\uadf8\uc778 \uc178 \ud658\uacbd \uc124\uc815 \ud30c\uc77c\uc740 \uc790\ub3d9\uc73c\ub85c \ub85c\ub4dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub294 crontab \uacfc systemd \uc11c\ube44\uc2a4\uac00 \ube44\ub85c\uadf8\uc778(non-login) \ubc0f \ube44\ub300\ud654\ud615(non-interactive) \uc178 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \ud658\uacbd\ubcc0\uc218\uc758 \uac12\ub4e4\uc774 \ud544\uc694\ud55c \uacbd\uc6b0 \ucd94\uac00\uc801\uc778 \uc124\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","title":"\uc790\ub3d9\uc2e4\ud589 \ud504\ub85c\uadf8\ub7a8 \uacfc \ud658\uacbd\ubcc0\uc218"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/run_env/#1","text":"systemd\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc258\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc258 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud560 \uacbd\uc6b0\uc5d0\ub3c4, \uc258 \uc790\uccb4\uac00 \ube44\ub85c\uadf8\uc778 \uc178\ub85c \uc2e4\ud589\ub418\ubbc0\ub85c ~/.bashrc, ~/.bash_profile \uac19\uc740 \ud30c\uc77c\uc774 \ub85c\ub4dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"1.\uc0ac\uc6a9\uc790 \ub85c\uadf8\uc778 \ud658\uacbd \ubcc0\uc218\uac00 \uc801\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc774\uc720"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/run_env/#2-bashrc","text":"~/.bashrc\ub97c \uc218\ub3d9\uc73c\ub85c \ub85c\ub4dc\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc2e4\ud589 \uc2a4\ud06c\ub9bd\ud2b8(run_program.sh)\uc5d0 \ub2e4\uc74c\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1) \uc218\uc815\ub41c run_program.sh: #!/bin/bash # \uc0ac\uc6a9\uc790 \ud658\uacbd \ubcc0\uc218 \ub85c\ub4dc source /home/username/.bashrc # \uac00\uc0c1\ud658\uacbd \ud65c\uc131\ud654 source /home/username/myenv/bin/activate # \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 python /home/username/myproject/start.py # \uac00\uc0c1\ud658\uacbd \ube44\ud65c\uc131\ud654 deactivate 2) \uc11c\ube44\uc2a4 \ud30c\uc77c \uadf8\ub300\ub85c \uc720\uc9c0: ~/.bashrc\ub97c \ub85c\ub4dc\ud558\ub3c4\ub85d \uc124\uc815\ud588\uc73c\ubbc0\ub85c \uc11c\ube44\uc2a4 \ud30c\uc77c\uc740 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4 [Service] ExecStart = /home/username/run_program.sh WorkingDirectory = /home/username User = username Restart = always","title":"2. ~/.bashrc\ub97c \uc2e4\ud589\ud558\ub3c4\ub85d \uc124\uc815\ud558\ub824\uba74"},{"location":"%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%8B%A4%ED%96%89/run_env/#3","text":"1) \ud658\uacbd\ubcc0\uc218 \ud655\uc778 Python \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \ud658\uacbd \ubcc0\uc218\ub97c \ucd9c\ub825\ud558\uc5ec \uc62c\ubc14\ub974\uac8c \ub85c\ub4dc\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4: import os print ( \"PATH:\" , os . environ . get ( \"PATH\" )) print ( \"MY_VARIABLE:\" , os . environ . get ( \"MY_VARIABLE\" )) 2) systemd \ub85c\uadf8 \ud655\uc778 \uc11c\ube44\uc2a4\uac00 \uc2e4\ud589 \uc911\uc5d0 \ud658\uacbd \ubcc0\uc218\uac00 \uc81c\ub300\ub85c \uc124\uc815\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 journalctl -u myprogram.service journalctl\uc740 Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c systemd\uc758 \ub85c\uadf8 \uad00\ub9ac\ub97c \uc704\ud55c \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. \uc2dc\uc2a4\ud15c\uc758 \ubaa8\ub4e0 \ub85c\uadf8 \uba54\uc2dc\uc9c0(\ubd80\ud305 \ub85c\uadf8, \uc11c\ube44\uc2a4 \uc0c1\ud0dc, \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ucd9c\ub825 \ub4f1)\ub97c \ud655\uc778\ud558\uace0 \uad00\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc804\ud1b5\uc801\uc778 \ub85c\uadf8 \ud30c\uc77c(/var/log) \ub300\uc2e0 systemd\uc758 journald \uc11c\ube44\uc2a4\uc5d0 \uc758\ud574 \uc800\uc7a5\ub41c \ubc14\uc774\ub108\ub9ac \ud615\uc2dd\uc758 \ub85c\uadf8 \ub370\uc774\ud130\ub97c \uc870\ud68c\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"3. \ub514\ubc84\uae45 \ubc0f \ud655\uc778"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/aa/","text":"","title":"Aa"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/","text":"Jetson Nano 40\ud540 \ud5e4\ub354\ub97c \uc774\uc6a9\ud55c \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc5b4 \uc608\uc81c Jetson Nano\ub294 40\ud540 GPIO \ud5e4\ub354\ub97c \ud1b5\ud574 \ub2e4\uc591\ud55c \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc81c\uc5b4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 GPIO, I2C, PWM\uc744 \ud65c\uc6a9\ud558\uc5ec LED, \ubc84\ud2bc, I2C LCD, \uc870\ub3c4 \uc13c\uc11c, DC \ubaa8\ud130, \uc628\uc2b5\ub3c4 \uc13c\uc11c, \uc11c\ubcf4 \ubaa8\ud130 \ub4f1\uc744 \uc81c\uc5b4\ud558\ub294 \uc608\uc81c\ub97c \ud1b5\ud569\ud558\uc5ec \uc81c\uacf5\ud569\ub2c8\ub2e4. 1. \uae30\ubcf8 GPIO \uc81c\uc5b4 1.1 LED \uc810\uba78 (Blinking LED) \uc124\uc815 : GPIO \ud540\uc744 \ucd9c\ub825\uc73c\ub85c \uc124\uc815\ud558\uc5ec LED \uc810\uba78 \ucf54\ub4dc : import Jetson.GPIO as GPIO import time LED_PIN = 18 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( LED_PIN , GPIO . OUT ) try : while True : GPIO . output ( LED_PIN , GPIO . HIGH ) # LED ON time . sleep ( 1 ) GPIO . output ( LED_PIN , GPIO . LOW ) # LED OFF time . sleep ( 1 ) except KeyboardInterrupt : GPIO . cleanup () 1.2 \ubc84\ud2bc \uc785\ub825 \ucc98\ub9ac \uc124\uc815 : GPIO \ud540\uc744 \uc785\ub825\uc73c\ub85c \uc124\uc815\ud558\uc5ec \ubc84\ud2bc \ub20c\ub9bc \uac10\uc9c0 \ucf54\ub4dc : import Jetson.GPIO as GPIO BUTTON_PIN = 16 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( BUTTON_PIN , GPIO . IN , pull_up_down = GPIO . PUD_UP ) try : while True : if GPIO . input ( BUTTON_PIN ) == GPIO . LOW : # \ubc84\ud2bc\uc774 \ub20c\ub9bc print ( \"Button Pressed!\" ) except KeyboardInterrupt : GPIO . cleanup () 2. I2C \uae30\uae30 \uc81c\uc5b4 2.1 I2C LCD \ucd9c\ub825 \uc124\uc815 : LCD\uc758 SDA \ud540 \u2192 Jetson Nano \ud540 3 LCD\uc758 SCL \ud540 \u2192 Jetson Nano \ud540 5 \ucf54\ub4dc : import smbus2 import time I2C_ADDR = 0x27 # LCD I2C \uc8fc\uc18c LCD_WIDTH = 16 LCD_CHR = 1 LCD_CMD = 0 LCD_LINE_1 = 0x80 LCD_LINE_2 = 0xC0 ENABLE = 0b00000100 bus = smbus2 . SMBus ( 1 ) def lcd_write ( bits , mode ): high_bits = mode | ( bits & 0xF0 ) | 0x08 low_bits = mode | (( bits << 4 ) & 0xF0 ) | 0x08 bus . write_byte ( I2C_ADDR , high_bits ) lcd_toggle_enable ( high_bits ) bus . write_byte ( I2C_ADDR , low_bits ) lcd_toggle_enable ( low_bits ) def lcd_toggle_enable ( bits ): time . sleep ( 0.0005 ) bus . write_byte ( I2C_ADDR , ( bits | ENABLE )) time . sleep ( 0.0005 ) bus . write_byte ( I2C_ADDR , ( bits & ~ ENABLE )) time . sleep ( 0.0005 ) def lcd_init (): lcd_write ( 0x33 , LCD_CMD ) lcd_write ( 0x32 , LCD_CMD ) lcd_write ( 0x06 , LCD_CMD ) lcd_write ( 0x0C , LCD_CMD ) lcd_write ( 0x28 , LCD_CMD ) lcd_write ( 0x01 , LCD_CMD ) time . sleep ( 0.0005 ) def lcd_message ( message , line ): message = message . ljust ( LCD_WIDTH , \" \" ) lcd_write ( line , LCD_CMD ) for char in message : lcd_write ( ord ( char ), LCD_CHR ) lcd_init () lcd_message ( \"Hello, Jetson!\" , LCD_LINE_1 ) lcd_message ( \"I2C LCD Ready!\" , LCD_LINE_2 ) 2.2 \uc870\ub3c4 \uc13c\uc11c (BH1750) \uc124\uc815 : I2C \uc870\ub3c4 \uc13c\uc11c\ub97c \ud1b5\ud574 \uc8fc\ubcc0 \uad11\ub7c9 \uce21\uc815 \ucf54\ub4dc : import smbus2 import time I2C_ADDR = 0x23 POWER_ON = 0x01 CONTINUOUS_HRES_MODE = 0x10 bus = smbus2 . SMBus ( 1 ) def read_light (): data = bus . read_i2c_block_data ( I2C_ADDR , CONTINUOUS_HRES_MODE , 2 ) return ( data [ 0 ] << 8 | data [ 1 ]) / 1.2 bus . write_byte ( I2C_ADDR , POWER_ON ) time . sleep ( 0.5 ) while True : light_level = read_light () print ( f \"Light Level: { light_level : .2f } lx\" ) time . sleep ( 1 ) 3. PWM\uc744 \uc774\uc6a9\ud55c \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc5b4 3.1 DC \ubaa8\ud130 \uc81c\uc5b4 (L298N) \uc124\uc815 : GPIO\uc640 L298N \ubaa8\ud130 \ub4dc\ub77c\uc774\ubc84 \uc5f0\uacb0 \ucf54\ub4dc : import Jetson.GPIO as GPIO import time IN1 = 18 IN2 = 22 ENA = 32 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( IN1 , GPIO . OUT ) GPIO . setup ( IN2 , GPIO . OUT ) GPIO . setup ( ENA , GPIO . OUT ) pwm = GPIO . PWM ( ENA , 100 ) pwm . start ( 50 ) try : while True : GPIO . output ( IN1 , GPIO . HIGH ) GPIO . output ( IN2 , GPIO . LOW ) print ( \"Motor Forward\" ) time . sleep ( 2 ) GPIO . output ( IN1 , GPIO . LOW ) GPIO . output ( IN2 , GPIO . HIGH ) print ( \"Motor Backward\" ) time . sleep ( 2 ) except KeyboardInterrupt : pwm . stop () GPIO . cleanup () 3.2 \uc11c\ubcf4 \ubaa8\ud130 \uc81c\uc5b4 \uc124\uc815 : PWM \ud540\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc11c\ubcf4 \ubaa8\ud130 \uac01\ub3c4 \uc870\uc808 \ucf54\ub4dc : import Jetson.GPIO as GPIO import time SERVO_PIN = 33 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( SERVO_PIN , GPIO . OUT ) pwm = GPIO . PWM ( SERVO_PIN , 50 ) pwm . start ( 7.5 ) try : while True : pwm . ChangeDutyCycle ( 7.5 ) # 90\ub3c4 time . sleep ( 1 ) pwm . ChangeDutyCycle ( 12.5 ) # 180\ub3c4 time . sleep ( 1 ) pwm . ChangeDutyCycle ( 2.5 ) # 0\ub3c4 time . sleep ( 1 ) except KeyboardInterrupt : pwm . stop () GPIO . cleanup () 4. \uc628\uc2b5\ub3c4 \uc13c\uc11c (DHT22) \uc124\uc815 : GPIO\ub97c \uc0ac\uc6a9\ud558\uc5ec DHT22\uc5d0\uc11c \ub370\uc774\ud130 \uc77d\uae30 \ucf54\ub4dc : import Adafruit_DHT SENSOR = Adafruit_DHT . DHT22 PIN = 4 while True : humidity , temperature = Adafruit_DHT . read_retry ( SENSOR , PIN ) if humidity is not None and temperature is not None : print ( f 'Temp: { temperature : .1f } \u00b0C, Humidity: { humidity : .1f } %' ) else : print ( 'Failed to read sensor data.' ) \uc774 \ubb38\uc11c\ub294 Jetson Nano\uc758 GPIO \ubc0f I2C \ud5e4\ub354\ub97c \ud65c\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc81c\uc5b4\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8\uc758 \ud544\uc694\uc5d0 \ub530\ub77c \uc774 \uc608\uc81c\ub4e4\uc744 \uc870\ud569\ud558\uc5ec \ud655\uc7a5\ud558\uc5ec \uc0ac\uc6a9\ud569\ub2c8\ub2e4!","title":"4.2 \uae30\ucd08\uc81c\uc5b4"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#jetson-nano-40","text":"Jetson Nano\ub294 40\ud540 GPIO \ud5e4\ub354\ub97c \ud1b5\ud574 \ub2e4\uc591\ud55c \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc81c\uc5b4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 GPIO, I2C, PWM\uc744 \ud65c\uc6a9\ud558\uc5ec LED, \ubc84\ud2bc, I2C LCD, \uc870\ub3c4 \uc13c\uc11c, DC \ubaa8\ud130, \uc628\uc2b5\ub3c4 \uc13c\uc11c, \uc11c\ubcf4 \ubaa8\ud130 \ub4f1\uc744 \uc81c\uc5b4\ud558\ub294 \uc608\uc81c\ub97c \ud1b5\ud569\ud558\uc5ec \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"Jetson Nano 40\ud540 \ud5e4\ub354\ub97c \uc774\uc6a9\ud55c \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc5b4 \uc608\uc81c"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#1-gpio","text":"","title":"1. \uae30\ubcf8 GPIO \uc81c\uc5b4"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#11-led-blinking-led","text":"\uc124\uc815 : GPIO \ud540\uc744 \ucd9c\ub825\uc73c\ub85c \uc124\uc815\ud558\uc5ec LED \uc810\uba78 \ucf54\ub4dc : import Jetson.GPIO as GPIO import time LED_PIN = 18 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( LED_PIN , GPIO . OUT ) try : while True : GPIO . output ( LED_PIN , GPIO . HIGH ) # LED ON time . sleep ( 1 ) GPIO . output ( LED_PIN , GPIO . LOW ) # LED OFF time . sleep ( 1 ) except KeyboardInterrupt : GPIO . cleanup ()","title":"1.1 LED \uc810\uba78 (Blinking LED)"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#12","text":"\uc124\uc815 : GPIO \ud540\uc744 \uc785\ub825\uc73c\ub85c \uc124\uc815\ud558\uc5ec \ubc84\ud2bc \ub20c\ub9bc \uac10\uc9c0 \ucf54\ub4dc : import Jetson.GPIO as GPIO BUTTON_PIN = 16 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( BUTTON_PIN , GPIO . IN , pull_up_down = GPIO . PUD_UP ) try : while True : if GPIO . input ( BUTTON_PIN ) == GPIO . LOW : # \ubc84\ud2bc\uc774 \ub20c\ub9bc print ( \"Button Pressed!\" ) except KeyboardInterrupt : GPIO . cleanup ()","title":"1.2 \ubc84\ud2bc \uc785\ub825 \ucc98\ub9ac"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#2-i2c","text":"","title":"2. I2C \uae30\uae30 \uc81c\uc5b4"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#21-i2c-lcd","text":"\uc124\uc815 : LCD\uc758 SDA \ud540 \u2192 Jetson Nano \ud540 3 LCD\uc758 SCL \ud540 \u2192 Jetson Nano \ud540 5 \ucf54\ub4dc : import smbus2 import time I2C_ADDR = 0x27 # LCD I2C \uc8fc\uc18c LCD_WIDTH = 16 LCD_CHR = 1 LCD_CMD = 0 LCD_LINE_1 = 0x80 LCD_LINE_2 = 0xC0 ENABLE = 0b00000100 bus = smbus2 . SMBus ( 1 ) def lcd_write ( bits , mode ): high_bits = mode | ( bits & 0xF0 ) | 0x08 low_bits = mode | (( bits << 4 ) & 0xF0 ) | 0x08 bus . write_byte ( I2C_ADDR , high_bits ) lcd_toggle_enable ( high_bits ) bus . write_byte ( I2C_ADDR , low_bits ) lcd_toggle_enable ( low_bits ) def lcd_toggle_enable ( bits ): time . sleep ( 0.0005 ) bus . write_byte ( I2C_ADDR , ( bits | ENABLE )) time . sleep ( 0.0005 ) bus . write_byte ( I2C_ADDR , ( bits & ~ ENABLE )) time . sleep ( 0.0005 ) def lcd_init (): lcd_write ( 0x33 , LCD_CMD ) lcd_write ( 0x32 , LCD_CMD ) lcd_write ( 0x06 , LCD_CMD ) lcd_write ( 0x0C , LCD_CMD ) lcd_write ( 0x28 , LCD_CMD ) lcd_write ( 0x01 , LCD_CMD ) time . sleep ( 0.0005 ) def lcd_message ( message , line ): message = message . ljust ( LCD_WIDTH , \" \" ) lcd_write ( line , LCD_CMD ) for char in message : lcd_write ( ord ( char ), LCD_CHR ) lcd_init () lcd_message ( \"Hello, Jetson!\" , LCD_LINE_1 ) lcd_message ( \"I2C LCD Ready!\" , LCD_LINE_2 )","title":"2.1 I2C LCD \ucd9c\ub825"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#22-bh1750","text":"\uc124\uc815 : I2C \uc870\ub3c4 \uc13c\uc11c\ub97c \ud1b5\ud574 \uc8fc\ubcc0 \uad11\ub7c9 \uce21\uc815 \ucf54\ub4dc : import smbus2 import time I2C_ADDR = 0x23 POWER_ON = 0x01 CONTINUOUS_HRES_MODE = 0x10 bus = smbus2 . SMBus ( 1 ) def read_light (): data = bus . read_i2c_block_data ( I2C_ADDR , CONTINUOUS_HRES_MODE , 2 ) return ( data [ 0 ] << 8 | data [ 1 ]) / 1.2 bus . write_byte ( I2C_ADDR , POWER_ON ) time . sleep ( 0.5 ) while True : light_level = read_light () print ( f \"Light Level: { light_level : .2f } lx\" ) time . sleep ( 1 )","title":"2.2 \uc870\ub3c4 \uc13c\uc11c (BH1750)"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#3-pwm","text":"","title":"3. PWM\uc744 \uc774\uc6a9\ud55c \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc5b4"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#31-dc-l298n","text":"\uc124\uc815 : GPIO\uc640 L298N \ubaa8\ud130 \ub4dc\ub77c\uc774\ubc84 \uc5f0\uacb0 \ucf54\ub4dc : import Jetson.GPIO as GPIO import time IN1 = 18 IN2 = 22 ENA = 32 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( IN1 , GPIO . OUT ) GPIO . setup ( IN2 , GPIO . OUT ) GPIO . setup ( ENA , GPIO . OUT ) pwm = GPIO . PWM ( ENA , 100 ) pwm . start ( 50 ) try : while True : GPIO . output ( IN1 , GPIO . HIGH ) GPIO . output ( IN2 , GPIO . LOW ) print ( \"Motor Forward\" ) time . sleep ( 2 ) GPIO . output ( IN1 , GPIO . LOW ) GPIO . output ( IN2 , GPIO . HIGH ) print ( \"Motor Backward\" ) time . sleep ( 2 ) except KeyboardInterrupt : pwm . stop () GPIO . cleanup ()","title":"3.1 DC \ubaa8\ud130 \uc81c\uc5b4 (L298N)"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#32","text":"\uc124\uc815 : PWM \ud540\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc11c\ubcf4 \ubaa8\ud130 \uac01\ub3c4 \uc870\uc808 \ucf54\ub4dc : import Jetson.GPIO as GPIO import time SERVO_PIN = 33 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( SERVO_PIN , GPIO . OUT ) pwm = GPIO . PWM ( SERVO_PIN , 50 ) pwm . start ( 7.5 ) try : while True : pwm . ChangeDutyCycle ( 7.5 ) # 90\ub3c4 time . sleep ( 1 ) pwm . ChangeDutyCycle ( 12.5 ) # 180\ub3c4 time . sleep ( 1 ) pwm . ChangeDutyCycle ( 2.5 ) # 0\ub3c4 time . sleep ( 1 ) except KeyboardInterrupt : pwm . stop () GPIO . cleanup ()","title":"3.2 \uc11c\ubcf4 \ubaa8\ud130 \uc81c\uc5b4"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/hw/#4-dht22","text":"\uc124\uc815 : GPIO\ub97c \uc0ac\uc6a9\ud558\uc5ec DHT22\uc5d0\uc11c \ub370\uc774\ud130 \uc77d\uae30 \ucf54\ub4dc : import Adafruit_DHT SENSOR = Adafruit_DHT . DHT22 PIN = 4 while True : humidity , temperature = Adafruit_DHT . read_retry ( SENSOR , PIN ) if humidity is not None and temperature is not None : print ( f 'Temp: { temperature : .1f } \u00b0C, Humidity: { humidity : .1f } %' ) else : print ( 'Failed to read sensor data.' ) \uc774 \ubb38\uc11c\ub294 Jetson Nano\uc758 GPIO \ubc0f I2C \ud5e4\ub354\ub97c \ud65c\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc81c\uc5b4\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8\uc758 \ud544\uc694\uc5d0 \ub530\ub77c \uc774 \uc608\uc81c\ub4e4\uc744 \uc870\ud569\ud558\uc5ec \ud655\uc7a5\ud558\uc5ec \uc0ac\uc6a9\ud569\ub2c8\ub2e4!","title":"4. \uc628\uc2b5\ub3c4 \uc13c\uc11c (DHT22)"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/","text":"PS4 \ucee8\ud130\ub864\ub7ec \uc5f0\uacb0 PlayStation 4(PS4) \ucee8\ud2b8\ub864\ub7ec\ub97c Jetson Orin Nano\uc5d0 \uc5f0\uacb0\ud558\uc5ec \uc785\ub825 \uc7a5\uce58\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc740 Bluetooth \ub610\ub294 USB \ucf00\uc774\ube14\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5f0\uacb0\ud560 \uc218 \uc788\uc73c\uba70, Python\uacfc \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc785\ub825 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc.1 ps4 1. Bluetooth \uc5f0\uacb0 Bluetooth \ud65c\uc131\ud654 Jetson Orin Nano\uc5d0 Bluetooth\uac00 \uc5c6\ub2e4\uba74 USB \ube14\ub8e8\ud22c\uc2a4 \ub3d9\uae00\uc744 \uc5f0\uacb0\ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c Bluetooth \uc11c\ube44\uc2a4\ub97c \ud65c\uc131\ud654\ud569\ub2c8\ub2e4: sudo systemctl start bluetooth sudo systemctl enable bluetooth PS4 \ucee8\ud2b8\ub864\ub7ec \ud398\uc5b4\ub9c1 PS4 \ucee8\ud2b8\ub864\ub7ec\uc758 PS \ubc84\ud2bc\uacfc Share \ubc84\ud2bc\uc744 \ub3d9\uc2dc\uc5d0 \ub204\ub974\uace0, LED\uac00 \uae5c\ubc15\uc77c \ub54c\uae4c\uc9c0 \uc720\uc9c0\ud569\ub2c8\ub2e4. \uadf8\ub9bc.2 \uc5f0\uacb0 Jetson Orin Nano\uc5d0\uc11c Bluetooth \uc7a5\uce58\ub97c \uac80\uc0c9\ud558\uace0 \uc5f0\uacb0\ud569\ub2c8\ub2e4: bluetoothctl Bluetooth CLI\uc5d0\uc11c: scan on pair [\ucee8\ud2b8\ub864\ub7ec MAC \uc8fc\uc18c] connect [\ucee8\ud2b8\ub864\ub7ec MAC \uc8fc\uc18c] trust [\ucee8\ud2b8\ub864\ub7ec MAC \uc8fc\uc18c] \uc5f0\uacb0\ub418\uba74 LED\uac00 \ucf1c\uc9c4 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ub429\ub2c8\ub2e4. 2. Python\uc73c\ub85c \uc785\ub825 \ub370\uc774\ud130 \ucc98\ub9ac Python\uacfc \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec PS4 \ucee8\ud2b8\ub864\ub7ec \uc785\ub825\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58 inputs \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58: pip3 install inputs Python \ucf54\ub4dc \uc608\uc81c \ub2e4\uc74c \ucf54\ub4dc\ub294 PS4 \ucee8\ud2b8\ub864\ub7ec\uc758 \ubc84\ud2bc \ubc0f \uc870\uc774\uc2a4\ud2f1 \uc785\ub825\uc744 \uc77d\ub294 \uae30\ubcf8 \uc608\uc81c\uc785\ub2c8\ub2e4: from inputs import get_gamepad def main (): print ( \"Listening for PS4 controller inputs...\" ) while True : events = get_gamepad () for event in events : print ( f \"Event: { event . ev_type } , Code: { event . code } , State: { event . state } \" ) if __name__ == \"__main__\" : main () \ucd9c\ub825 \uc608\uc2dc : Event: Key, Code: BTN_SOUTH, State: 1 \u2192 X \ubc84\ud2bc\uc774 \ub20c\ub9bc. Event: Absolute, Code: ABS_X, State: 128 \u2192 \uc67c\ucabd \uc870\uc774\uc2a4\ud2f1 \uc6c0\uc9c1\uc784. 3. PS4 \ucee8\ud2b8\ub864\ub7ec \ub370\uc774\ud130 \ud574\uc11d \ubc84\ud2bc \ub9e4\ud551 : BTN_SOUTH : X \ubc84\ud2bc BTN_EAST : \uc6d0\ud615 \ubc84\ud2bc BTN_NORTH : \uc0bc\uac01\ud615 \ubc84\ud2bc BTN_WEST : \uc0ac\uac01\ud615 \ubc84\ud2bc \uc870\uc774\uc2a4\ud2f1 : ABS_X , ABS_Y : \uc67c\ucabd \uc870\uc774\uc2a4\ud2f1 (\uc218\ud3c9 \ubc0f \uc218\uc9c1 \ucd95) ABS_RX , ABS_RY : \uc624\ub978\ucabd \uc870\uc774\uc2a4\ud2f1 \ud2b8\ub9ac\uac70 : ABS_Z : L2 \ud2b8\ub9ac\uac70 ABS_RZ : R2 \ud2b8\ub9ac\uac70 4. Jetson Orin Nano\uc5d0\uc11c \ud65c\uc6a9 PS4 \ucee8\ud2b8\ub864\ub7ec \ub370\uc774\ud130\ub97c Jetson Orin Nano\uc758 \uc560\ud50c\ub9ac\ucf00\uc774\uc158(\uc608: \ub85c\ubd07 \uc81c\uc5b4, \uac8c\uc784, \uc2dc\ubbac\ub808\uc774\uc158)\uc5d0 \ud1b5\ud569\ud569\ub2c8\ub2e4. \uc608\uc81c: \uc870\uc774\uc2a4\ud2f1\uc73c\ub85c \uc11c\ubcf4 \ubaa8\ud130 \uc81c\uc5b4 \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58 : pip3 install adafruit-circuitpython-servokit Python \ucf54\ub4dc : from inputs import get_gamepad from adafruit_servokit import ServoKit kit = ServoKit ( channels = 16 ) def control_servo ( x_axis ): # Convert joystick value (-32768 to 32767) to servo angle (0 to 180) angle = ( x_axis + 32768 ) * 180 // 65536 kit . servo [ 0 ] . angle = angle def main (): print ( \"Listening for PS4 controller inputs...\" ) while True : events = get_gamepad () for event in events : if event . code == \"ABS_X\" : # Left joystick horizontal control_servo ( event . state ) if __name__ == \"__main__\" : main () 5. \uc5f0\uacb0 \uc885\ub8cc ps \ubc84\ud134\uc744 10\ucd08\uac00 \uacc4\uc18d \ub204\ub974\uba74, \uc804\uba74\ubd80\uc5d0 \uc788\ub294 LED\uac00 \uaebc\uc9c0\uba70, \uc5f0\uacb0\uc774 \uc885\ub8cc\ub41c\ub2e4. \uadf8\ub9bc.2 \uc885\ub8cc 6. \ubb38\uc81c \ud574\uacb0 \ucee8\ud2b8\ub864\ub7ec\uac00 \uc778\uc2dd\ub418\uc9c0 \uc54a\uc744 \ub54c : dmesg \uba85\ub839\uc73c\ub85c USB \ub610\ub294 Bluetooth \uc7a5\uce58 \ub85c\uadf8 \ud655\uc778. \ube14\ub8e8\ud22c\uc2a4 \ub3d9\uae00 \ub610\ub294 USB \ucf00\uc774\ube14 \uc0c1\ud0dc \ud655\uc778. \uc785\ub825 \uc9c0\uc5f0 \ubc1c\uc0dd : Jetson Orin Nano\uc758 \ud504\ub85c\uc138\uc2a4 \uc6b0\uc120\uc21c\uc704\ub97c \uc870\uc815\ud558\uac70\ub098 \uc2e4\uc2dc\uac04 \uc785\ub825 \ucc98\ub9ac\ub97c \ucd5c\uc801\ud654. \uc774 \uac00\uc774\ub4dc\ub97c \ub530\ub77c PS4 \ucee8\ud2b8\ub864\ub7ec\ub97c Jetson Orin Nano\uc640 \uc131\uacf5\uc801\uc73c\ub85c \uc5f0\uacb0\ud558\uace0 \uc785\ub825 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00 \ub3c4\uc6c0\uc774 \ud544\uc694\ud558\uba74 \uc5b8\uc81c\ub4e0\uc9c0 \ubb38\uc758\ud558\uc138\uc694!","title":"4.3 PS4\ucee8\ud130\ub864\ub7ec"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#ps4","text":"PlayStation 4(PS4) \ucee8\ud2b8\ub864\ub7ec\ub97c Jetson Orin Nano\uc5d0 \uc5f0\uacb0\ud558\uc5ec \uc785\ub825 \uc7a5\uce58\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc740 Bluetooth \ub610\ub294 USB \ucf00\uc774\ube14\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5f0\uacb0\ud560 \uc218 \uc788\uc73c\uba70, Python\uacfc \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc785\ub825 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc.1 ps4","title":"PS4 \ucee8\ud130\ub864\ub7ec \uc5f0\uacb0"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#1-bluetooth","text":"Bluetooth \ud65c\uc131\ud654 Jetson Orin Nano\uc5d0 Bluetooth\uac00 \uc5c6\ub2e4\uba74 USB \ube14\ub8e8\ud22c\uc2a4 \ub3d9\uae00\uc744 \uc5f0\uacb0\ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c Bluetooth \uc11c\ube44\uc2a4\ub97c \ud65c\uc131\ud654\ud569\ub2c8\ub2e4: sudo systemctl start bluetooth sudo systemctl enable bluetooth PS4 \ucee8\ud2b8\ub864\ub7ec \ud398\uc5b4\ub9c1 PS4 \ucee8\ud2b8\ub864\ub7ec\uc758 PS \ubc84\ud2bc\uacfc Share \ubc84\ud2bc\uc744 \ub3d9\uc2dc\uc5d0 \ub204\ub974\uace0, LED\uac00 \uae5c\ubc15\uc77c \ub54c\uae4c\uc9c0 \uc720\uc9c0\ud569\ub2c8\ub2e4. \uadf8\ub9bc.2 \uc5f0\uacb0 Jetson Orin Nano\uc5d0\uc11c Bluetooth \uc7a5\uce58\ub97c \uac80\uc0c9\ud558\uace0 \uc5f0\uacb0\ud569\ub2c8\ub2e4: bluetoothctl Bluetooth CLI\uc5d0\uc11c: scan on pair [\ucee8\ud2b8\ub864\ub7ec MAC \uc8fc\uc18c] connect [\ucee8\ud2b8\ub864\ub7ec MAC \uc8fc\uc18c] trust [\ucee8\ud2b8\ub864\ub7ec MAC \uc8fc\uc18c] \uc5f0\uacb0\ub418\uba74 LED\uac00 \ucf1c\uc9c4 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ub429\ub2c8\ub2e4.","title":"1. Bluetooth \uc5f0\uacb0"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#2-python","text":"Python\uacfc \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec PS4 \ucee8\ud2b8\ub864\ub7ec \uc785\ub825\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"2. Python\uc73c\ub85c \uc785\ub825 \ub370\uc774\ud130 \ucc98\ub9ac"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#_1","text":"inputs \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58: pip3 install inputs","title":"\ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#python","text":"\ub2e4\uc74c \ucf54\ub4dc\ub294 PS4 \ucee8\ud2b8\ub864\ub7ec\uc758 \ubc84\ud2bc \ubc0f \uc870\uc774\uc2a4\ud2f1 \uc785\ub825\uc744 \uc77d\ub294 \uae30\ubcf8 \uc608\uc81c\uc785\ub2c8\ub2e4: from inputs import get_gamepad def main (): print ( \"Listening for PS4 controller inputs...\" ) while True : events = get_gamepad () for event in events : print ( f \"Event: { event . ev_type } , Code: { event . code } , State: { event . state } \" ) if __name__ == \"__main__\" : main () \ucd9c\ub825 \uc608\uc2dc : Event: Key, Code: BTN_SOUTH, State: 1 \u2192 X \ubc84\ud2bc\uc774 \ub20c\ub9bc. Event: Absolute, Code: ABS_X, State: 128 \u2192 \uc67c\ucabd \uc870\uc774\uc2a4\ud2f1 \uc6c0\uc9c1\uc784.","title":"Python \ucf54\ub4dc \uc608\uc81c"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#3-ps4","text":"\ubc84\ud2bc \ub9e4\ud551 : BTN_SOUTH : X \ubc84\ud2bc BTN_EAST : \uc6d0\ud615 \ubc84\ud2bc BTN_NORTH : \uc0bc\uac01\ud615 \ubc84\ud2bc BTN_WEST : \uc0ac\uac01\ud615 \ubc84\ud2bc \uc870\uc774\uc2a4\ud2f1 : ABS_X , ABS_Y : \uc67c\ucabd \uc870\uc774\uc2a4\ud2f1 (\uc218\ud3c9 \ubc0f \uc218\uc9c1 \ucd95) ABS_RX , ABS_RY : \uc624\ub978\ucabd \uc870\uc774\uc2a4\ud2f1 \ud2b8\ub9ac\uac70 : ABS_Z : L2 \ud2b8\ub9ac\uac70 ABS_RZ : R2 \ud2b8\ub9ac\uac70","title":"3. PS4 \ucee8\ud2b8\ub864\ub7ec \ub370\uc774\ud130 \ud574\uc11d"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#4-jetson-orin-nano","text":"PS4 \ucee8\ud2b8\ub864\ub7ec \ub370\uc774\ud130\ub97c Jetson Orin Nano\uc758 \uc560\ud50c\ub9ac\ucf00\uc774\uc158(\uc608: \ub85c\ubd07 \uc81c\uc5b4, \uac8c\uc784, \uc2dc\ubbac\ub808\uc774\uc158)\uc5d0 \ud1b5\ud569\ud569\ub2c8\ub2e4.","title":"4. Jetson Orin Nano\uc5d0\uc11c \ud65c\uc6a9"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#_2","text":"\ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58 : pip3 install adafruit-circuitpython-servokit Python \ucf54\ub4dc : from inputs import get_gamepad from adafruit_servokit import ServoKit kit = ServoKit ( channels = 16 ) def control_servo ( x_axis ): # Convert joystick value (-32768 to 32767) to servo angle (0 to 180) angle = ( x_axis + 32768 ) * 180 // 65536 kit . servo [ 0 ] . angle = angle def main (): print ( \"Listening for PS4 controller inputs...\" ) while True : events = get_gamepad () for event in events : if event . code == \"ABS_X\" : # Left joystick horizontal control_servo ( event . state ) if __name__ == \"__main__\" : main ()","title":"\uc608\uc81c: \uc870\uc774\uc2a4\ud2f1\uc73c\ub85c \uc11c\ubcf4 \ubaa8\ud130 \uc81c\uc5b4"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#5","text":"ps \ubc84\ud134\uc744 10\ucd08\uac00 \uacc4\uc18d \ub204\ub974\uba74, \uc804\uba74\ubd80\uc5d0 \uc788\ub294 LED\uac00 \uaebc\uc9c0\uba70, \uc5f0\uacb0\uc774 \uc885\ub8cc\ub41c\ub2e4. \uadf8\ub9bc.2 \uc885\ub8cc","title":"5. \uc5f0\uacb0 \uc885\ub8cc"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/ps4/#6","text":"\ucee8\ud2b8\ub864\ub7ec\uac00 \uc778\uc2dd\ub418\uc9c0 \uc54a\uc744 \ub54c : dmesg \uba85\ub839\uc73c\ub85c USB \ub610\ub294 Bluetooth \uc7a5\uce58 \ub85c\uadf8 \ud655\uc778. \ube14\ub8e8\ud22c\uc2a4 \ub3d9\uae00 \ub610\ub294 USB \ucf00\uc774\ube14 \uc0c1\ud0dc \ud655\uc778. \uc785\ub825 \uc9c0\uc5f0 \ubc1c\uc0dd : Jetson Orin Nano\uc758 \ud504\ub85c\uc138\uc2a4 \uc6b0\uc120\uc21c\uc704\ub97c \uc870\uc815\ud558\uac70\ub098 \uc2e4\uc2dc\uac04 \uc785\ub825 \ucc98\ub9ac\ub97c \ucd5c\uc801\ud654. \uc774 \uac00\uc774\ub4dc\ub97c \ub530\ub77c PS4 \ucee8\ud2b8\ub864\ub7ec\ub97c Jetson Orin Nano\uc640 \uc131\uacf5\uc801\uc73c\ub85c \uc5f0\uacb0\ud558\uace0 \uc785\ub825 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00 \ub3c4\uc6c0\uc774 \ud544\uc694\ud558\uba74 \uc5b8\uc81c\ub4e0\uc9c0 \ubb38\uc758\ud558\uc138\uc694!","title":"6. \ubb38\uc81c \ud574\uacb0"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/","text":"\uc0ac\uc6a9\ud540 \uc124\uc815 Jetson Nano\uc5d0\uc11c\ub294 40\ud540 \ud5e4\ub354\ub97c \ub2e4\uc591\ud55c \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud540\uc758 \uae30\ub2a5\uc744 \uc124\uc815\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 NVIDIA\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 Jetson-IO \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774 \ub3c4\uad6c\ub294 GPIO, I2C, SPI, UART \ub4f1 \ud2b9\uc815 \uae30\ub2a5\uc73c\ub85c \ud540\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uadf8\ub9bc.1 40 \ud5e4\ub4dc\ud540 Jetson-IO \ub3c4\uad6c \uac1c\uc694 **Jetson-IO \ub3c4\uad6c**\ub294 Jetson Nano\uc758 \ud540 \uba40\ud2f0\ud50c\ub809\uc2f1\uc744 \uac04\ub2e8\ud558\uac8c \uad6c\uc131\ud560 \uc218 \uc788\ub294 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. 40\ud540 \ud5e4\ub354\uc758 \ud540\uc740 \uae30\ubcf8\uc801\uc73c\ub85c GPIO\ub85c \uc124\uc815\ub418\uc9c0\ub9cc, \ud2b9\uc815 \ud540\uc740 I2C, SPI, UART \ub610\ub294 PWM\uacfc \uac19\uc740 \ub2e4\ub978 \uae30\ub2a5\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **Jetson-IO\ub294 GUI \ubc0f \uba85\ub839\uc904 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc0ac\uc6a9 \uac00\ub2a5**\ud569\ub2c8\ub2e4. Jetson-IO \ub3c4\uad6c \uc124\uce58 Jetson Nano\uc5d0\ub294 Jetson-IO\uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \uc124\uce58\ub97c \ud655\uc778\ud558\uace0 \uc5c5\ub370\uc774\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: sudo apt update sudo apt install -y jetson-io Jetson-IO \uc2e4\ud589 Jetson-IO\ub97c \uc2e4\ud589\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uc138\uc694: sudo jetson-io Jetson-IO GUI\uac00 \uc2e4\ud589\ub418\uba70, \uc5ec\uae30\uc11c \ud540 \uc124\uc815\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc.2 \ud540\uc124\uc815 \ud540 \uc124\uc815 \ub2e8\uacc4 1. Jetson-IO \uc2e4\ud589 \uc704 \uba85\ub839\uc5b4\ub85c Jetson-IO\ub97c \uc2e4\ud589\ud558\uba74 GUI \ucc3d\uc774 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. 2. \ud540 \uae30\ub2a5 \uc120\ud0dd GUI\uc5d0\uc11c \"Configure 40-pin Header\" \uc635\uc158\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \uc0ac\uc6a9\ud558\ub824\ub294 \uae30\ub2a5(I2C, SPI, UART \ub4f1)\uc744 \ud65c\uc131\ud654\ud569\ub2c8\ub2e4. 3. \ud540\ub9f5 \ud655\uc778 \ud65c\uc131\ud654\ub41c \uae30\ub2a5\uc5d0 \ub530\ub77c 40\ud540 \ud5e4\ub354\uc758 \ud540\ub9f5\uc774 \uc790\ub3d9\uc73c\ub85c \ubcc0\uacbd\ub429\ub2c8\ub2e4. \ud544\uc694\ud55c \ud540\uacfc \uae30\ub2a5\uc744 \ud655\uc778\ud55c \ub4a4 \uc801\uc6a9\ud569\ub2c8\ub2e4. 4. \uad6c\uc131 \uc800\uc7a5 \ubc0f \uc801\uc6a9 \"Save and Reboot to Apply\" \uc635\uc158\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \ubcc0\uacbd \uc0ac\ud56d\uc740 Jetson Nano\uac00 \uc7ac\ubd80\ud305\ub41c \ud6c4 \uc801\uc6a9\ub429\ub2c8\ub2e4. \uba85\ub839\uc904\uc5d0\uc11c \ud540 \uc0c1\ud0dc \ud655\uc778 Jetson Nano\uc758 \ud540 \uc0c1\ud0dc\ub294 /sys/kernel/debug/gpio \ud30c\uc77c\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: sudo cat /sys/kernel/debug/gpio Jetson Nano\uc758 \ud540 \uae30\ub2a5 \ubaa9\ub85d Jetson Nano\uc758 40\ud540 \ud5e4\ub354\uc5d0\uc11c \uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: 1. \uc8fc\uc694\uc0ac\uc6a9\ud540 \ud540 \ubc88\ud638 \uae30\ubcf8 \uae30\ub2a5 \uc124\uc815 \uac00\ub2a5\ud55c \ucd94\uac00 \uae30\ub2a5 3 (SDA) I2C1 SDA GPIO, I2C 5 (SCL) I2C1 SCL GPIO, I2C 7 GPIO PWM 8 UART TX GPIO, UART 10 UART RX GPIO, UART 12 GPIO PWM, GPIO 19 (MOSI) SPI MOSI GPIO, SPI 21 (MISO) SPI MISO GPIO, SPI 23 (SCLK) SPI SCLK GPIO, SPI 24 (CE0) SPI CS0 GPIO, SPI 26 (CE1) SPI CS1 GPIO, SPI 2. \uc804\uccb4\uc0ac\uc6a9\ud540 \ud540 \ubc88\ud638 \uae30\ubcf8 \uae30\ub2a5 \uc124\uc815 \uac00\ub2a5\ud55c \ucd94\uac00 \uae30\ub2a5 1 3.3V Power - 2 5V Power - 3 I2C1 SDA GPIO, I2C 4 5V Power - 5 I2C1 SCL GPIO, I2C 6 GND - 7 GPIO PWM 8 UART TX GPIO, UART 9 GND - 10 UART RX GPIO, UART 11 GPIO GPIO 12 GPIO PWM, GPIO 13 GPIO GPIO 14 GND - 15 GPIO GPIO 16 GPIO GPIO 17 3.3V Power - 18 GPIO GPIO 19 SPI MOSI GPIO, SPI 20 GND - 21 SPI MISO GPIO, SPI 22 GPIO GPIO 23 SPI SCLK GPIO, SPI 24 SPI CS0 GPIO, SPI 25 GND - 26 SPI CS1 GPIO, SPI 27 I2C0 SDA GPIO, I2C 28 I2C0 SCL GPIO, I2C 29 GPIO GPIO 30 GND - 31 GPIO PWM, GPIO 32 GPIO PWM, GPIO 33 GPIO PWM, GPIO 34 GND - 35 GPIO GPIO 36 GPIO GPIO 37 GPIO GPIO 38 GPIO PWM, GPIO 39 GND - 40 GPIO PWM, GPIO 3. \uc8fc\uc694 \uae30\ub2a5 \uc694\uc57d \uc804\uc6d0 \ubc0f GND \ud540 : \ud540 1, 17: 3.3V \ucd9c\ub825 \ud540 2, 4: 5V \ucd9c\ub825 \ud540 6, 9, 14, 20, 25, 30, 34, 39: GND (\uc811\uc9c0) I2C \ud540 : \ud540 3 (SDA), 5 (SCL): I2C1 \uc778\ud130\ud398\uc774\uc2a4 \ud540 27 (SDA), 28 (SCL): I2C0 \uc778\ud130\ud398\uc774\uc2a4 SPI \ud540 : \ud540 19 (MOSI), 21 (MISO), 23 (SCLK), 24 (CS0), 26 (CS1): SPI \uc778\ud130\ud398\uc774\uc2a4 UART \ud540 : \ud540 8 (TX), 10 (RX): UART \uc778\ud130\ud398\uc774\uc2a4 PWM \ud540 : \ud540 7, 12, 31, 32, 33, 38, 40: PWM \uc2e0\ud638 \uc0dd\uc131 \uac00\ub2a5 GPIO \ud540 : \ub098\uba38\uc9c0 \ud540\uc740 \uae30\ubcf8\uc801\uc73c\ub85c GPIO\ub85c \uc124\uc815\ub418\uc5b4 \uc788\uc73c\uba70, \uc77c\ubd80\ub294 I2C, SPI, UART, PWM \ub4f1\uc73c\ub85c \uc124\uc815 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc608\uc81c: I2C \ud540 \ud65c\uc131\ud654 Jetson-IO\ub97c \uc0ac\uc6a9\ud558\uc5ec I2C \ud540\uc744 \ud65c\uc131\ud654\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. Jetson-IO \uc2e4\ud589 : sudo jetson-io I2C \uc124\uc815 : \uba54\ub274\uc5d0\uc11c \"Enable I2C\"\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4. I2C1 \ub610\ub294 I2C2\ub97c \ud65c\uc131\ud654\ud569\ub2c8\ub2e4. \uc800\uc7a5 \ubc0f \uc7ac\ubd80\ud305 : \uc124\uc815\uc744 \uc800\uc7a5\ud558\uace0 \uc7ac\ubd80\ud305\ud569\ub2c8\ub2e4. I2C \ub514\ubc14\uc774\uc2a4 \ud655\uc778 : \uc7ac\ubd80\ud305 \ud6c4, \uc5f0\uacb0\ub41c I2C \ub514\ubc14\uc774\uc2a4\ub97c \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: sudo i2cdetect -y 1 GPIO \ud540 \uc81c\uc5b4\ub97c \uc704\ud55c Jetson.GPIO \ub77c\uc774\ube0c\ub7ec\ub9ac Jetson Nano\uc5d0\uc11c GPIO \ud540\uc744 \uc81c\uc5b4\ud558\ub824\uba74 Python\uc758 Jetson.GPIO \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Jetson.GPIO \uc124\uce58 Jetson.GPIO\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc9c0\ub9cc, \uc124\uce58\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \uc124\uce58 \uac00\ub2a5\ud569\ub2c8\ub2e4: sudo apt install python3-jetson-gpio GPIO \uc0ac\uc6a9 \uc608\uc81c import Jetson.GPIO as GPIO LED_PIN = 18 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( LED_PIN , GPIO . OUT ) GPIO . output ( LED_PIN , GPIO . HIGH ) # LED ON Jetson-IO\ub97c \uc0ac\uc6a9\ud558\uba74 Jetson Nano\uc758 \ud540 \uc124\uc815\uc744 GUI\ub97c \ud1b5\ud574 \uc9c1\uad00\uc801\uc73c\ub85c \uad00\ub9ac\ud560 \uc218 \uc788\uc5b4 \ub2e4\uc591\ud55c \ud558\ub4dc\uc6e8\uc5b4\uc640\uc758 \ud1b5\ud569\uc774 \uc6a9\uc774\ud574\uc9d1\ub2c8\ub2e4. \ud540 \uc124\uc815 \ud6c4 Jetson.GPIO, I2C, SPI \ub4f1\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uc6d0\ud558\ub294 \uae30\ub2a5\uc744 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"4.1 \ud540\uc124\uc815"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#_1","text":"Jetson Nano\uc5d0\uc11c\ub294 40\ud540 \ud5e4\ub354\ub97c \ub2e4\uc591\ud55c \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud540\uc758 \uae30\ub2a5\uc744 \uc124\uc815\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 NVIDIA\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 Jetson-IO \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774 \ub3c4\uad6c\ub294 GPIO, I2C, SPI, UART \ub4f1 \ud2b9\uc815 \uae30\ub2a5\uc73c\ub85c \ud540\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uadf8\ub9bc.1 40 \ud5e4\ub4dc\ud540","title":"\uc0ac\uc6a9\ud540 \uc124\uc815"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#jetson-io","text":"**Jetson-IO \ub3c4\uad6c**\ub294 Jetson Nano\uc758 \ud540 \uba40\ud2f0\ud50c\ub809\uc2f1\uc744 \uac04\ub2e8\ud558\uac8c \uad6c\uc131\ud560 \uc218 \uc788\ub294 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. 40\ud540 \ud5e4\ub354\uc758 \ud540\uc740 \uae30\ubcf8\uc801\uc73c\ub85c GPIO\ub85c \uc124\uc815\ub418\uc9c0\ub9cc, \ud2b9\uc815 \ud540\uc740 I2C, SPI, UART \ub610\ub294 PWM\uacfc \uac19\uc740 \ub2e4\ub978 \uae30\ub2a5\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **Jetson-IO\ub294 GUI \ubc0f \uba85\ub839\uc904 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc0ac\uc6a9 \uac00\ub2a5**\ud569\ub2c8\ub2e4.","title":"Jetson-IO \ub3c4\uad6c \uac1c\uc694"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#jetson-io_1","text":"Jetson Nano\uc5d0\ub294 Jetson-IO\uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uce58\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \uc124\uce58\ub97c \ud655\uc778\ud558\uace0 \uc5c5\ub370\uc774\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: sudo apt update sudo apt install -y jetson-io","title":"Jetson-IO \ub3c4\uad6c \uc124\uce58"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#jetson-io_2","text":"Jetson-IO\ub97c \uc2e4\ud589\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uc138\uc694: sudo jetson-io Jetson-IO GUI\uac00 \uc2e4\ud589\ub418\uba70, \uc5ec\uae30\uc11c \ud540 \uc124\uc815\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc.2 \ud540\uc124\uc815","title":"Jetson-IO \uc2e4\ud589"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#_2","text":"","title":"\ud540 \uc124\uc815 \ub2e8\uacc4"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#1-jetson-io","text":"\uc704 \uba85\ub839\uc5b4\ub85c Jetson-IO\ub97c \uc2e4\ud589\ud558\uba74 GUI \ucc3d\uc774 \ub098\ud0c0\ub0a9\ub2c8\ub2e4.","title":"1. Jetson-IO \uc2e4\ud589"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#2","text":"GUI\uc5d0\uc11c \"Configure 40-pin Header\" \uc635\uc158\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \uc0ac\uc6a9\ud558\ub824\ub294 \uae30\ub2a5(I2C, SPI, UART \ub4f1)\uc744 \ud65c\uc131\ud654\ud569\ub2c8\ub2e4.","title":"2. \ud540 \uae30\ub2a5 \uc120\ud0dd"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#3","text":"\ud65c\uc131\ud654\ub41c \uae30\ub2a5\uc5d0 \ub530\ub77c 40\ud540 \ud5e4\ub354\uc758 \ud540\ub9f5\uc774 \uc790\ub3d9\uc73c\ub85c \ubcc0\uacbd\ub429\ub2c8\ub2e4. \ud544\uc694\ud55c \ud540\uacfc \uae30\ub2a5\uc744 \ud655\uc778\ud55c \ub4a4 \uc801\uc6a9\ud569\ub2c8\ub2e4.","title":"3. \ud540\ub9f5 \ud655\uc778"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#4","text":"\"Save and Reboot to Apply\" \uc635\uc158\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \ubcc0\uacbd \uc0ac\ud56d\uc740 Jetson Nano\uac00 \uc7ac\ubd80\ud305\ub41c \ud6c4 \uc801\uc6a9\ub429\ub2c8\ub2e4.","title":"4. \uad6c\uc131 \uc800\uc7a5 \ubc0f \uc801\uc6a9"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#_3","text":"Jetson Nano\uc758 \ud540 \uc0c1\ud0dc\ub294 /sys/kernel/debug/gpio \ud30c\uc77c\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: sudo cat /sys/kernel/debug/gpio","title":"\uba85\ub839\uc904\uc5d0\uc11c \ud540 \uc0c1\ud0dc \ud655\uc778"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#jetson-nano","text":"Jetson Nano\uc758 40\ud540 \ud5e4\ub354\uc5d0\uc11c \uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:","title":"Jetson Nano\uc758 \ud540 \uae30\ub2a5 \ubaa9\ub85d"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#1","text":"\ud540 \ubc88\ud638 \uae30\ubcf8 \uae30\ub2a5 \uc124\uc815 \uac00\ub2a5\ud55c \ucd94\uac00 \uae30\ub2a5 3 (SDA) I2C1 SDA GPIO, I2C 5 (SCL) I2C1 SCL GPIO, I2C 7 GPIO PWM 8 UART TX GPIO, UART 10 UART RX GPIO, UART 12 GPIO PWM, GPIO 19 (MOSI) SPI MOSI GPIO, SPI 21 (MISO) SPI MISO GPIO, SPI 23 (SCLK) SPI SCLK GPIO, SPI 24 (CE0) SPI CS0 GPIO, SPI 26 (CE1) SPI CS1 GPIO, SPI","title":"1. \uc8fc\uc694\uc0ac\uc6a9\ud540"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#2_1","text":"\ud540 \ubc88\ud638 \uae30\ubcf8 \uae30\ub2a5 \uc124\uc815 \uac00\ub2a5\ud55c \ucd94\uac00 \uae30\ub2a5 1 3.3V Power - 2 5V Power - 3 I2C1 SDA GPIO, I2C 4 5V Power - 5 I2C1 SCL GPIO, I2C 6 GND - 7 GPIO PWM 8 UART TX GPIO, UART 9 GND - 10 UART RX GPIO, UART 11 GPIO GPIO 12 GPIO PWM, GPIO 13 GPIO GPIO 14 GND - 15 GPIO GPIO 16 GPIO GPIO 17 3.3V Power - 18 GPIO GPIO 19 SPI MOSI GPIO, SPI 20 GND - 21 SPI MISO GPIO, SPI 22 GPIO GPIO 23 SPI SCLK GPIO, SPI 24 SPI CS0 GPIO, SPI 25 GND - 26 SPI CS1 GPIO, SPI 27 I2C0 SDA GPIO, I2C 28 I2C0 SCL GPIO, I2C 29 GPIO GPIO 30 GND - 31 GPIO PWM, GPIO 32 GPIO PWM, GPIO 33 GPIO PWM, GPIO 34 GND - 35 GPIO GPIO 36 GPIO GPIO 37 GPIO GPIO 38 GPIO PWM, GPIO 39 GND - 40 GPIO PWM, GPIO","title":"2. \uc804\uccb4\uc0ac\uc6a9\ud540"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#3_1","text":"\uc804\uc6d0 \ubc0f GND \ud540 : \ud540 1, 17: 3.3V \ucd9c\ub825 \ud540 2, 4: 5V \ucd9c\ub825 \ud540 6, 9, 14, 20, 25, 30, 34, 39: GND (\uc811\uc9c0) I2C \ud540 : \ud540 3 (SDA), 5 (SCL): I2C1 \uc778\ud130\ud398\uc774\uc2a4 \ud540 27 (SDA), 28 (SCL): I2C0 \uc778\ud130\ud398\uc774\uc2a4 SPI \ud540 : \ud540 19 (MOSI), 21 (MISO), 23 (SCLK), 24 (CS0), 26 (CS1): SPI \uc778\ud130\ud398\uc774\uc2a4 UART \ud540 : \ud540 8 (TX), 10 (RX): UART \uc778\ud130\ud398\uc774\uc2a4 PWM \ud540 : \ud540 7, 12, 31, 32, 33, 38, 40: PWM \uc2e0\ud638 \uc0dd\uc131 \uac00\ub2a5 GPIO \ud540 : \ub098\uba38\uc9c0 \ud540\uc740 \uae30\ubcf8\uc801\uc73c\ub85c GPIO\ub85c \uc124\uc815\ub418\uc5b4 \uc788\uc73c\uba70, \uc77c\ubd80\ub294 I2C, SPI, UART, PWM \ub4f1\uc73c\ub85c \uc124\uc815 \uac00\ub2a5\ud569\ub2c8\ub2e4.","title":"3. \uc8fc\uc694 \uae30\ub2a5 \uc694\uc57d"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#i2c","text":"Jetson-IO\ub97c \uc0ac\uc6a9\ud558\uc5ec I2C \ud540\uc744 \ud65c\uc131\ud654\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. Jetson-IO \uc2e4\ud589 : sudo jetson-io I2C \uc124\uc815 : \uba54\ub274\uc5d0\uc11c \"Enable I2C\"\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4. I2C1 \ub610\ub294 I2C2\ub97c \ud65c\uc131\ud654\ud569\ub2c8\ub2e4. \uc800\uc7a5 \ubc0f \uc7ac\ubd80\ud305 : \uc124\uc815\uc744 \uc800\uc7a5\ud558\uace0 \uc7ac\ubd80\ud305\ud569\ub2c8\ub2e4. I2C \ub514\ubc14\uc774\uc2a4 \ud655\uc778 : \uc7ac\ubd80\ud305 \ud6c4, \uc5f0\uacb0\ub41c I2C \ub514\ubc14\uc774\uc2a4\ub97c \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4: sudo i2cdetect -y 1","title":"\uc608\uc81c: I2C \ud540 \ud65c\uc131\ud654"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#gpio-jetsongpio","text":"Jetson Nano\uc5d0\uc11c GPIO \ud540\uc744 \uc81c\uc5b4\ud558\ub824\uba74 Python\uc758 Jetson.GPIO \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"GPIO \ud540 \uc81c\uc5b4\ub97c \uc704\ud55c Jetson.GPIO \ub77c\uc774\ube0c\ub7ec\ub9ac"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#jetsongpio","text":"Jetson.GPIO\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc124\uce58\ub418\uc5b4 \uc788\uc9c0\ub9cc, \uc124\uce58\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \uc124\uce58 \uac00\ub2a5\ud569\ub2c8\ub2e4: sudo apt install python3-jetson-gpio","title":"Jetson.GPIO \uc124\uce58"},{"location":"%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4/setting/#gpio","text":"import Jetson.GPIO as GPIO LED_PIN = 18 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( LED_PIN , GPIO . OUT ) GPIO . output ( LED_PIN , GPIO . HIGH ) # LED ON Jetson-IO\ub97c \uc0ac\uc6a9\ud558\uba74 Jetson Nano\uc758 \ud540 \uc124\uc815\uc744 GUI\ub97c \ud1b5\ud574 \uc9c1\uad00\uc801\uc73c\ub85c \uad00\ub9ac\ud560 \uc218 \uc788\uc5b4 \ub2e4\uc591\ud55c \ud558\ub4dc\uc6e8\uc5b4\uc640\uc758 \ud1b5\ud569\uc774 \uc6a9\uc774\ud574\uc9d1\ub2c8\ub2e4. \ud540 \uc124\uc815 \ud6c4 Jetson.GPIO, I2C, SPI \ub4f1\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uc6d0\ud558\ub294 \uae30\ub2a5\uc744 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"GPIO \uc0ac\uc6a9 \uc608\uc81c"}]}